[
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "sigma_clip",
        "importPath": "astropy.stats",
        "description": "astropy.stats",
        "isExtraImport": true,
        "detail": "astropy.stats",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "curve_fit",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "astropy.table",
        "description": "astropy.table",
        "isExtraImport": true,
        "detail": "astropy.table",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "fitting",
        "importPath": "astropy.modeling",
        "description": "astropy.modeling",
        "isExtraImport": true,
        "detail": "astropy.modeling",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "units",
        "importPath": "astropy",
        "description": "astropy",
        "isExtraImport": true,
        "detail": "astropy",
        "documentation": {}
    },
    {
        "label": "units",
        "importPath": "astropy",
        "description": "astropy",
        "isExtraImport": true,
        "detail": "astropy",
        "documentation": {}
    },
    {
        "label": "units",
        "importPath": "astropy",
        "description": "astropy",
        "isExtraImport": true,
        "detail": "astropy",
        "documentation": {}
    },
    {
        "label": "SkyCoord",
        "importPath": "astropy.coordinates",
        "description": "astropy.coordinates",
        "isExtraImport": true,
        "detail": "astropy.coordinates",
        "documentation": {}
    },
    {
        "label": "SkyCoord",
        "importPath": "astropy.coordinates",
        "description": "astropy.coordinates",
        "isExtraImport": true,
        "detail": "astropy.coordinates",
        "documentation": {}
    },
    {
        "label": "SkyCoord",
        "importPath": "astropy.coordinates",
        "description": "astropy.coordinates",
        "isExtraImport": true,
        "detail": "astropy.coordinates",
        "documentation": {}
    },
    {
        "label": "SkyCoord",
        "importPath": "astropy.coordinates",
        "description": "astropy.coordinates",
        "isExtraImport": true,
        "detail": "astropy.coordinates",
        "documentation": {}
    },
    {
        "label": "SkyCoord",
        "importPath": "astropy.coordinates",
        "description": "astropy.coordinates",
        "isExtraImport": true,
        "detail": "astropy.coordinates",
        "documentation": {}
    },
    {
        "label": "SkyCoord",
        "importPath": "astropy.coordinates",
        "description": "astropy.coordinates",
        "isExtraImport": true,
        "detail": "astropy.coordinates",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Time",
        "importPath": "astropy.time",
        "description": "astropy.time",
        "isExtraImport": true,
        "detail": "astropy.time",
        "documentation": {}
    },
    {
        "label": "Time",
        "importPath": "astropy.time",
        "description": "astropy.time",
        "isExtraImport": true,
        "detail": "astropy.time",
        "documentation": {}
    },
    {
        "label": "Time",
        "importPath": "astropy.time",
        "description": "astropy.time",
        "isExtraImport": true,
        "detail": "astropy.time",
        "documentation": {}
    },
    {
        "label": "Time",
        "importPath": "astropy.time",
        "description": "astropy.time",
        "isExtraImport": true,
        "detail": "astropy.time",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "astropy.units",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "astropy.units",
        "description": "astropy.units",
        "detail": "astropy.units",
        "documentation": {}
    },
    {
        "label": "datetime,ephem",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime.ephem",
        "description": "datetime.ephem",
        "detail": "datetime.ephem",
        "documentation": {}
    },
    {
        "label": "Lijiang",
        "importPath": "astronomia",
        "description": "astronomia",
        "isExtraImport": true,
        "detail": "astronomia",
        "documentation": {}
    },
    {
        "label": "ephem",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ephem",
        "description": "ephem",
        "detail": "ephem",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": ".history.日期计算.时间计算03_20230617163548",
        "description": ".history.日期计算.时间计算03_20230617163548",
        "peekOfCode": "dt = datetime.strptime(\"2022 11 26 172500\", \"%Y %m %d %H%M%S\")\n# 将datetime对象格式化为标准的日期时间字符串\nformatted_dt = dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n# 输出格式化后的结果\nprint(formatted_dt)",
        "detail": ".history.日期计算.时间计算03_20230617163548",
        "documentation": {}
    },
    {
        "label": "formatted_dt",
        "kind": 5,
        "importPath": ".history.日期计算.时间计算03_20230617163548",
        "description": ".history.日期计算.时间计算03_20230617163548",
        "peekOfCode": "formatted_dt = dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n# 输出格式化后的结果\nprint(formatted_dt)",
        "detail": ".history.日期计算.时间计算03_20230617163548",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616172717",
        "description": "limit_mg..history.demo02_20230616172717",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(range(len(snr_sigclip)), snr_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))",
        "detail": "limit_mg..history.demo02_20230616172717",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616172717",
        "description": "limit_mg..history.demo02_20230616172717",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(range(len(snr_sigclip)), snr_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616172717",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616172717",
        "description": "limit_mg..history.demo02_20230616172717",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(range(len(snr_sigclip)), snr_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg..history.demo02_20230616172717",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616172717",
        "description": "limit_mg..history.demo02_20230616172717",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(range(len(snr_sigclip)), snr_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))",
        "detail": "limit_mg..history.demo02_20230616172717",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616172717",
        "description": "limit_mg..history.demo02_20230616172717",
        "peekOfCode": "p_snr = np.polyfit(range(len(snr_sigclip)), snr_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')",
        "detail": "limit_mg..history.demo02_20230616172717",
        "documentation": {}
    },
    {
        "label": "p_mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616172717",
        "description": "limit_mg..history.demo02_20230616172717",
        "peekOfCode": "p_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')",
        "detail": "limit_mg..history.demo02_20230616172717",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616172717",
        "description": "limit_mg..history.demo02_20230616172717",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()",
        "detail": "limit_mg..history.demo02_20230616172717",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616172717",
        "description": "limit_mg..history.demo02_20230616172717",
        "peekOfCode": "y_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg..history.demo02_20230616172717",
        "documentation": {}
    },
    {
        "label": "y_mag_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616172717",
        "description": "limit_mg..history.demo02_20230616172717",
        "peekOfCode": "y_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')",
        "detail": "limit_mg..history.demo02_20230616172717",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173009",
        "description": "limit_mg..history.demo02_20230616173009",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(range(len(snr_sigclip)), mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))",
        "detail": "limit_mg..history.demo02_20230616173009",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173009",
        "description": "limit_mg..history.demo02_20230616173009",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(range(len(snr_sigclip)), mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616173009",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173009",
        "description": "limit_mg..history.demo02_20230616173009",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(range(len(snr_sigclip)), mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg..history.demo02_20230616173009",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173009",
        "description": "limit_mg..history.demo02_20230616173009",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(range(len(snr_sigclip)), mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))",
        "detail": "limit_mg..history.demo02_20230616173009",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173009",
        "description": "limit_mg..history.demo02_20230616173009",
        "peekOfCode": "p_snr = np.polyfit(range(len(snr_sigclip)), mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')",
        "detail": "limit_mg..history.demo02_20230616173009",
        "documentation": {}
    },
    {
        "label": "p_mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173009",
        "description": "limit_mg..history.demo02_20230616173009",
        "peekOfCode": "p_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')",
        "detail": "limit_mg..history.demo02_20230616173009",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173009",
        "description": "limit_mg..history.demo02_20230616173009",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()",
        "detail": "limit_mg..history.demo02_20230616173009",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173009",
        "description": "limit_mg..history.demo02_20230616173009",
        "peekOfCode": "y_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg..history.demo02_20230616173009",
        "documentation": {}
    },
    {
        "label": "y_mag_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173009",
        "description": "limit_mg..history.demo02_20230616173009",
        "peekOfCode": "y_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')",
        "detail": "limit_mg..history.demo02_20230616173009",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173012",
        "description": "limit_mg..history.demo02_20230616173012",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip)), mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))",
        "detail": "limit_mg..history.demo02_20230616173012",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173012",
        "description": "limit_mg..history.demo02_20230616173012",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip)), mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616173012",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173012",
        "description": "limit_mg..history.demo02_20230616173012",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip)), mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg..history.demo02_20230616173012",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173012",
        "description": "limit_mg..history.demo02_20230616173012",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip)), mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))",
        "detail": "limit_mg..history.demo02_20230616173012",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173012",
        "description": "limit_mg..history.demo02_20230616173012",
        "peekOfCode": "p_snr = np.polyfit(snr_sigclip)), mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')",
        "detail": "limit_mg..history.demo02_20230616173012",
        "documentation": {}
    },
    {
        "label": "p_mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173012",
        "description": "limit_mg..history.demo02_20230616173012",
        "peekOfCode": "p_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')",
        "detail": "limit_mg..history.demo02_20230616173012",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173012",
        "description": "limit_mg..history.demo02_20230616173012",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()",
        "detail": "limit_mg..history.demo02_20230616173012",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173012",
        "description": "limit_mg..history.demo02_20230616173012",
        "peekOfCode": "y_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg..history.demo02_20230616173012",
        "documentation": {}
    },
    {
        "label": "y_mag_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173012",
        "description": "limit_mg..history.demo02_20230616173012",
        "peekOfCode": "y_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')",
        "detail": "limit_mg..history.demo02_20230616173012",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173013",
        "description": "limit_mg..history.demo02_20230616173013",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))",
        "detail": "limit_mg..history.demo02_20230616173013",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173013",
        "description": "limit_mg..history.demo02_20230616173013",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616173013",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173013",
        "description": "limit_mg..history.demo02_20230616173013",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg..history.demo02_20230616173013",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173013",
        "description": "limit_mg..history.demo02_20230616173013",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))",
        "detail": "limit_mg..history.demo02_20230616173013",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173013",
        "description": "limit_mg..history.demo02_20230616173013",
        "peekOfCode": "p_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\np_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')",
        "detail": "limit_mg..history.demo02_20230616173013",
        "documentation": {}
    },
    {
        "label": "p_mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173013",
        "description": "limit_mg..history.demo02_20230616173013",
        "peekOfCode": "p_mag = np.polyfit(range(len(mag_sigclip)), mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')",
        "detail": "limit_mg..history.demo02_20230616173013",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173013",
        "description": "limit_mg..history.demo02_20230616173013",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()",
        "detail": "limit_mg..history.demo02_20230616173013",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173013",
        "description": "limit_mg..history.demo02_20230616173013",
        "peekOfCode": "y_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg..history.demo02_20230616173013",
        "documentation": {}
    },
    {
        "label": "y_mag_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173013",
        "description": "limit_mg..history.demo02_20230616173013",
        "peekOfCode": "y_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')",
        "detail": "limit_mg..history.demo02_20230616173013",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173020",
        "description": "limit_mg..history.demo02_20230616173020",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616173020",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173020",
        "description": "limit_mg..history.demo02_20230616173020",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]",
        "detail": "limit_mg..history.demo02_20230616173020",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173020",
        "description": "limit_mg..history.demo02_20230616173020",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))",
        "detail": "limit_mg..history.demo02_20230616173020",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173020",
        "description": "limit_mg..history.demo02_20230616173020",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')",
        "detail": "limit_mg..history.demo02_20230616173020",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173020",
        "description": "limit_mg..history.demo02_20230616173020",
        "peekOfCode": "p_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')",
        "detail": "limit_mg..history.demo02_20230616173020",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173020",
        "description": "limit_mg..history.demo02_20230616173020",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()",
        "detail": "limit_mg..history.demo02_20230616173020",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173020",
        "description": "limit_mg..history.demo02_20230616173020",
        "peekOfCode": "y_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\ny_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg..history.demo02_20230616173020",
        "documentation": {}
    },
    {
        "label": "y_mag_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173020",
        "description": "limit_mg..history.demo02_20230616173020",
        "peekOfCode": "y_mag_fit = p_mag[0] * x_new**2 + p_mag[1] * x_new + p_mag[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')",
        "detail": "limit_mg..history.demo02_20230616173020",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173022",
        "description": "limit_mg..history.demo02_20230616173022",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616173022",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173022",
        "description": "limit_mg..history.demo02_20230616173022",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg..history.demo02_20230616173022",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173022",
        "description": "limit_mg..history.demo02_20230616173022",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')",
        "detail": "limit_mg..history.demo02_20230616173022",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173022",
        "description": "limit_mg..history.demo02_20230616173022",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')",
        "detail": "limit_mg..history.demo02_20230616173022",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173022",
        "description": "limit_mg..history.demo02_20230616173022",
        "peekOfCode": "p_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')",
        "detail": "limit_mg..history.demo02_20230616173022",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173022",
        "description": "limit_mg..history.demo02_20230616173022",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg..history.demo02_20230616173022",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173022",
        "description": "limit_mg..history.demo02_20230616173022",
        "peekOfCode": "y_snr_fit = p_snr[0] * x_new**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')",
        "detail": "limit_mg..history.demo02_20230616173022",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173026",
        "description": "limit_mg..history.demo02_20230616173026",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616173026",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173026",
        "description": "limit_mg..history.demo02_20230616173026",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg..history.demo02_20230616173026",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173026",
        "description": "limit_mg..history.demo02_20230616173026",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')",
        "detail": "limit_mg..history.demo02_20230616173026",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173026",
        "description": "limit_mg..history.demo02_20230616173026",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')",
        "detail": "limit_mg..history.demo02_20230616173026",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173026",
        "description": "limit_mg..history.demo02_20230616173026",
        "peekOfCode": "p_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')",
        "detail": "limit_mg..history.demo02_20230616173026",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173026",
        "description": "limit_mg..history.demo02_20230616173026",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg..history.demo02_20230616173026",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173026",
        "description": "limit_mg..history.demo02_20230616173026",
        "peekOfCode": "y_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.plot(x_new, y_mag_fit, 'g-', label='Fitted Mag')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')",
        "detail": "limit_mg..history.demo02_20230616173026",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173031",
        "description": "limit_mg..history.demo02_20230616173031",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616173031",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173031",
        "description": "limit_mg..history.demo02_20230616173031",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg..history.demo02_20230616173031",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173031",
        "description": "limit_mg..history.demo02_20230616173031",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')",
        "detail": "limit_mg..history.demo02_20230616173031",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173031",
        "description": "limit_mg..history.demo02_20230616173031",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')",
        "detail": "limit_mg..history.demo02_20230616173031",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173031",
        "description": "limit_mg..history.demo02_20230616173031",
        "peekOfCode": "p_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()",
        "detail": "limit_mg..history.demo02_20230616173031",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173031",
        "description": "limit_mg..history.demo02_20230616173031",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')",
        "detail": "limit_mg..history.demo02_20230616173031",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173031",
        "description": "limit_mg..history.demo02_20230616173031",
        "peekOfCode": "y_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.scatter(range(len(mag_sigclip)), mag_sigclip, label='Clipped Mag')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg..history.demo02_20230616173031",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173033",
        "description": "limit_mg..history.demo02_20230616173033",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616173033",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173033",
        "description": "limit_mg..history.demo02_20230616173033",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg..history.demo02_20230616173033",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173033",
        "description": "limit_mg..history.demo02_20230616173033",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')",
        "detail": "limit_mg..history.demo02_20230616173033",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173033",
        "description": "limit_mg..history.demo02_20230616173033",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')",
        "detail": "limit_mg..history.demo02_20230616173033",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173033",
        "description": "limit_mg..history.demo02_20230616173033",
        "peekOfCode": "p_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg..history.demo02_20230616173033",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173033",
        "description": "limit_mg..history.demo02_20230616173033",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg..history.demo02_20230616173033",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173033",
        "description": "limit_mg..history.demo02_20230616173033",
        "peekOfCode": "y_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg..history.demo02_20230616173033",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173034",
        "description": "limit_mg..history.demo02_20230616173034",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616173034",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173034",
        "description": "limit_mg..history.demo02_20230616173034",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg..history.demo02_20230616173034",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173034",
        "description": "limit_mg..history.demo02_20230616173034",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')",
        "detail": "limit_mg..history.demo02_20230616173034",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173034",
        "description": "limit_mg..history.demo02_20230616173034",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')",
        "detail": "limit_mg..history.demo02_20230616173034",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173034",
        "description": "limit_mg..history.demo02_20230616173034",
        "peekOfCode": "p_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg..history.demo02_20230616173034",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173034",
        "description": "limit_mg..history.demo02_20230616173034",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg..history.demo02_20230616173034",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173034",
        "description": "limit_mg..history.demo02_20230616173034",
        "peekOfCode": "y_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(range(len(snr_sigclip)), snr_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg..history.demo02_20230616173034",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173046",
        "description": "limit_mg..history.demo02_20230616173046",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616173046",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173046",
        "description": "limit_mg..history.demo02_20230616173046",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg..history.demo02_20230616173046",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173046",
        "description": "limit_mg..history.demo02_20230616173046",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip label='Clipped SNR')",
        "detail": "limit_mg..history.demo02_20230616173046",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173046",
        "description": "limit_mg..history.demo02_20230616173046",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')",
        "detail": "limit_mg..history.demo02_20230616173046",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173046",
        "description": "limit_mg..history.demo02_20230616173046",
        "peekOfCode": "p_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg..history.demo02_20230616173046",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173046",
        "description": "limit_mg..history.demo02_20230616173046",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg..history.demo02_20230616173046",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173046",
        "description": "limit_mg..history.demo02_20230616173046",
        "peekOfCode": "y_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg..history.demo02_20230616173046",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173048",
        "description": "limit_mg..history.demo02_20230616173048",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616173048",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173048",
        "description": "limit_mg..history.demo02_20230616173048",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg..history.demo02_20230616173048",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173048",
        "description": "limit_mg..history.demo02_20230616173048",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')",
        "detail": "limit_mg..history.demo02_20230616173048",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173048",
        "description": "limit_mg..history.demo02_20230616173048",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')",
        "detail": "limit_mg..history.demo02_20230616173048",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173048",
        "description": "limit_mg..history.demo02_20230616173048",
        "peekOfCode": "p_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg..history.demo02_20230616173048",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173048",
        "description": "limit_mg..history.demo02_20230616173048",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg..history.demo02_20230616173048",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173048",
        "description": "limit_mg..history.demo02_20230616173048",
        "peekOfCode": "y_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg..history.demo02_20230616173048",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173049",
        "description": "limit_mg..history.demo02_20230616173049",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg..history.demo02_20230616173049",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173049",
        "description": "limit_mg..history.demo02_20230616173049",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg..history.demo02_20230616173049",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173049",
        "description": "limit_mg..history.demo02_20230616173049",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')",
        "detail": "limit_mg..history.demo02_20230616173049",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173049",
        "description": "limit_mg..history.demo02_20230616173049",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')",
        "detail": "limit_mg..history.demo02_20230616173049",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173049",
        "description": "limit_mg..history.demo02_20230616173049",
        "peekOfCode": "p_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg..history.demo02_20230616173049",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173049",
        "description": "limit_mg..history.demo02_20230616173049",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg..history.demo02_20230616173049",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo02_20230616173049",
        "description": "limit_mg..history.demo02_20230616173049",
        "peekOfCode": "y_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg..history.demo02_20230616173049",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616172854",
        "description": "limit_mg..history.demo03_20230616172854",
        "peekOfCode": "def func(x, a, b):\n    return a * np.log10(x) + b\n# Fit the function to the clipped data using curve_fit\npopt, pcov = curve_fit(func, snr_sigclip, mag_sigclip)\n# Evaluate the fitted function at some new values (e.g. x=0.1,0.2,0.3,...,max(snr_sigclip))\nx_new = np.linspace(0.1, max(snr_sigclip), 100)\ny_fit = func(x_new, *popt)\n# Plot the clipped data and fitted function\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped Data')",
        "detail": "limit_mg..history.demo03_20230616172854",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616172854",
        "description": "limit_mg..history.demo03_20230616172854",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Define a function to fit\ndef func(x, a, b):\n    return a * np.log10(x) + b\n# Fit the function to the clipped data using curve_fit\npopt, pcov = curve_fit(func, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo03_20230616172854",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616172854",
        "description": "limit_mg..history.demo03_20230616172854",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Define a function to fit\ndef func(x, a, b):\n    return a * np.log10(x) + b\n# Fit the function to the clipped data using curve_fit\npopt, pcov = curve_fit(func, snr_sigclip, mag_sigclip)\n# Evaluate the fitted function at some new values (e.g. x=0.1,0.2,0.3,...,max(snr_sigclip))",
        "detail": "limit_mg..history.demo03_20230616172854",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616172854",
        "description": "limit_mg..history.demo03_20230616172854",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Define a function to fit\ndef func(x, a, b):\n    return a * np.log10(x) + b\n# Fit the function to the clipped data using curve_fit\npopt, pcov = curve_fit(func, snr_sigclip, mag_sigclip)\n# Evaluate the fitted function at some new values (e.g. x=0.1,0.2,0.3,...,max(snr_sigclip))\nx_new = np.linspace(0.1, max(snr_sigclip), 100)\ny_fit = func(x_new, *popt)",
        "detail": "limit_mg..history.demo03_20230616172854",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616172854",
        "description": "limit_mg..history.demo03_20230616172854",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Define a function to fit\ndef func(x, a, b):\n    return a * np.log10(x) + b\n# Fit the function to the clipped data using curve_fit\npopt, pcov = curve_fit(func, snr_sigclip, mag_sigclip)\n# Evaluate the fitted function at some new values (e.g. x=0.1,0.2,0.3,...,max(snr_sigclip))\nx_new = np.linspace(0.1, max(snr_sigclip), 100)\ny_fit = func(x_new, *popt)\n# Plot the clipped data and fitted function",
        "detail": "limit_mg..history.demo03_20230616172854",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616172854",
        "description": "limit_mg..history.demo03_20230616172854",
        "peekOfCode": "x_new = np.linspace(0.1, max(snr_sigclip), 100)\ny_fit = func(x_new, *popt)\n# Plot the clipped data and fitted function\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped Data')\nplt.plot(x_new, y_fit, 'r-', label='Fitted Function')\nplt.legend()\nplt.xlabel('SNR')\nplt.ylabel('Magnitude')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616172854",
        "documentation": {}
    },
    {
        "label": "y_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616172854",
        "description": "limit_mg..history.demo03_20230616172854",
        "peekOfCode": "y_fit = func(x_new, *popt)\n# Plot the clipped data and fitted function\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped Data')\nplt.plot(x_new, y_fit, 'r-', label='Fitted Function')\nplt.legend()\nplt.xlabel('SNR')\nplt.ylabel('Magnitude')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616172854",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616172855",
        "description": "limit_mg..history.demo03_20230616172855",
        "peekOfCode": "def func(x, a, b):\n    return a * np.log10(x) + b\n# Fit the function to the clipped data using curve_fit\npopt, pcov = curve_fit(func, snr_sigclip, mag_sigclip)\n# Evaluate the fitted function at some new values (e.g. x=0.1,0.2,0.3,...,max(snr_sigclip))\nx_new = np.linspace(0.1, max(snr_sigclip), 100)\ny_fit = func(x_new, *popt)\n# Plot the clipped data and fitted function\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped Data')",
        "detail": "limit_mg..history.demo03_20230616172855",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616172855",
        "description": "limit_mg..history.demo03_20230616172855",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Define a function to fit\ndef func(x, a, b):\n    return a * np.log10(x) + b\n# Fit the function to the clipped data using curve_fit\npopt, pcov = curve_fit(func, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo03_20230616172855",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616172855",
        "description": "limit_mg..history.demo03_20230616172855",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Define a function to fit\ndef func(x, a, b):\n    return a * np.log10(x) + b\n# Fit the function to the clipped data using curve_fit\npopt, pcov = curve_fit(func, snr_sigclip, mag_sigclip)\n# Evaluate the fitted function at some new values (e.g. x=0.1,0.2,0.3,...,max(snr_sigclip))",
        "detail": "limit_mg..history.demo03_20230616172855",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616172855",
        "description": "limit_mg..history.demo03_20230616172855",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Define a function to fit\ndef func(x, a, b):\n    return a * np.log10(x) + b\n# Fit the function to the clipped data using curve_fit\npopt, pcov = curve_fit(func, snr_sigclip, mag_sigclip)\n# Evaluate the fitted function at some new values (e.g. x=0.1,0.2,0.3,...,max(snr_sigclip))\nx_new = np.linspace(0.1, max(snr_sigclip), 100)\ny_fit = func(x_new, *popt)",
        "detail": "limit_mg..history.demo03_20230616172855",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616172855",
        "description": "limit_mg..history.demo03_20230616172855",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Define a function to fit\ndef func(x, a, b):\n    return a * np.log10(x) + b\n# Fit the function to the clipped data using curve_fit\npopt, pcov = curve_fit(func, snr_sigclip, mag_sigclip)\n# Evaluate the fitted function at some new values (e.g. x=0.1,0.2,0.3,...,max(snr_sigclip))\nx_new = np.linspace(0.1, max(snr_sigclip), 100)\ny_fit = func(x_new, *popt)\n# Plot the clipped data and fitted function",
        "detail": "limit_mg..history.demo03_20230616172855",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616172855",
        "description": "limit_mg..history.demo03_20230616172855",
        "peekOfCode": "x_new = np.linspace(0.1, max(snr_sigclip), 100)\ny_fit = func(x_new, *popt)\n# Plot the clipped data and fitted function\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped Data')\nplt.plot(x_new, y_fit, 'r-', label='Fitted Function')\nplt.legend()\nplt.xlabel('SNR')\nplt.ylabel('Magnitude')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616172855",
        "documentation": {}
    },
    {
        "label": "y_fit",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616172855",
        "description": "limit_mg..history.demo03_20230616172855",
        "peekOfCode": "y_fit = func(x_new, *popt)\n# Plot the clipped data and fitted function\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped Data')\nplt.plot(x_new, y_fit, 'r-', label='Fitted Function')\nplt.legend()\nplt.xlabel('SNR')\nplt.ylabel('Magnitude')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616172855",
        "documentation": {}
    },
    {
        "label": "quadratic_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173245",
        "description": "limit_mg..history.demo03_20230616173245",
        "peekOfCode": "def quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173245",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173245",
        "description": "limit_mg..history.demo03_20230616173245",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合",
        "detail": "limit_mg..history.demo03_20230616173245",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173245",
        "description": "limit_mg..history.demo03_20230616173245",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173245",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173245",
        "description": "limit_mg..history.demo03_20230616173245",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173245",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173245",
        "description": "limit_mg..history.demo03_20230616173245",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173245",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173245",
        "description": "limit_mg..history.demo03_20230616173245",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173245",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173245",
        "description": "limit_mg..history.demo03_20230616173245",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), 1000)\ny = quadratic_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173245",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173245",
        "description": "limit_mg..history.demo03_20230616173245",
        "peekOfCode": "y = quadratic_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173245",
        "documentation": {}
    },
    {
        "label": "quadratic_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173317",
        "description": "limit_mg..history.demo03_20230616173317",
        "peekOfCode": "def quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173317",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173317",
        "description": "limit_mg..history.demo03_20230616173317",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合",
        "detail": "limit_mg..history.demo03_20230616173317",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173317",
        "description": "limit_mg..history.demo03_20230616173317",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173317",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173317",
        "description": "limit_mg..history.demo03_20230616173317",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173317",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173317",
        "description": "limit_mg..history.demo03_20230616173317",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173317",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173317",
        "description": "limit_mg..history.demo03_20230616173317",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173317",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173317",
        "description": "limit_mg..history.demo03_20230616173317",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), 1000)\ny = quadratic_func(mag_sigclip, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173317",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173317",
        "description": "limit_mg..history.demo03_20230616173317",
        "peekOfCode": "y = quadratic_func(mag_sigclip, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173317",
        "documentation": {}
    },
    {
        "label": "quadratic_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173319",
        "description": "limit_mg..history.demo03_20230616173319",
        "peekOfCode": "def quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173319",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173319",
        "description": "limit_mg..history.demo03_20230616173319",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合",
        "detail": "limit_mg..history.demo03_20230616173319",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173319",
        "description": "limit_mg..history.demo03_20230616173319",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173319",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173319",
        "description": "limit_mg..history.demo03_20230616173319",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173319",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173319",
        "description": "limit_mg..history.demo03_20230616173319",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173319",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173319",
        "description": "limit_mg..history.demo03_20230616173319",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173319",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173319",
        "description": "limit_mg..history.demo03_20230616173319",
        "peekOfCode": "y = quadratic_func(mag_sigclip, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173319",
        "documentation": {}
    },
    {
        "label": "quadratic_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173321",
        "description": "limit_mg..history.demo03_20230616173321",
        "peekOfCode": "def quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173321",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173321",
        "description": "limit_mg..history.demo03_20230616173321",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合",
        "detail": "limit_mg..history.demo03_20230616173321",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173321",
        "description": "limit_mg..history.demo03_20230616173321",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173321",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173321",
        "description": "limit_mg..history.demo03_20230616173321",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173321",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173321",
        "description": "limit_mg..history.demo03_20230616173321",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173321",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173321",
        "description": "limit_mg..history.demo03_20230616173321",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义二次函数\ndef quadratic_func(x, a, b, c):\n    return a*x**2 + b*x + c\n# 进行二项式拟合\npopt, pcov = curve_fit(quadratic_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173321",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173321",
        "description": "limit_mg..history.demo03_20230616173321",
        "peekOfCode": "y = quadratic_func(mag_sigclip, *popt)\nplt.plot(mag_sigclip, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173321",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173528",
        "description": "limit_mg..history.demo03_20230616173528",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173528",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173528",
        "description": "limit_mg..history.demo03_20230616173528",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo03_20230616173528",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173528",
        "description": "limit_mg..history.demo03_20230616173528",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173528",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173528",
        "description": "limit_mg..history.demo03_20230616173528",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173528",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173528",
        "description": "limit_mg..history.demo03_20230616173528",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173528",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173528",
        "description": "limit_mg..history.demo03_20230616173528",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173528",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173528",
        "description": "limit_mg..history.demo03_20230616173528",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), 1000)\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173528",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173528",
        "description": "limit_mg..history.demo03_20230616173528",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173528",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173548",
        "description": "limit_mg..history.demo03_20230616173548",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173548",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173548",
        "description": "limit_mg..history.demo03_20230616173548",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo03_20230616173548",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173548",
        "description": "limit_mg..history.demo03_20230616173548",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173548",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173548",
        "description": "limit_mg..history.demo03_20230616173548",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173548",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173548",
        "description": "limit_mg..history.demo03_20230616173548",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173548",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173548",
        "description": "limit_mg..history.demo03_20230616173548",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173548",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173548",
        "description": "limit_mg..history.demo03_20230616173548",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len*())\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173548",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173548",
        "description": "limit_mg..history.demo03_20230616173548",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173548",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173550",
        "description": "limit_mg..history.demo03_20230616173550",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173550",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173550",
        "description": "limit_mg..history.demo03_20230616173550",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo03_20230616173550",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173550",
        "description": "limit_mg..history.demo03_20230616173550",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173550",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173550",
        "description": "limit_mg..history.demo03_20230616173550",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173550",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173550",
        "description": "limit_mg..history.demo03_20230616173550",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173550",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173550",
        "description": "limit_mg..history.demo03_20230616173550",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173550",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173550",
        "description": "limit_mg..history.demo03_20230616173550",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len)\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173550",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173550",
        "description": "limit_mg..history.demo03_20230616173550",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173550",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173552",
        "description": "limit_mg..history.demo03_20230616173552",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173552",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173552",
        "description": "limit_mg..history.demo03_20230616173552",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo03_20230616173552",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173552",
        "description": "limit_mg..history.demo03_20230616173552",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173552",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173552",
        "description": "limit_mg..history.demo03_20230616173552",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173552",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173552",
        "description": "limit_mg..history.demo03_20230616173552",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173552",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173552",
        "description": "limit_mg..history.demo03_20230616173552",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173552",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173552",
        "description": "limit_mg..history.demo03_20230616173552",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173552",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173552",
        "description": "limit_mg..history.demo03_20230616173552",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173552",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173615",
        "description": "limit_mg..history.demo03_20230616173615",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173615",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173615",
        "description": "limit_mg..history.demo03_20230616173615",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo03_20230616173615",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173615",
        "description": "limit_mg..history.demo03_20230616173615",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173615",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173615",
        "description": "limit_mg..history.demo03_20230616173615",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173615",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173615",
        "description": "limit_mg..history.demo03_20230616173615",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173615",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173615",
        "description": "limit_mg..history.demo03_20230616173615",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173615",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173615",
        "description": "limit_mg..history.demo03_20230616173615",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173615",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173615",
        "description": "limit_mg..history.demo03_20230616173615",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173615",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173623",
        "description": "limit_mg..history.demo03_20230616173623",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173623",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173623",
        "description": "limit_mg..history.demo03_20230616173623",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo03_20230616173623",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173623",
        "description": "limit_mg..history.demo03_20230616173623",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173623",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173623",
        "description": "limit_mg..history.demo03_20230616173623",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173623",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173623",
        "description": "limit_mg..history.demo03_20230616173623",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173623",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173623",
        "description": "limit_mg..history.demo03_20230616173623",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173623",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173623",
        "description": "limit_mg..history.demo03_20230616173623",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173623",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173623",
        "description": "limit_mg..history.demo03_20230616173623",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173623",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173658",
        "description": "limit_mg..history.demo03_20230616173658",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173658",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173658",
        "description": "limit_mg..history.demo03_20230616173658",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo03_20230616173658",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173658",
        "description": "limit_mg..history.demo03_20230616173658",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173658",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173658",
        "description": "limit_mg..history.demo03_20230616173658",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173658",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173658",
        "description": "limit_mg..history.demo03_20230616173658",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173658",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173658",
        "description": "limit_mg..history.demo03_20230616173658",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173658",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173658",
        "description": "limit_mg..history.demo03_20230616173658",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173658",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173658",
        "description": "limit_mg..history.demo03_20230616173658",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173658",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173659",
        "description": "limit_mg..history.demo03_20230616173659",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173659",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173659",
        "description": "limit_mg..history.demo03_20230616173659",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo03_20230616173659",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173659",
        "description": "limit_mg..history.demo03_20230616173659",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173659",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173659",
        "description": "limit_mg..history.demo03_20230616173659",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173659",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173659",
        "description": "limit_mg..history.demo03_20230616173659",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173659",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173659",
        "description": "limit_mg..history.demo03_20230616173659",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173659",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173659",
        "description": "limit_mg..history.demo03_20230616173659",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173659",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173659",
        "description": "limit_mg..history.demo03_20230616173659",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173659",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo03_20230616173730",
        "description": "limit_mg..history.demo03_20230616173730",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo03_20230616173730",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173730",
        "description": "limit_mg..history.demo03_20230616173730",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo03_20230616173730",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173730",
        "description": "limit_mg..history.demo03_20230616173730",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo03_20230616173730",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173730",
        "description": "limit_mg..history.demo03_20230616173730",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo03_20230616173730",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173730",
        "description": "limit_mg..history.demo03_20230616173730",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo03_20230616173730",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173730",
        "description": "limit_mg..history.demo03_20230616173730",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo03_20230616173730",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173730",
        "description": "limit_mg..history.demo03_20230616173730",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173730",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo03_20230616173730",
        "description": "limit_mg..history.demo03_20230616173730",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo03_20230616173730",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173758",
        "description": "limit_mg..history.demo04_20230616173758",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip, mag_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_yaxis()",
        "detail": "limit_mg..history.demo04_20230616173758",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173758",
        "description": "limit_mg..history.demo04_20230616173758",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173758",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173758",
        "description": "limit_mg..history.demo04_20230616173758",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173758",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173758",
        "description": "limit_mg..history.demo04_20230616173758",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip, mag_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173758",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173758",
        "description": "limit_mg..history.demo04_20230616173758",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip, mag_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173758",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173758",
        "description": "limit_mg..history.demo04_20230616173758",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip, mag_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173758",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173758",
        "description": "limit_mg..history.demo04_20230616173758",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(y, x, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173758",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173758",
        "description": "limit_mg..history.demo04_20230616173758",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(y, x, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173758",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173800",
        "description": "limit_mg..history.demo04_20230616173800",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip, mag_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_yaxis()",
        "detail": "limit_mg..history.demo04_20230616173800",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173800",
        "description": "limit_mg..history.demo04_20230616173800",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173800",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173800",
        "description": "limit_mg..history.demo04_20230616173800",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173800",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173800",
        "description": "limit_mg..history.demo04_20230616173800",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip, mag_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173800",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173800",
        "description": "limit_mg..history.demo04_20230616173800",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip, mag_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173800",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173800",
        "description": "limit_mg..history.demo04_20230616173800",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip, mag_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173800",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173800",
        "description": "limit_mg..history.demo04_20230616173800",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(y, x, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173800",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173800",
        "description": "limit_mg..history.demo04_20230616173800",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(y, x, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173800",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173827",
        "description": "limit_mg..history.demo04_20230616173827",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo04_20230616173827",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173827",
        "description": "limit_mg..history.demo04_20230616173827",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173827",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173827",
        "description": "limit_mg..history.demo04_20230616173827",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173827",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173827",
        "description": "limit_mg..history.demo04_20230616173827",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173827",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173827",
        "description": "limit_mg..history.demo04_20230616173827",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173827",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173827",
        "description": "limit_mg..history.demo04_20230616173827",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173827",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173827",
        "description": "limit_mg..history.demo04_20230616173827",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173827",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173827",
        "description": "limit_mg..history.demo04_20230616173827",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173827",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173844",
        "description": "limit_mg..history.demo04_20230616173844",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo04_20230616173844",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173844",
        "description": "limit_mg..history.demo04_20230616173844",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173844",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173844",
        "description": "limit_mg..history.demo04_20230616173844",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173844",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173844",
        "description": "limit_mg..history.demo04_20230616173844",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173844",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173844",
        "description": "limit_mg..history.demo04_20230616173844",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173844",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173844",
        "description": "limit_mg..history.demo04_20230616173844",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173844",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173844",
        "description": "limit_mg..history.demo04_20230616173844",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173844",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173844",
        "description": "limit_mg..history.demo04_20230616173844",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173844",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173845",
        "description": "limit_mg..history.demo04_20230616173845",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo04_20230616173845",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173845",
        "description": "limit_mg..history.demo04_20230616173845",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173845",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173845",
        "description": "limit_mg..history.demo04_20230616173845",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173845",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173845",
        "description": "limit_mg..history.demo04_20230616173845",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173845",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173845",
        "description": "limit_mg..history.demo04_20230616173845",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173845",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173845",
        "description": "limit_mg..history.demo04_20230616173845",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173845",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173845",
        "description": "limit_mg..history.demo04_20230616173845",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173845",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173845",
        "description": "limit_mg..history.demo04_20230616173845",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173845",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173849",
        "description": "limit_mg..history.demo04_20230616173849",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo04_20230616173849",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173849",
        "description": "limit_mg..history.demo04_20230616173849",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173849",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173849",
        "description": "limit_mg..history.demo04_20230616173849",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173849",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173849",
        "description": "limit_mg..history.demo04_20230616173849",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173849",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173849",
        "description": "limit_mg..history.demo04_20230616173849",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173849",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173849",
        "description": "limit_mg..history.demo04_20230616173849",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173849",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173849",
        "description": "limit_mg..history.demo04_20230616173849",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173849",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173849",
        "description": "limit_mg..history.demo04_20230616173849",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173849",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173850",
        "description": "limit_mg..history.demo04_20230616173850",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo04_20230616173850",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173850",
        "description": "limit_mg..history.demo04_20230616173850",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173850",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173850",
        "description": "limit_mg..history.demo04_20230616173850",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173850",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173850",
        "description": "limit_mg..history.demo04_20230616173850",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173850",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173850",
        "description": "limit_mg..history.demo04_20230616173850",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173850",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173850",
        "description": "limit_mg..history.demo04_20230616173850",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173850",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173850",
        "description": "limit_mg..history.demo04_20230616173850",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173850",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173850",
        "description": "limit_mg..history.demo04_20230616173850",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173850",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173855",
        "description": "limit_mg..history.demo04_20230616173855",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo04_20230616173855",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173855",
        "description": "limit_mg..history.demo04_20230616173855",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173855",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173855",
        "description": "limit_mg..history.demo04_20230616173855",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173855",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173855",
        "description": "limit_mg..history.demo04_20230616173855",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173855",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173855",
        "description": "limit_mg..history.demo04_20230616173855",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173855",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173855",
        "description": "limit_mg..history.demo04_20230616173855",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173855",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173855",
        "description": "limit_mg..history.demo04_20230616173855",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173855",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173855",
        "description": "limit_mg..history.demo04_20230616173855",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173855",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173857",
        "description": "limit_mg..history.demo04_20230616173857",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo04_20230616173857",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173857",
        "description": "limit_mg..history.demo04_20230616173857",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173857",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173857",
        "description": "limit_mg..history.demo04_20230616173857",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173857",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173857",
        "description": "limit_mg..history.demo04_20230616173857",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173857",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173857",
        "description": "limit_mg..history.demo04_20230616173857",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173857",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173857",
        "description": "limit_mg..history.demo04_20230616173857",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173857",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173857",
        "description": "limit_mg..history.demo04_20230616173857",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173857",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173857",
        "description": "limit_mg..history.demo04_20230616173857",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173857",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173858",
        "description": "limit_mg..history.demo04_20230616173858",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo04_20230616173858",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173858",
        "description": "limit_mg..history.demo04_20230616173858",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173858",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173858",
        "description": "limit_mg..history.demo04_20230616173858",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173858",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173858",
        "description": "limit_mg..history.demo04_20230616173858",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173858",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173858",
        "description": "limit_mg..history.demo04_20230616173858",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173858",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173858",
        "description": "limit_mg..history.demo04_20230616173858",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173858",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173858",
        "description": "limit_mg..history.demo04_20230616173858",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173858",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173858",
        "description": "limit_mg..history.demo04_20230616173858",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173858",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173859",
        "description": "limit_mg..history.demo04_20230616173859",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo04_20230616173859",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173859",
        "description": "limit_mg..history.demo04_20230616173859",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173859",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173859",
        "description": "limit_mg..history.demo04_20230616173859",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173859",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173859",
        "description": "limit_mg..history.demo04_20230616173859",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173859",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173859",
        "description": "limit_mg..history.demo04_20230616173859",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173859",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173859",
        "description": "limit_mg..history.demo04_20230616173859",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173859",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173859",
        "description": "limit_mg..history.demo04_20230616173859",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173859",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173859",
        "description": "limit_mg..history.demo04_20230616173859",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173859",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173912",
        "description": "limit_mg..history.demo04_20230616173912",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo04_20230616173912",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173912",
        "description": "limit_mg..history.demo04_20230616173912",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173912",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173912",
        "description": "limit_mg..history.demo04_20230616173912",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173912",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173912",
        "description": "limit_mg..history.demo04_20230616173912",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173912",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173912",
        "description": "limit_mg..history.demo04_20230616173912",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173912",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173912",
        "description": "limit_mg..history.demo04_20230616173912",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173912",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173912",
        "description": "limit_mg..history.demo04_20230616173912",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173912",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173912",
        "description": "limit_mg..history.demo04_20230616173912",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173912",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616173939",
        "description": "limit_mg..history.demo04_20230616173939",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_yaxis()",
        "detail": "limit_mg..history.demo04_20230616173939",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173939",
        "description": "limit_mg..history.demo04_20230616173939",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616173939",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173939",
        "description": "limit_mg..history.demo04_20230616173939",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616173939",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173939",
        "description": "limit_mg..history.demo04_20230616173939",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616173939",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173939",
        "description": "limit_mg..history.demo04_20230616173939",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616173939",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173939",
        "description": "limit_mg..history.demo04_20230616173939",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616173939",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173939",
        "description": "limit_mg..history.demo04_20230616173939",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173939",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616173939",
        "description": "limit_mg..history.demo04_20230616173939",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616173939",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616174145",
        "description": "limit_mg..history.demo04_20230616174145",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616174145",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174145",
        "description": "limit_mg..history.demo04_20230616174145",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616174145",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174145",
        "description": "limit_mg..history.demo04_20230616174145",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616174145",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174145",
        "description": "limit_mg..history.demo04_20230616174145",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616174145",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174145",
        "description": "limit_mg..history.demo04_20230616174145",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616174145",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174145",
        "description": "limit_mg..history.demo04_20230616174145",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616174145",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174145",
        "description": "limit_mg..history.demo04_20230616174145",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616174145",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174145",
        "description": "limit_mg..history.demo04_20230616174145",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616174145",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616174308",
        "description": "limit_mg..history.demo04_20230616174308",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616174308",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174308",
        "description": "limit_mg..history.demo04_20230616174308",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616174308",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174308",
        "description": "limit_mg..history.demo04_20230616174308",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616174308",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174308",
        "description": "limit_mg..history.demo04_20230616174308",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616174308",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174308",
        "description": "limit_mg..history.demo04_20230616174308",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616174308",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174308",
        "description": "limit_mg..history.demo04_20230616174308",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616174308",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174308",
        "description": "limit_mg..history.demo04_20230616174308",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616174308",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174308",
        "description": "limit_mg..history.demo04_20230616174308",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616174308",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616174309",
        "description": "limit_mg..history.demo04_20230616174309",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_yaxis()",
        "detail": "limit_mg..history.demo04_20230616174309",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174309",
        "description": "limit_mg..history.demo04_20230616174309",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616174309",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174309",
        "description": "limit_mg..history.demo04_20230616174309",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616174309",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174309",
        "description": "limit_mg..history.demo04_20230616174309",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616174309",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174309",
        "description": "limit_mg..history.demo04_20230616174309",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616174309",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174309",
        "description": "limit_mg..history.demo04_20230616174309",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616174309",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174309",
        "description": "limit_mg..history.demo04_20230616174309",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616174309",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174309",
        "description": "limit_mg..history.demo04_20230616174309",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616174309",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616174310",
        "description": "limit_mg..history.demo04_20230616174310",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.demo04_20230616174310",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174310",
        "description": "limit_mg..history.demo04_20230616174310",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616174310",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174310",
        "description": "limit_mg..history.demo04_20230616174310",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616174310",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174310",
        "description": "limit_mg..history.demo04_20230616174310",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616174310",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174310",
        "description": "limit_mg..history.demo04_20230616174310",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616174310",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174310",
        "description": "limit_mg..history.demo04_20230616174310",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616174310",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174310",
        "description": "limit_mg..history.demo04_20230616174310",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616174310",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174310",
        "description": "limit_mg..history.demo04_20230616174310",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616174310",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616174323",
        "description": "limit_mg..history.demo04_20230616174323",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616174323",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174323",
        "description": "limit_mg..history.demo04_20230616174323",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616174323",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174323",
        "description": "limit_mg..history.demo04_20230616174323",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616174323",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174323",
        "description": "limit_mg..history.demo04_20230616174323",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616174323",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174323",
        "description": "limit_mg..history.demo04_20230616174323",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616174323",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174323",
        "description": "limit_mg..history.demo04_20230616174323",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616174323",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174323",
        "description": "limit_mg..history.demo04_20230616174323",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616174323",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616174323",
        "description": "limit_mg..history.demo04_20230616174323",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616174323",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175238",
        "description": "limit_mg..history.demo04_20230616175238",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175238",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175238",
        "description": "limit_mg..history.demo04_20230616175238",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175238",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175238",
        "description": "limit_mg..history.demo04_20230616175238",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175238",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175238",
        "description": "limit_mg..history.demo04_20230616175238",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175238",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175238",
        "description": "limit_mg..history.demo04_20230616175238",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175238",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175238",
        "description": "limit_mg..history.demo04_20230616175238",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175238",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175238",
        "description": "limit_mg..history.demo04_20230616175238",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175238",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175238",
        "description": "limit_mg..history.demo04_20230616175238",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175238",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175238",
        "description": "limit_mg..history.demo04_20230616175238",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175238",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175253",
        "description": "limit_mg..history.demo04_20230616175253",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(def magsnr(snr,a0,a1,a2,a3):\n, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175253",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175253",
        "description": "limit_mg..history.demo04_20230616175253",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(def magsnr(snr,a0,a1,a2,a3):\n, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616175253",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175253",
        "description": "limit_mg..history.demo04_20230616175253",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175253",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175253",
        "description": "limit_mg..history.demo04_20230616175253",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175253",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175253",
        "description": "limit_mg..history.demo04_20230616175253",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(def magsnr(snr,a0,a1,a2,a3):",
        "detail": "limit_mg..history.demo04_20230616175253",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175253",
        "description": "limit_mg..history.demo04_20230616175253",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(def magsnr(snr,a0,a1,a2,a3):\n, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175253",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175253",
        "description": "limit_mg..history.demo04_20230616175253",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(def magsnr(snr,a0,a1,a2,a3):\n, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175253",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175253",
        "description": "limit_mg..history.demo04_20230616175253",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175253",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175253",
        "description": "limit_mg..history.demo04_20230616175253",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175253",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175258",
        "description": "limit_mg..history.demo04_20230616175258",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175258",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175258",
        "description": "limit_mg..history.demo04_20230616175258",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175258",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175258",
        "description": "limit_mg..history.demo04_20230616175258",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175258",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175258",
        "description": "limit_mg..history.demo04_20230616175258",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175258",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175258",
        "description": "limit_mg..history.demo04_20230616175258",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175258",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175258",
        "description": "limit_mg..history.demo04_20230616175258",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175258",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175258",
        "description": "limit_mg..history.demo04_20230616175258",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175258",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175258",
        "description": "limit_mg..history.demo04_20230616175258",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175258",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175258",
        "description": "limit_mg..history.demo04_20230616175258",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175258",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175309",
        "description": "limit_mg..history.demo04_20230616175309",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175309",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175309",
        "description": "limit_mg..history.demo04_20230616175309",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175309",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175309",
        "description": "limit_mg..history.demo04_20230616175309",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175309",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175309",
        "description": "limit_mg..history.demo04_20230616175309",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175309",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175309",
        "description": "limit_mg..history.demo04_20230616175309",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175309",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175309",
        "description": "limit_mg..history.demo04_20230616175309",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175309",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175309",
        "description": "limit_mg..history.demo04_20230616175309",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175309",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175309",
        "description": "limit_mg..history.demo04_20230616175309",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175309",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175309",
        "description": "limit_mg..history.demo04_20230616175309",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175309",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175331",
        "description": "limit_mg..history.demo04_20230616175331",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175331",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175331",
        "description": "limit_mg..history.demo04_20230616175331",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175331",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175331",
        "description": "limit_mg..history.demo04_20230616175331",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175331",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175331",
        "description": "limit_mg..history.demo04_20230616175331",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175331",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175331",
        "description": "limit_mg..history.demo04_20230616175331",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175331",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175331",
        "description": "limit_mg..history.demo04_20230616175331",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175331",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175331",
        "description": "limit_mg..history.demo04_20230616175331",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175331",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175331",
        "description": "limit_mg..history.demo04_20230616175331",
        "peekOfCode": "x = snr_sigclipnp.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175331",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175331",
        "description": "limit_mg..history.demo04_20230616175331",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175331",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175333",
        "description": "limit_mg..history.demo04_20230616175333",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175333",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175333",
        "description": "limit_mg..history.demo04_20230616175333",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175333",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175333",
        "description": "limit_mg..history.demo04_20230616175333",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175333",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175333",
        "description": "limit_mg..history.demo04_20230616175333",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175333",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175333",
        "description": "limit_mg..history.demo04_20230616175333",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175333",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175333",
        "description": "limit_mg..history.demo04_20230616175333",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175333",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175333",
        "description": "limit_mg..history.demo04_20230616175333",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175333",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175333",
        "description": "limit_mg..history.demo04_20230616175333",
        "peekOfCode": "x = snr_sigclip #np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175333",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175333",
        "description": "limit_mg..history.demo04_20230616175333",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175333",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175335",
        "description": "limit_mg..history.demo04_20230616175335",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175335",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175335",
        "description": "limit_mg..history.demo04_20230616175335",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175335",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175335",
        "description": "limit_mg..history.demo04_20230616175335",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175335",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175335",
        "description": "limit_mg..history.demo04_20230616175335",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175335",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175335",
        "description": "limit_mg..history.demo04_20230616175335",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175335",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175335",
        "description": "limit_mg..history.demo04_20230616175335",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175335",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175335",
        "description": "limit_mg..history.demo04_20230616175335",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175335",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175335",
        "description": "limit_mg..history.demo04_20230616175335",
        "peekOfCode": "x = snr_sigclip #np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175335",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175335",
        "description": "limit_mg..history.demo04_20230616175335",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175335",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175353",
        "description": "limit_mg..history.demo04_20230616175353",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175353",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175353",
        "description": "limit_mg..history.demo04_20230616175353",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175353",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175353",
        "description": "limit_mg..history.demo04_20230616175353",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175353",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175353",
        "description": "limit_mg..history.demo04_20230616175353",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175353",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175353",
        "description": "limit_mg..history.demo04_20230616175353",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175353",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175353",
        "description": "limit_mg..history.demo04_20230616175353",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175353",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175353",
        "description": "limit_mg..history.demo04_20230616175353",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175353",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175353",
        "description": "limit_mg..history.demo04_20230616175353",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175353",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175353",
        "description": "limit_mg..history.demo04_20230616175353",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175353",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175357",
        "description": "limit_mg..history.demo04_20230616175357",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175357",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175357",
        "description": "limit_mg..history.demo04_20230616175357",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175357",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175357",
        "description": "limit_mg..history.demo04_20230616175357",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175357",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175357",
        "description": "limit_mg..history.demo04_20230616175357",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175357",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175357",
        "description": "limit_mg..history.demo04_20230616175357",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175357",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175357",
        "description": "limit_mg..history.demo04_20230616175357",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175357",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175357",
        "description": "limit_mg..history.demo04_20230616175357",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175357",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175357",
        "description": "limit_mg..history.demo04_20230616175357",
        "peekOfCode": "x = np.linspace(np.min(snr_sigclip), np.max(snr_sigclip), len(snr_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175357",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175357",
        "description": "limit_mg..history.demo04_20230616175357",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175357",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175414",
        "description": "limit_mg..history.demo04_20230616175414",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175414",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175414",
        "description": "limit_mg..history.demo04_20230616175414",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175414",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175414",
        "description": "limit_mg..history.demo04_20230616175414",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175414",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175414",
        "description": "limit_mg..history.demo04_20230616175414",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175414",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175414",
        "description": "limit_mg..history.demo04_20230616175414",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175414",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175414",
        "description": "limit_mg..history.demo04_20230616175414",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175414",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175414",
        "description": "limit_mg..history.demo04_20230616175414",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175414",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175414",
        "description": "limit_mg..history.demo04_20230616175414",
        "peekOfCode": "x = snr_sigclip\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175414",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175414",
        "description": "limit_mg..history.demo04_20230616175414",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175414",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175434",
        "description": "limit_mg..history.demo04_20230616175434",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175434",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175434",
        "description": "limit_mg..history.demo04_20230616175434",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175434",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175434",
        "description": "limit_mg..history.demo04_20230616175434",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175434",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175434",
        "description": "limit_mg..history.demo04_20230616175434",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175434",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175434",
        "description": "limit_mg..history.demo04_20230616175434",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175434",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175434",
        "description": "limit_mg..history.demo04_20230616175434",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175434",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175434",
        "description": "limit_mg..history.demo04_20230616175434",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175434",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175434",
        "description": "limit_mg..history.demo04_20230616175434",
        "peekOfCode": "x = np.osr\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175434",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175434",
        "description": "limit_mg..history.demo04_20230616175434",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175434",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175437",
        "description": "limit_mg..history.demo04_20230616175437",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175437",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175437",
        "description": "limit_mg..history.demo04_20230616175437",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175437",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175437",
        "description": "limit_mg..history.demo04_20230616175437",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175437",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175437",
        "description": "limit_mg..history.demo04_20230616175437",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175437",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175437",
        "description": "limit_mg..history.demo04_20230616175437",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175437",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175437",
        "description": "limit_mg..history.demo04_20230616175437",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175437",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175437",
        "description": "limit_mg..history.demo04_20230616175437",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175437",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175437",
        "description": "limit_mg..history.demo04_20230616175437",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175437",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175437",
        "description": "limit_mg..history.demo04_20230616175437",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175437",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175527",
        "description": "limit_mg..history.demo04_20230616175527",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175527",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175527",
        "description": "limit_mg..history.demo04_20230616175527",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175527",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175527",
        "description": "limit_mg..history.demo04_20230616175527",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175527",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175527",
        "description": "limit_mg..history.demo04_20230616175527",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175527",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175527",
        "description": "limit_mg..history.demo04_20230616175527",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175527",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175527",
        "description": "limit_mg..history.demo04_20230616175527",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175527",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175527",
        "description": "limit_mg..history.demo04_20230616175527",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175527",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175527",
        "description": "limit_mg..history.demo04_20230616175527",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175527",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175530",
        "description": "limit_mg..history.demo04_20230616175530",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175530",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175530",
        "description": "limit_mg..history.demo04_20230616175530",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175530",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175530",
        "description": "limit_mg..history.demo04_20230616175530",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175530",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175530",
        "description": "limit_mg..history.demo04_20230616175530",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175530",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175530",
        "description": "limit_mg..history.demo04_20230616175530",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175530",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175530",
        "description": "limit_mg..history.demo04_20230616175530",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175530",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175530",
        "description": "limit_mg..history.demo04_20230616175530",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175530",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175530",
        "description": "limit_mg..history.demo04_20230616175530",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175530",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175531",
        "description": "limit_mg..history.demo04_20230616175531",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175531",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175531",
        "description": "limit_mg..history.demo04_20230616175531",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175531",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175531",
        "description": "limit_mg..history.demo04_20230616175531",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175531",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175531",
        "description": "limit_mg..history.demo04_20230616175531",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175531",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175531",
        "description": "limit_mg..history.demo04_20230616175531",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175531",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175531",
        "description": "limit_mg..history.demo04_20230616175531",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175531",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175531",
        "description": "limit_mg..history.demo04_20230616175531",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175531",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175531",
        "description": "limit_mg..history.demo04_20230616175531",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175531",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175532",
        "description": "limit_mg..history.demo04_20230616175532",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175532",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175532",
        "description": "limit_mg..history.demo04_20230616175532",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175532",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175532",
        "description": "limit_mg..history.demo04_20230616175532",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175532",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175532",
        "description": "limit_mg..history.demo04_20230616175532",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175532",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175532",
        "description": "limit_mg..history.demo04_20230616175532",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175532",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175532",
        "description": "limit_mg..history.demo04_20230616175532",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175532",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175532",
        "description": "limit_mg..history.demo04_20230616175532",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175532",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175532",
        "description": "limit_mg..history.demo04_20230616175532",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175532",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175626",
        "description": "limit_mg..history.demo04_20230616175626",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175626",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175626",
        "description": "limit_mg..history.demo04_20230616175626",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[]['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175626",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175626",
        "description": "limit_mg..history.demo04_20230616175626",
        "peekOfCode": "snr = stars_table[]['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175626",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175626",
        "description": "limit_mg..history.demo04_20230616175626",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175626",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175626",
        "description": "limit_mg..history.demo04_20230616175626",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175626",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175626",
        "description": "limit_mg..history.demo04_20230616175626",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175626",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175626",
        "description": "limit_mg..history.demo04_20230616175626",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175626",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175626",
        "description": "limit_mg..history.demo04_20230616175626",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175626",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175633",
        "description": "limit_mg..history.demo04_20230616175633",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175633",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175633",
        "description": "limit_mg..history.demo04_20230616175633",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[flags==0]['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175633",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175633",
        "description": "limit_mg..history.demo04_20230616175633",
        "peekOfCode": "snr = stars_table[flags==0]['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175633",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175633",
        "description": "limit_mg..history.demo04_20230616175633",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175633",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175633",
        "description": "limit_mg..history.demo04_20230616175633",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175633",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175633",
        "description": "limit_mg..history.demo04_20230616175633",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175633",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175633",
        "description": "limit_mg..history.demo04_20230616175633",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175633",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175633",
        "description": "limit_mg..history.demo04_20230616175633",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175633",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175636",
        "description": "limit_mg..history.demo04_20230616175636",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175636",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175636",
        "description": "limit_mg..history.demo04_20230616175636",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[flags==0]['SNR_WIN']\nmag = stars_table[flags==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175636",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175636",
        "description": "limit_mg..history.demo04_20230616175636",
        "peekOfCode": "snr = stars_table[flags==0]['SNR_WIN']\nmag = stars_table[flags==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175636",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175636",
        "description": "limit_mg..history.demo04_20230616175636",
        "peekOfCode": "mag = stars_table[flags==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175636",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175636",
        "description": "limit_mg..history.demo04_20230616175636",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175636",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175636",
        "description": "limit_mg..history.demo04_20230616175636",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175636",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175636",
        "description": "limit_mg..history.demo04_20230616175636",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175636",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175636",
        "description": "limit_mg..history.demo04_20230616175636",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175636",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175642",
        "description": "limit_mg..history.demo04_20230616175642",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175642",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175642",
        "description": "limit_mg..history.demo04_20230616175642",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"flags\"==0]['SNR_WIN']\nmag = stars_table[flags==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175642",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175642",
        "description": "limit_mg..history.demo04_20230616175642",
        "peekOfCode": "snr = stars_table[\"flags\"==0]['SNR_WIN']\nmag = stars_table[flags==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175642",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175642",
        "description": "limit_mg..history.demo04_20230616175642",
        "peekOfCode": "mag = stars_table[flags==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175642",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175642",
        "description": "limit_mg..history.demo04_20230616175642",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175642",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175642",
        "description": "limit_mg..history.demo04_20230616175642",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175642",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175642",
        "description": "limit_mg..history.demo04_20230616175642",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175642",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175642",
        "description": "limit_mg..history.demo04_20230616175642",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175642",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175643",
        "description": "limit_mg..history.demo04_20230616175643",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175643",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175643",
        "description": "limit_mg..history.demo04_20230616175643",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"flags\"==0]['SNR_WIN']\nmag = stars_table[\"flags\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175643",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175643",
        "description": "limit_mg..history.demo04_20230616175643",
        "peekOfCode": "snr = stars_table[\"flags\"==0]['SNR_WIN']\nmag = stars_table[\"flags\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175643",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175643",
        "description": "limit_mg..history.demo04_20230616175643",
        "peekOfCode": "mag = stars_table[\"flags\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175643",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175643",
        "description": "limit_mg..history.demo04_20230616175643",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175643",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175643",
        "description": "limit_mg..history.demo04_20230616175643",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175643",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175643",
        "description": "limit_mg..history.demo04_20230616175643",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175643",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175643",
        "description": "limit_mg..history.demo04_20230616175643",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175643",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175748",
        "description": "limit_mg..history.demo04_20230616175748",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175748",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175748",
        "description": "limit_mg..history.demo04_20230616175748",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS=\"==0]['SNR_WIN']\nmag = stars_table[\"flags\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175748",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175748",
        "description": "limit_mg..history.demo04_20230616175748",
        "peekOfCode": "snr = stars_table[\"FLAGS=\"==0]['SNR_WIN']\nmag = stars_table[\"flags\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175748",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175748",
        "description": "limit_mg..history.demo04_20230616175748",
        "peekOfCode": "mag = stars_table[\"flags\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175748",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175748",
        "description": "limit_mg..history.demo04_20230616175748",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175748",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175748",
        "description": "limit_mg..history.demo04_20230616175748",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175748",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175748",
        "description": "limit_mg..history.demo04_20230616175748",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175748",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175748",
        "description": "limit_mg..history.demo04_20230616175748",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175748",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175749",
        "description": "limit_mg..history.demo04_20230616175749",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175749",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175749",
        "description": "limit_mg..history.demo04_20230616175749",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"==0]['SNR_WIN']\nmag = stars_table[\"flags\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175749",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175749",
        "description": "limit_mg..history.demo04_20230616175749",
        "peekOfCode": "snr = stars_table[\"FLAGS\"==0]['SNR_WIN']\nmag = stars_table[\"flags\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175749",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175749",
        "description": "limit_mg..history.demo04_20230616175749",
        "peekOfCode": "mag = stars_table[\"flags\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175749",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175749",
        "description": "limit_mg..history.demo04_20230616175749",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175749",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175749",
        "description": "limit_mg..history.demo04_20230616175749",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175749",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175749",
        "description": "limit_mg..history.demo04_20230616175749",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175749",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175749",
        "description": "limit_mg..history.demo04_20230616175749",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175749",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175750",
        "description": "limit_mg..history.demo04_20230616175750",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175750",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175750",
        "description": "limit_mg..history.demo04_20230616175750",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"==0]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175750",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175750",
        "description": "limit_mg..history.demo04_20230616175750",
        "peekOfCode": "snr = stars_table[\"FLAGS\"==0]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175750",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175750",
        "description": "limit_mg..history.demo04_20230616175750",
        "peekOfCode": "mag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175750",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175750",
        "description": "limit_mg..history.demo04_20230616175750",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175750",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175750",
        "description": "limit_mg..history.demo04_20230616175750",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175750",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175750",
        "description": "limit_mg..history.demo04_20230616175750",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175750",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175750",
        "description": "limit_mg..history.demo04_20230616175750",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175750",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175811",
        "description": "limit_mg..history.demo04_20230616175811",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175811",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175811",
        "description": "limit_mg..history.demo04_20230616175811",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175811",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175811",
        "description": "limit_mg..history.demo04_20230616175811",
        "peekOfCode": "snr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175811",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175811",
        "description": "limit_mg..history.demo04_20230616175811",
        "peekOfCode": "mag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175811",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175811",
        "description": "limit_mg..history.demo04_20230616175811",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175811",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175811",
        "description": "limit_mg..history.demo04_20230616175811",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175811",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175811",
        "description": "limit_mg..history.demo04_20230616175811",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175811",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175811",
        "description": "limit_mg..history.demo04_20230616175811",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175811",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616175812",
        "description": "limit_mg..history.demo04_20230616175812",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616175812",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175812",
        "description": "limit_mg..history.demo04_20230616175812",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616175812",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175812",
        "description": "limit_mg..history.demo04_20230616175812",
        "peekOfCode": "snr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616175812",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175812",
        "description": "limit_mg..history.demo04_20230616175812",
        "peekOfCode": "mag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616175812",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175812",
        "description": "limit_mg..history.demo04_20230616175812",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616175812",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175812",
        "description": "limit_mg..history.demo04_20230616175812",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616175812",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175812",
        "description": "limit_mg..history.demo04_20230616175812",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175812",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616175812",
        "description": "limit_mg..history.demo04_20230616175812",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616175812",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616180154",
        "description": "limit_mg..history.demo04_20230616180154",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616180154",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180154",
        "description": "limit_mg..history.demo04_20230616180154",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616180154",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180154",
        "description": "limit_mg..history.demo04_20230616180154",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616180154",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180154",
        "description": "limit_mg..history.demo04_20230616180154",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616180154",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180154",
        "description": "limit_mg..history.demo04_20230616180154",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616180154",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180154",
        "description": "limit_mg..history.demo04_20230616180154",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616180154",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180154",
        "description": "limit_mg..history.demo04_20230616180154",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616180154",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180154",
        "description": "limit_mg..history.demo04_20230616180154",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616180154",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616180813",
        "description": "limit_mg..history.demo04_20230616180813",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616180813",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180813",
        "description": "limit_mg..history.demo04_20230616180813",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616180813",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180813",
        "description": "limit_mg..history.demo04_20230616180813",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616180813",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180813",
        "description": "limit_mg..history.demo04_20230616180813",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616180813",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180813",
        "description": "limit_mg..history.demo04_20230616180813",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616180813",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180813",
        "description": "limit_mg..history.demo04_20230616180813",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n        return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616180813",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180813",
        "description": "limit_mg..history.demo04_20230616180813",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616180813",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180813",
        "description": "limit_mg..history.demo04_20230616180813",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616180813",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616180831",
        "description": "limit_mg..history.demo04_20230616180831",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616180831",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180831",
        "description": "limit_mg..history.demo04_20230616180831",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616180831",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180831",
        "description": "limit_mg..history.demo04_20230616180831",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616180831",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180831",
        "description": "limit_mg..history.demo04_20230616180831",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616180831",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180831",
        "description": "limit_mg..history.demo04_20230616180831",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616180831",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180831",
        "description": "limit_mg..history.demo04_20230616180831",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616180831",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180831",
        "description": "limit_mg..history.demo04_20230616180831",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616180831",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180831",
        "description": "limit_mg..history.demo04_20230616180831",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616180831",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616180850",
        "description": "limit_mg..history.demo04_20230616180850",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616180850",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180850",
        "description": "limit_mg..history.demo04_20230616180850",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616180850",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180850",
        "description": "limit_mg..history.demo04_20230616180850",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616180850",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180850",
        "description": "limit_mg..history.demo04_20230616180850",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616180850",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180850",
        "description": "limit_mg..history.demo04_20230616180850",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616180850",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180850",
        "description": "limit_mg..history.demo04_20230616180850",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616180850",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180850",
        "description": "limit_mg..history.demo04_20230616180850",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616180850",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180850",
        "description": "limit_mg..history.demo04_20230616180850",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616180850",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616180851",
        "description": "limit_mg..history.demo04_20230616180851",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616180851",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180851",
        "description": "limit_mg..history.demo04_20230616180851",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616180851",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180851",
        "description": "limit_mg..history.demo04_20230616180851",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616180851",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180851",
        "description": "limit_mg..history.demo04_20230616180851",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616180851",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180851",
        "description": "limit_mg..history.demo04_20230616180851",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616180851",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180851",
        "description": "limit_mg..history.demo04_20230616180851",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616180851",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180851",
        "description": "limit_mg..history.demo04_20230616180851",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616180851",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180851",
        "description": "limit_mg..history.demo04_20230616180851",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616180851",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616180852",
        "description": "limit_mg..history.demo04_20230616180852",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616180852",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180852",
        "description": "limit_mg..history.demo04_20230616180852",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616180852",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180852",
        "description": "limit_mg..history.demo04_20230616180852",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616180852",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180852",
        "description": "limit_mg..history.demo04_20230616180852",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616180852",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180852",
        "description": "limit_mg..history.demo04_20230616180852",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616180852",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180852",
        "description": "limit_mg..history.demo04_20230616180852",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616180852",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180852",
        "description": "limit_mg..history.demo04_20230616180852",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616180852",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616180852",
        "description": "limit_mg..history.demo04_20230616180852",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616180852",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181258",
        "description": "limit_mg..history.demo04_20230616181258",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181258",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181258",
        "description": "limit_mg..history.demo04_20230616181258",
        "peekOfCode": "stars_table = Table.read('my_sc_tngc3627_g_20230606153712_029_sciimg.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181258",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181258",
        "description": "limit_mg..history.demo04_20230616181258",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181258",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181258",
        "description": "limit_mg..history.demo04_20230616181258",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181258",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181258",
        "description": "limit_mg..history.demo04_20230616181258",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181258",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181258",
        "description": "limit_mg..history.demo04_20230616181258",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181258",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181258",
        "description": "limit_mg..history.demo04_20230616181258",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181258",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181258",
        "description": "limit_mg..history.demo04_20230616181258",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181258",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181305",
        "description": "limit_mg..history.demo04_20230616181305",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181305",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181305",
        "description": "limit_mg..history.demo04_20230616181305",
        "peekOfCode": "stars_table = Table.read('my_sc_tngc3627_g_20230606153712_029_sciimg.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181305",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181305",
        "description": "limit_mg..history.demo04_20230616181305",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181305",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181305",
        "description": "limit_mg..history.demo04_20230616181305",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181305",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181305",
        "description": "limit_mg..history.demo04_20230616181305",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181305",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181305",
        "description": "limit_mg..history.demo04_20230616181305",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181305",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181305",
        "description": "limit_mg..history.demo04_20230616181305",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181305",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181305",
        "description": "limit_mg..history.demo04_20230616181305",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181305",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181306",
        "description": "limit_mg..history.demo04_20230616181306",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181306",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181306",
        "description": "limit_mg..history.demo04_20230616181306",
        "peekOfCode": "stars_table = Table.read('my_sc_tngc3627_g_20230606153712_029_sciimg.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181306",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181306",
        "description": "limit_mg..history.demo04_20230616181306",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181306",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181306",
        "description": "limit_mg..history.demo04_20230616181306",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181306",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181306",
        "description": "limit_mg..history.demo04_20230616181306",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181306",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181306",
        "description": "limit_mg..history.demo04_20230616181306",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181306",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181306",
        "description": "limit_mg..history.demo04_20230616181306",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181306",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181306",
        "description": "limit_mg..history.demo04_20230616181306",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181306",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181307",
        "description": "limit_mg..history.demo04_20230616181307",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181307",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181307",
        "description": "limit_mg..history.demo04_20230616181307",
        "peekOfCode": "stars_table = Table.read('my_sc_tngc3627_g_20230606153712_029_sciimg.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181307",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181307",
        "description": "limit_mg..history.demo04_20230616181307",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181307",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181307",
        "description": "limit_mg..history.demo04_20230616181307",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181307",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181307",
        "description": "limit_mg..history.demo04_20230616181307",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181307",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181307",
        "description": "limit_mg..history.demo04_20230616181307",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181307",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181307",
        "description": "limit_mg..history.demo04_20230616181307",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181307",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181307",
        "description": "limit_mg..history.demo04_20230616181307",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181307",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181344",
        "description": "limit_mg..history.demo04_20230616181344",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181344",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181344",
        "description": "limit_mg..history.demo04_20230616181344",
        "peekOfCode": "stars_table = Table.read('D:\\softwear\\my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181344",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181344",
        "description": "limit_mg..history.demo04_20230616181344",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181344",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181344",
        "description": "limit_mg..history.demo04_20230616181344",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181344",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181344",
        "description": "limit_mg..history.demo04_20230616181344",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181344",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181344",
        "description": "limit_mg..history.demo04_20230616181344",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181344",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181344",
        "description": "limit_mg..history.demo04_20230616181344",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181344",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181344",
        "description": "limit_mg..history.demo04_20230616181344",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181344",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181347",
        "description": "limit_mg..history.demo04_20230616181347",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181347",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181347",
        "description": "limit_mg..history.demo04_20230616181347",
        "peekOfCode": "stars_table = Table.read('D:/softwear\\my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181347",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181347",
        "description": "limit_mg..history.demo04_20230616181347",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181347",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181347",
        "description": "limit_mg..history.demo04_20230616181347",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181347",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181347",
        "description": "limit_mg..history.demo04_20230616181347",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181347",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181347",
        "description": "limit_mg..history.demo04_20230616181347",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181347",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181347",
        "description": "limit_mg..history.demo04_20230616181347",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181347",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181347",
        "description": "limit_mg..history.demo04_20230616181347",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181347",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181349",
        "description": "limit_mg..history.demo04_20230616181349",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181349",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181349",
        "description": "limit_mg..history.demo04_20230616181349",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181349",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181349",
        "description": "limit_mg..history.demo04_20230616181349",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181349",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181349",
        "description": "limit_mg..history.demo04_20230616181349",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181349",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181349",
        "description": "limit_mg..history.demo04_20230616181349",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181349",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181349",
        "description": "limit_mg..history.demo04_20230616181349",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181349",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181349",
        "description": "limit_mg..history.demo04_20230616181349",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181349",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181349",
        "description": "limit_mg..history.demo04_20230616181349",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181349",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181358",
        "description": "limit_mg..history.demo04_20230616181358",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181358",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181358",
        "description": "limit_mg..history.demo04_20230616181358",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181358",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181358",
        "description": "limit_mg..history.demo04_20230616181358",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181358",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181358",
        "description": "limit_mg..history.demo04_20230616181358",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181358",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181358",
        "description": "limit_mg..history.demo04_20230616181358",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181358",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181358",
        "description": "limit_mg..history.demo04_20230616181358",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181358",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181358",
        "description": "limit_mg..history.demo04_20230616181358",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181358",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181358",
        "description": "limit_mg..history.demo04_20230616181358",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181358",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181359",
        "description": "limit_mg..history.demo04_20230616181359",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181359",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181359",
        "description": "limit_mg..history.demo04_20230616181359",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181359",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181359",
        "description": "limit_mg..history.demo04_20230616181359",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181359",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181359",
        "description": "limit_mg..history.demo04_20230616181359",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181359",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181359",
        "description": "limit_mg..history.demo04_20230616181359",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181359",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181359",
        "description": "limit_mg..history.demo04_20230616181359",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181359",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181359",
        "description": "limit_mg..history.demo04_20230616181359",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181359",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181359",
        "description": "limit_mg..history.demo04_20230616181359",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181359",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181408",
        "description": "limit_mg..history.demo04_20230616181408",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181408",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181408",
        "description": "limit_mg..history.demo04_20230616181408",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,ma)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181408",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181408",
        "description": "limit_mg..history.demo04_20230616181408",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,ma)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181408",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181408",
        "description": "limit_mg..history.demo04_20230616181408",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,ma)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181408",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181408",
        "description": "limit_mg..history.demo04_20230616181408",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,ma)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181408",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181408",
        "description": "limit_mg..history.demo04_20230616181408",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181408",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181408",
        "description": "limit_mg..history.demo04_20230616181408",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181408",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181408",
        "description": "limit_mg..history.demo04_20230616181408",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181408",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181411",
        "description": "limit_mg..history.demo04_20230616181411",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181411",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181411",
        "description": "limit_mg..history.demo04_20230616181411",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,max)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181411",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181411",
        "description": "limit_mg..history.demo04_20230616181411",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,max)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181411",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181411",
        "description": "limit_mg..history.demo04_20230616181411",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,max)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181411",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181411",
        "description": "limit_mg..history.demo04_20230616181411",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,max)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181411",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181411",
        "description": "limit_mg..history.demo04_20230616181411",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181411",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181411",
        "description": "limit_mg..history.demo04_20230616181411",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181411",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181411",
        "description": "limit_mg..history.demo04_20230616181411",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181411",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181414",
        "description": "limit_mg..history.demo04_20230616181414",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181414",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181414",
        "description": "limit_mg..history.demo04_20230616181414",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181414",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181414",
        "description": "limit_mg..history.demo04_20230616181414",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181414",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181414",
        "description": "limit_mg..history.demo04_20230616181414",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181414",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181414",
        "description": "limit_mg..history.demo04_20230616181414",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181414",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181414",
        "description": "limit_mg..history.demo04_20230616181414",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181414",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181414",
        "description": "limit_mg..history.demo04_20230616181414",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181414",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181414",
        "description": "limit_mg..history.demo04_20230616181414",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181414",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181418",
        "description": "limit_mg..history.demo04_20230616181418",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181418",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181418",
        "description": "limit_mg..history.demo04_20230616181418",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=3)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181418",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181418",
        "description": "limit_mg..history.demo04_20230616181418",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=3)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181418",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181418",
        "description": "limit_mg..history.demo04_20230616181418",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=3)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181418",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181418",
        "description": "limit_mg..history.demo04_20230616181418",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=3)\nmag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181418",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181418",
        "description": "limit_mg..history.demo04_20230616181418",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181418",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181418",
        "description": "limit_mg..history.demo04_20230616181418",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181418",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181418",
        "description": "limit_mg..history.demo04_20230616181418",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181418",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181420",
        "description": "limit_mg..history.demo04_20230616181420",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181420",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181420",
        "description": "limit_mg..history.demo04_20230616181420",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=3)\nmag_sigclip = sigma_clip(mag,maxiters=3)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181420",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181420",
        "description": "limit_mg..history.demo04_20230616181420",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=3)\nmag_sigclip = sigma_clip(mag,maxiters=3)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181420",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181420",
        "description": "limit_mg..history.demo04_20230616181420",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=3)\nmag_sigclip = sigma_clip(mag,maxiters=3)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181420",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181420",
        "description": "limit_mg..history.demo04_20230616181420",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=3)\nmag_sigclip = sigma_clip(mag,maxiters=3)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181420",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181420",
        "description": "limit_mg..history.demo04_20230616181420",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=3)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181420",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181420",
        "description": "limit_mg..history.demo04_20230616181420",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181420",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181420",
        "description": "limit_mg..history.demo04_20230616181420",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181420",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181434",
        "description": "limit_mg..history.demo04_20230616181434",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181434",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181434",
        "description": "limit_mg..history.demo04_20230616181434",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=3)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181434",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181434",
        "description": "limit_mg..history.demo04_20230616181434",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=3)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181434",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181434",
        "description": "limit_mg..history.demo04_20230616181434",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=3)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181434",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181434",
        "description": "limit_mg..history.demo04_20230616181434",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=3)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181434",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181434",
        "description": "limit_mg..history.demo04_20230616181434",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181434",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181434",
        "description": "limit_mg..history.demo04_20230616181434",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181434",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181434",
        "description": "limit_mg..history.demo04_20230616181434",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181434",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181435",
        "description": "limit_mg..history.demo04_20230616181435",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181435",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181435",
        "description": "limit_mg..history.demo04_20230616181435",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181435",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181435",
        "description": "limit_mg..history.demo04_20230616181435",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181435",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181435",
        "description": "limit_mg..history.demo04_20230616181435",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181435",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181435",
        "description": "limit_mg..history.demo04_20230616181435",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181435",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181435",
        "description": "limit_mg..history.demo04_20230616181435",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181435",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181435",
        "description": "limit_mg..history.demo04_20230616181435",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181435",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181435",
        "description": "limit_mg..history.demo04_20230616181435",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181435",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181446",
        "description": "limit_mg..history.demo04_20230616181446",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181446",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181446",
        "description": "limit_mg..history.demo04_20230616181446",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[]['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181446",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181446",
        "description": "limit_mg..history.demo04_20230616181446",
        "peekOfCode": "snr = stars_table[]['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181446",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181446",
        "description": "limit_mg..history.demo04_20230616181446",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181446",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181446",
        "description": "limit_mg..history.demo04_20230616181446",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181446",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181446",
        "description": "limit_mg..history.demo04_20230616181446",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181446",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181446",
        "description": "limit_mg..history.demo04_20230616181446",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181446",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181446",
        "description": "limit_mg..history.demo04_20230616181446",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181446",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181454",
        "description": "limit_mg..history.demo04_20230616181454",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181454",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181454",
        "description": "limit_mg..history.demo04_20230616181454",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"]['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181454",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181454",
        "description": "limit_mg..history.demo04_20230616181454",
        "peekOfCode": "snr = stars_table[\"FLAGS\"]['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181454",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181454",
        "description": "limit_mg..history.demo04_20230616181454",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181454",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181454",
        "description": "limit_mg..history.demo04_20230616181454",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181454",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181454",
        "description": "limit_mg..history.demo04_20230616181454",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181454",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181454",
        "description": "limit_mg..history.demo04_20230616181454",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181454",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181454",
        "description": "limit_mg..history.demo04_20230616181454",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181454",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181456",
        "description": "limit_mg..history.demo04_20230616181456",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181456",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181456",
        "description": "limit_mg..history.demo04_20230616181456",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"==0]['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181456",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181456",
        "description": "limit_mg..history.demo04_20230616181456",
        "peekOfCode": "snr = stars_table[\"FLAGS\"==0]['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181456",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181456",
        "description": "limit_mg..history.demo04_20230616181456",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181456",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181456",
        "description": "limit_mg..history.demo04_20230616181456",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181456",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181456",
        "description": "limit_mg..history.demo04_20230616181456",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181456",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181456",
        "description": "limit_mg..history.demo04_20230616181456",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181456",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181456",
        "description": "limit_mg..history.demo04_20230616181456",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181456",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181503",
        "description": "limit_mg..history.demo04_20230616181503",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181503",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181503",
        "description": "limit_mg..history.demo04_20230616181503",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"==0]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181503",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181503",
        "description": "limit_mg..history.demo04_20230616181503",
        "peekOfCode": "snr = stars_table[\"FLAGS\"==0]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181503",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181503",
        "description": "limit_mg..history.demo04_20230616181503",
        "peekOfCode": "mag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181503",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181503",
        "description": "limit_mg..history.demo04_20230616181503",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181503",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181503",
        "description": "limit_mg..history.demo04_20230616181503",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181503",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181503",
        "description": "limit_mg..history.demo04_20230616181503",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181503",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181503",
        "description": "limit_mg..history.demo04_20230616181503",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181503",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181513",
        "description": "limit_mg..history.demo04_20230616181513",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181513",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181513",
        "description": "limit_mg..history.demo04_20230616181513",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"==]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181513",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181513",
        "description": "limit_mg..history.demo04_20230616181513",
        "peekOfCode": "snr = stars_table[\"FLAGS\"==]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181513",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181513",
        "description": "limit_mg..history.demo04_20230616181513",
        "peekOfCode": "mag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181513",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181513",
        "description": "limit_mg..history.demo04_20230616181513",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181513",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181513",
        "description": "limit_mg..history.demo04_20230616181513",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181513",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181513",
        "description": "limit_mg..history.demo04_20230616181513",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181513",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181513",
        "description": "limit_mg..history.demo04_20230616181513",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181513",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181518",
        "description": "limit_mg..history.demo04_20230616181518",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181518",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181518",
        "description": "limit_mg..history.demo04_20230616181518",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181518",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181518",
        "description": "limit_mg..history.demo04_20230616181518",
        "peekOfCode": "snr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181518",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181518",
        "description": "limit_mg..history.demo04_20230616181518",
        "peekOfCode": "mag = stars_table[\"FLAGS\"==0]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181518",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181518",
        "description": "limit_mg..history.demo04_20230616181518",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181518",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181518",
        "description": "limit_mg..history.demo04_20230616181518",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181518",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181518",
        "description": "limit_mg..history.demo04_20230616181518",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181518",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181518",
        "description": "limit_mg..history.demo04_20230616181518",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181518",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181520",
        "description": "limit_mg..history.demo04_20230616181520",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181520",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181520",
        "description": "limit_mg..history.demo04_20230616181520",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181520",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181520",
        "description": "limit_mg..history.demo04_20230616181520",
        "peekOfCode": "snr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181520",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181520",
        "description": "limit_mg..history.demo04_20230616181520",
        "peekOfCode": "mag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181520",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181520",
        "description": "limit_mg..history.demo04_20230616181520",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181520",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181520",
        "description": "limit_mg..history.demo04_20230616181520",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181520",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181520",
        "description": "limit_mg..history.demo04_20230616181520",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181520",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181520",
        "description": "limit_mg..history.demo04_20230616181520",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181520",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181619",
        "description": "limit_mg..history.demo04_20230616181619",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181619",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181619",
        "description": "limit_mg..history.demo04_20230616181619",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181619",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181619",
        "description": "limit_mg..history.demo04_20230616181619",
        "peekOfCode": "snr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181619",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181619",
        "description": "limit_mg..history.demo04_20230616181619",
        "peekOfCode": "mag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181619",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181619",
        "description": "limit_mg..history.demo04_20230616181619",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181619",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181619",
        "description": "limit_mg..history.demo04_20230616181619",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181619",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181619",
        "description": "limit_mg..history.demo04_20230616181619",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181619",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181619",
        "description": "limit_mg..history.demo04_20230616181619",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181619",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181620",
        "description": "limit_mg..history.demo04_20230616181620",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181620",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181620",
        "description": "limit_mg..history.demo04_20230616181620",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181620",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181620",
        "description": "limit_mg..history.demo04_20230616181620",
        "peekOfCode": "snr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181620",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181620",
        "description": "limit_mg..history.demo04_20230616181620",
        "peekOfCode": "mag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181620",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181620",
        "description": "limit_mg..history.demo04_20230616181620",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181620",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181620",
        "description": "limit_mg..history.demo04_20230616181620",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181620",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181620",
        "description": "limit_mg..history.demo04_20230616181620",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181620",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181620",
        "description": "limit_mg..history.demo04_20230616181620",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181620",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181621",
        "description": "limit_mg..history.demo04_20230616181621",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181621",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181621",
        "description": "limit_mg..history.demo04_20230616181621",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181621",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181621",
        "description": "limit_mg..history.demo04_20230616181621",
        "peekOfCode": "snr = stars_table[\"FLAGS\"==\"0\"]['SNR_WIN']\nmag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181621",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181621",
        "description": "limit_mg..history.demo04_20230616181621",
        "peekOfCode": "mag = stars_table[\"FLAGS\"==\"0\"]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181621",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181621",
        "description": "limit_mg..history.demo04_20230616181621",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181621",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181621",
        "description": "limit_mg..history.demo04_20230616181621",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181621",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181621",
        "description": "limit_mg..history.demo04_20230616181621",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181621",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181621",
        "description": "limit_mg..history.demo04_20230616181621",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181621",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181628",
        "description": "limit_mg..history.demo04_20230616181628",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181628",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181628",
        "description": "limit_mg..history.demo04_20230616181628",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181628",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181628",
        "description": "limit_mg..history.demo04_20230616181628",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181628",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181628",
        "description": "limit_mg..history.demo04_20230616181628",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181628",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181628",
        "description": "limit_mg..history.demo04_20230616181628",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181628",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181628",
        "description": "limit_mg..history.demo04_20230616181628",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181628",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181628",
        "description": "limit_mg..history.demo04_20230616181628",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181628",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181628",
        "description": "limit_mg..history.demo04_20230616181628",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181628",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181629",
        "description": "limit_mg..history.demo04_20230616181629",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181629",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181629",
        "description": "limit_mg..history.demo04_20230616181629",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181629",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181629",
        "description": "limit_mg..history.demo04_20230616181629",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181629",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181629",
        "description": "limit_mg..history.demo04_20230616181629",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181629",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181629",
        "description": "limit_mg..history.demo04_20230616181629",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181629",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181629",
        "description": "limit_mg..history.demo04_20230616181629",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181629",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181629",
        "description": "limit_mg..history.demo04_20230616181629",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181629",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181629",
        "description": "limit_mg..history.demo04_20230616181629",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181629",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181630",
        "description": "limit_mg..history.demo04_20230616181630",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181630",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181630",
        "description": "limit_mg..history.demo04_20230616181630",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):",
        "detail": "limit_mg..history.demo04_20230616181630",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181630",
        "description": "limit_mg..history.demo04_20230616181630",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616181630",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181630",
        "description": "limit_mg..history.demo04_20230616181630",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181630",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181630",
        "description": "limit_mg..history.demo04_20230616181630",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181630",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181630",
        "description": "limit_mg..history.demo04_20230616181630",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# # 定义指数函数\n# def exponential_func(x, a, b, c):\n#     return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181630",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181630",
        "description": "limit_mg..history.demo04_20230616181630",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181630",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181630",
        "description": "limit_mg..history.demo04_20230616181630",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181630",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181758",
        "description": "limit_mg..history.demo04_20230616181758",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181758",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181758",
        "description": "limit_mg..history.demo04_20230616181758",
        "peekOfCode": "stars_table = Table.read('D:/softwear/my_sc_tngc4258_r_20230606150917_022_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181758",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181758",
        "description": "limit_mg..history.demo04_20230616181758",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181758",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181758",
        "description": "limit_mg..history.demo04_20230616181758",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181758",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181758",
        "description": "limit_mg..history.demo04_20230616181758",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616181758",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181758",
        "description": "limit_mg..history.demo04_20230616181758",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616181758",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181758",
        "description": "limit_mg..history.demo04_20230616181758",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181758",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181758",
        "description": "limit_mg..history.demo04_20230616181758",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181758",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181815",
        "description": "limit_mg..history.demo04_20230616181815",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181815",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181815",
        "description": "limit_mg..history.demo04_20230616181815",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181815",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181815",
        "description": "limit_mg..history.demo04_20230616181815",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181815",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181815",
        "description": "limit_mg..history.demo04_20230616181815",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181815",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181815",
        "description": "limit_mg..history.demo04_20230616181815",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616181815",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181815",
        "description": "limit_mg..history.demo04_20230616181815",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616181815",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181815",
        "description": "limit_mg..history.demo04_20230616181815",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181815",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181815",
        "description": "limit_mg..history.demo04_20230616181815",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181815",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616181835",
        "description": "limit_mg..history.demo04_20230616181835",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616181835",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181835",
        "description": "limit_mg..history.demo04_20230616181835",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616181835",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181835",
        "description": "limit_mg..history.demo04_20230616181835",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616181835",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181835",
        "description": "limit_mg..history.demo04_20230616181835",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616181835",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181835",
        "description": "limit_mg..history.demo04_20230616181835",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616181835",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181835",
        "description": "limit_mg..history.demo04_20230616181835",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616181835",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181835",
        "description": "limit_mg..history.demo04_20230616181835",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181835",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616181835",
        "description": "limit_mg..history.demo04_20230616181835",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616181835",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183341",
        "description": "limit_mg..history.demo04_20230616183341",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183341",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183341",
        "description": "limit_mg..history.demo04_20230616183341",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183341",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183341",
        "description": "limit_mg..history.demo04_20230616183341",
        "peekOfCode": "snr = stars_table['SNR_WIN']['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183341",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183341",
        "description": "limit_mg..history.demo04_20230616183341",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183341",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183341",
        "description": "limit_mg..history.demo04_20230616183341",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183341",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183341",
        "description": "limit_mg..history.demo04_20230616183341",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183341",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183341",
        "description": "limit_mg..history.demo04_20230616183341",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183341",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183341",
        "description": "limit_mg..history.demo04_20230616183341",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183341",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183345",
        "description": "limit_mg..history.demo04_20230616183345",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183345",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183345",
        "description": "limit_mg..history.demo04_20230616183345",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']>10['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183345",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183345",
        "description": "limit_mg..history.demo04_20230616183345",
        "peekOfCode": "snr = stars_table['SNR_WIN']>10['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183345",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183345",
        "description": "limit_mg..history.demo04_20230616183345",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183345",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183345",
        "description": "limit_mg..history.demo04_20230616183345",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183345",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183345",
        "description": "limit_mg..history.demo04_20230616183345",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183345",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183345",
        "description": "limit_mg..history.demo04_20230616183345",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183345",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183345",
        "description": "limit_mg..history.demo04_20230616183345",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183345",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183350",
        "description": "limit_mg..history.demo04_20230616183350",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183350",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183350",
        "description": "limit_mg..history.demo04_20230616183350",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']>3['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183350",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183350",
        "description": "limit_mg..history.demo04_20230616183350",
        "peekOfCode": "snr = stars_table['SNR_WIN']>3['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183350",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183350",
        "description": "limit_mg..history.demo04_20230616183350",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183350",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183350",
        "description": "limit_mg..history.demo04_20230616183350",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183350",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183350",
        "description": "limit_mg..history.demo04_20230616183350",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183350",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183350",
        "description": "limit_mg..history.demo04_20230616183350",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183350",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183350",
        "description": "limit_mg..history.demo04_20230616183350",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183350",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183353",
        "description": "limit_mg..history.demo04_20230616183353",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183353",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183353",
        "description": "limit_mg..history.demo04_20230616183353",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183353",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183353",
        "description": "limit_mg..history.demo04_20230616183353",
        "peekOfCode": "snr = stars_table[['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183353",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183353",
        "description": "limit_mg..history.demo04_20230616183353",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183353",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183353",
        "description": "limit_mg..history.demo04_20230616183353",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183353",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183353",
        "description": "limit_mg..history.demo04_20230616183353",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183353",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183353",
        "description": "limit_mg..history.demo04_20230616183353",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183353",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183353",
        "description": "limit_mg..history.demo04_20230616183353",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183353",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183356",
        "description": "limit_mg..history.demo04_20230616183356",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183356",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183356",
        "description": "limit_mg..history.demo04_20230616183356",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183356",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183356",
        "description": "limit_mg..history.demo04_20230616183356",
        "peekOfCode": "snr = stars_table[['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183356",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183356",
        "description": "limit_mg..history.demo04_20230616183356",
        "peekOfCode": "mag = stars_table[['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183356",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183356",
        "description": "limit_mg..history.demo04_20230616183356",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183356",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183356",
        "description": "limit_mg..history.demo04_20230616183356",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183356",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183356",
        "description": "limit_mg..history.demo04_20230616183356",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183356",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183356",
        "description": "limit_mg..history.demo04_20230616183356",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183356",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183408",
        "description": "limit_mg..history.demo04_20230616183408",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183408",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183408",
        "description": "limit_mg..history.demo04_20230616183408",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN'>3]['SNR_WIN']\nmag = stars_table[['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183408",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183408",
        "description": "limit_mg..history.demo04_20230616183408",
        "peekOfCode": "snr = stars_table['SNR_WIN'>3]['SNR_WIN']\nmag = stars_table[['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183408",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183408",
        "description": "limit_mg..history.demo04_20230616183408",
        "peekOfCode": "mag = stars_table[['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183408",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183408",
        "description": "limit_mg..history.demo04_20230616183408",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183408",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183408",
        "description": "limit_mg..history.demo04_20230616183408",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183408",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183408",
        "description": "limit_mg..history.demo04_20230616183408",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183408",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183408",
        "description": "limit_mg..history.demo04_20230616183408",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183408",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183410",
        "description": "limit_mg..history.demo04_20230616183410",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183410",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183410",
        "description": "limit_mg..history.demo04_20230616183410",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183410",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183410",
        "description": "limit_mg..history.demo04_20230616183410",
        "peekOfCode": "snr = stars_table[['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183410",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183410",
        "description": "limit_mg..history.demo04_20230616183410",
        "peekOfCode": "mag = stars_table[['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183410",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183410",
        "description": "limit_mg..history.demo04_20230616183410",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183410",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183410",
        "description": "limit_mg..history.demo04_20230616183410",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183410",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183410",
        "description": "limit_mg..history.demo04_20230616183410",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183410",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183410",
        "description": "limit_mg..history.demo04_20230616183410",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183410",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183413",
        "description": "limit_mg..history.demo04_20230616183413",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183413",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183413",
        "description": "limit_mg..history.demo04_20230616183413",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183413",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183413",
        "description": "limit_mg..history.demo04_20230616183413",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183413",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183413",
        "description": "limit_mg..history.demo04_20230616183413",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183413",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183413",
        "description": "limit_mg..history.demo04_20230616183413",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183413",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183413",
        "description": "limit_mg..history.demo04_20230616183413",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183413",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183413",
        "description": "limit_mg..history.demo04_20230616183413",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183413",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183413",
        "description": "limit_mg..history.demo04_20230616183413",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183413",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183423",
        "description": "limit_mg..history.demo04_20230616183423",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183423",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183423",
        "description": "limit_mg..history.demo04_20230616183423",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>10]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>10]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183423",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183423",
        "description": "limit_mg..history.demo04_20230616183423",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>10]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>10]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183423",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183423",
        "description": "limit_mg..history.demo04_20230616183423",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>10]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183423",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183423",
        "description": "limit_mg..history.demo04_20230616183423",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183423",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183423",
        "description": "limit_mg..history.demo04_20230616183423",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183423",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183423",
        "description": "limit_mg..history.demo04_20230616183423",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183423",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183423",
        "description": "limit_mg..history.demo04_20230616183423",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183423",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183444",
        "description": "limit_mg..history.demo04_20230616183444",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183444",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183444",
        "description": "limit_mg..history.demo04_20230616183444",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>10]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>10]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183444",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183444",
        "description": "limit_mg..history.demo04_20230616183444",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>10]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>10]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183444",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183444",
        "description": "limit_mg..history.demo04_20230616183444",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>10]['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183444",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183444",
        "description": "limit_mg..history.demo04_20230616183444",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183444",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183444",
        "description": "limit_mg..history.demo04_20230616183444",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183444",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183444",
        "description": "limit_mg..history.demo04_20230616183444",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183444",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183444",
        "description": "limit_mg..history.demo04_20230616183444",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183444",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183510",
        "description": "limit_mg..history.demo04_20230616183510",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183510",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183510",
        "description": "limit_mg..history.demo04_20230616183510",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>10]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183510",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183510",
        "description": "limit_mg..history.demo04_20230616183510",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>10]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183510",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183510",
        "description": "limit_mg..history.demo04_20230616183510",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183510",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183510",
        "description": "limit_mg..history.demo04_20230616183510",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183510",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183510",
        "description": "limit_mg..history.demo04_20230616183510",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183510",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183510",
        "description": "limit_mg..history.demo04_20230616183510",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183510",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183510",
        "description": "limit_mg..history.demo04_20230616183510",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183510",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183527",
        "description": "limit_mg..history.demo04_20230616183527",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183527",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183527",
        "description": "limit_mg..history.demo04_20230616183527",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183527",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183527",
        "description": "limit_mg..history.demo04_20230616183527",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183527",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183527",
        "description": "limit_mg..history.demo04_20230616183527",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183527",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183527",
        "description": "limit_mg..history.demo04_20230616183527",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183527",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183527",
        "description": "limit_mg..history.demo04_20230616183527",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183527",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183527",
        "description": "limit_mg..history.demo04_20230616183527",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183527",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183527",
        "description": "limit_mg..history.demo04_20230616183527",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183527",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183528",
        "description": "limit_mg..history.demo04_20230616183528",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183528",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183528",
        "description": "limit_mg..history.demo04_20230616183528",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183528",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183528",
        "description": "limit_mg..history.demo04_20230616183528",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183528",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183528",
        "description": "limit_mg..history.demo04_20230616183528",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183528",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183528",
        "description": "limit_mg..history.demo04_20230616183528",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183528",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183528",
        "description": "limit_mg..history.demo04_20230616183528",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183528",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183528",
        "description": "limit_mg..history.demo04_20230616183528",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183528",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183528",
        "description": "limit_mg..history.demo04_20230616183528",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183528",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183529",
        "description": "limit_mg..history.demo04_20230616183529",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183529",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183529",
        "description": "limit_mg..history.demo04_20230616183529",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183529",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183529",
        "description": "limit_mg..history.demo04_20230616183529",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183529",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183529",
        "description": "limit_mg..history.demo04_20230616183529",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183529",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183529",
        "description": "limit_mg..history.demo04_20230616183529",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183529",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183529",
        "description": "limit_mg..history.demo04_20230616183529",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183529",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183529",
        "description": "limit_mg..history.demo04_20230616183529",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183529",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183529",
        "description": "limit_mg..history.demo04_20230616183529",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183529",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616183530",
        "description": "limit_mg..history.demo04_20230616183530",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616183530",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183530",
        "description": "limit_mg..history.demo04_20230616183530",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616183530",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183530",
        "description": "limit_mg..history.demo04_20230616183530",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616183530",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183530",
        "description": "limit_mg..history.demo04_20230616183530",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616183530",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183530",
        "description": "limit_mg..history.demo04_20230616183530",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616183530",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183530",
        "description": "limit_mg..history.demo04_20230616183530",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616183530",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183530",
        "description": "limit_mg..history.demo04_20230616183530",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183530",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616183530",
        "description": "limit_mg..history.demo04_20230616183530",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616183530",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616185458",
        "description": "limit_mg..history.demo04_20230616185458",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616185458",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185458",
        "description": "limit_mg..history.demo04_20230616185458",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616185458",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185458",
        "description": "limit_mg..history.demo04_20230616185458",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616185458",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185458",
        "description": "limit_mg..history.demo04_20230616185458",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616185458",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185458",
        "description": "limit_mg..history.demo04_20230616185458",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616185458",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185458",
        "description": "limit_mg..history.demo04_20230616185458",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616185458",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185458",
        "description": "limit_mg..history.demo04_20230616185458",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616185458",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185458",
        "description": "limit_mg..history.demo04_20230616185458",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616185458",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616185511",
        "description": "limit_mg..history.demo04_20230616185511",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616185511",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185511",
        "description": "limit_mg..history.demo04_20230616185511",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616185511",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185511",
        "description": "limit_mg..history.demo04_20230616185511",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616185511",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185511",
        "description": "limit_mg..history.demo04_20230616185511",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616185511",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185511",
        "description": "limit_mg..history.demo04_20230616185511",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616185511",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185511",
        "description": "limit_mg..history.demo04_20230616185511",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616185511",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185511",
        "description": "limit_mg..history.demo04_20230616185511",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616185511",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185511",
        "description": "limit_mg..history.demo04_20230616185511",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616185511",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616185711",
        "description": "limit_mg..history.demo04_20230616185711",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616185711",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185711",
        "description": "limit_mg..history.demo04_20230616185711",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616185711",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185711",
        "description": "limit_mg..history.demo04_20230616185711",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616185711",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185711",
        "description": "limit_mg..history.demo04_20230616185711",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616185711",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185711",
        "description": "limit_mg..history.demo04_20230616185711",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616185711",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185711",
        "description": "limit_mg..history.demo04_20230616185711",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616185711",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185711",
        "description": "limit_mg..history.demo04_20230616185711",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616185711",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185711",
        "description": "limit_mg..history.demo04_20230616185711",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616185711",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616185714",
        "description": "limit_mg..history.demo04_20230616185714",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616185714",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185714",
        "description": "limit_mg..history.demo04_20230616185714",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616185714",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185714",
        "description": "limit_mg..history.demo04_20230616185714",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616185714",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185714",
        "description": "limit_mg..history.demo04_20230616185714",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616185714",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185714",
        "description": "limit_mg..history.demo04_20230616185714",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616185714",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185714",
        "description": "limit_mg..history.demo04_20230616185714",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616185714",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185714",
        "description": "limit_mg..history.demo04_20230616185714",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616185714",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185714",
        "description": "limit_mg..history.demo04_20230616185714",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg..history.demo04_20230616185714",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616185721",
        "description": "limit_mg..history.demo04_20230616185721",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616185721",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185721",
        "description": "limit_mg..history.demo04_20230616185721",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616185721",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185721",
        "description": "limit_mg..history.demo04_20230616185721",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616185721",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185721",
        "description": "limit_mg..history.demo04_20230616185721",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616185721",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185721",
        "description": "limit_mg..history.demo04_20230616185721",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616185721",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185721",
        "description": "limit_mg..history.demo04_20230616185721",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616185721",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185721",
        "description": "limit_mg..history.demo04_20230616185721",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(x, *popt))",
        "detail": "limit_mg..history.demo04_20230616185721",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185721",
        "description": "limit_mg..history.demo04_20230616185721",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(x, *popt))",
        "detail": "limit_mg..history.demo04_20230616185721",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616185723",
        "description": "limit_mg..history.demo04_20230616185723",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616185723",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185723",
        "description": "limit_mg..history.demo04_20230616185723",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616185723",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185723",
        "description": "limit_mg..history.demo04_20230616185723",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616185723",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185723",
        "description": "limit_mg..history.demo04_20230616185723",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616185723",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185723",
        "description": "limit_mg..history.demo04_20230616185723",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616185723",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185723",
        "description": "limit_mg..history.demo04_20230616185723",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616185723",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185723",
        "description": "limit_mg..history.demo04_20230616185723",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616185723",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185723",
        "description": "limit_mg..history.demo04_20230616185723",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616185723",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616185724",
        "description": "limit_mg..history.demo04_20230616185724",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616185724",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185724",
        "description": "limit_mg..history.demo04_20230616185724",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616185724",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185724",
        "description": "limit_mg..history.demo04_20230616185724",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616185724",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185724",
        "description": "limit_mg..history.demo04_20230616185724",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616185724",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185724",
        "description": "limit_mg..history.demo04_20230616185724",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616185724",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185724",
        "description": "limit_mg..history.demo04_20230616185724",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616185724",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185724",
        "description": "limit_mg..history.demo04_20230616185724",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616185724",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185724",
        "description": "limit_mg..history.demo04_20230616185724",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616185724",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616185954",
        "description": "limit_mg..history.demo04_20230616185954",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616185954",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185954",
        "description": "limit_mg..history.demo04_20230616185954",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616185954",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185954",
        "description": "limit_mg..history.demo04_20230616185954",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616185954",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185954",
        "description": "limit_mg..history.demo04_20230616185954",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616185954",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185954",
        "description": "limit_mg..history.demo04_20230616185954",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616185954",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185954",
        "description": "limit_mg..history.demo04_20230616185954",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616185954",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185954",
        "description": "limit_mg..history.demo04_20230616185954",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616185954",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185954",
        "description": "limit_mg..history.demo04_20230616185954",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616185954",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616185955",
        "description": "limit_mg..history.demo04_20230616185955",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616185955",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185955",
        "description": "limit_mg..history.demo04_20230616185955",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616185955",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185955",
        "description": "limit_mg..history.demo04_20230616185955",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616185955",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185955",
        "description": "limit_mg..history.demo04_20230616185955",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616185955",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185955",
        "description": "limit_mg..history.demo04_20230616185955",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616185955",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185955",
        "description": "limit_mg..history.demo04_20230616185955",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616185955",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185955",
        "description": "limit_mg..history.demo04_20230616185955",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616185955",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185955",
        "description": "limit_mg..history.demo04_20230616185955",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616185955",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616185959",
        "description": "limit_mg..history.demo04_20230616185959",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616185959",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185959",
        "description": "limit_mg..history.demo04_20230616185959",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>5]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616185959",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185959",
        "description": "limit_mg..history.demo04_20230616185959",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>5]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616185959",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185959",
        "description": "limit_mg..history.demo04_20230616185959",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616185959",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185959",
        "description": "limit_mg..history.demo04_20230616185959",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616185959",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185959",
        "description": "limit_mg..history.demo04_20230616185959",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616185959",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185959",
        "description": "limit_mg..history.demo04_20230616185959",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616185959",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616185959",
        "description": "limit_mg..history.demo04_20230616185959",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616185959",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190001",
        "description": "limit_mg..history.demo04_20230616190001",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190001",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190001",
        "description": "limit_mg..history.demo04_20230616190001",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>5]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190001",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190001",
        "description": "limit_mg..history.demo04_20230616190001",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>5]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190001",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190001",
        "description": "limit_mg..history.demo04_20230616190001",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190001",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190001",
        "description": "limit_mg..history.demo04_20230616190001",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190001",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190001",
        "description": "limit_mg..history.demo04_20230616190001",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190001",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190001",
        "description": "limit_mg..history.demo04_20230616190001",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190001",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190001",
        "description": "limit_mg..history.demo04_20230616190001",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190001",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190003",
        "description": "limit_mg..history.demo04_20230616190003",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190003",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190003",
        "description": "limit_mg..history.demo04_20230616190003",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>5]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>5]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190003",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190003",
        "description": "limit_mg..history.demo04_20230616190003",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>5]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>5]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190003",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190003",
        "description": "limit_mg..history.demo04_20230616190003",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>5]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190003",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190003",
        "description": "limit_mg..history.demo04_20230616190003",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190003",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190003",
        "description": "limit_mg..history.demo04_20230616190003",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190003",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190003",
        "description": "limit_mg..history.demo04_20230616190003",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190003",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190003",
        "description": "limit_mg..history.demo04_20230616190003",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190003",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190004",
        "description": "limit_mg..history.demo04_20230616190004",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190004",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190004",
        "description": "limit_mg..history.demo04_20230616190004",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>5]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>5]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190004",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190004",
        "description": "limit_mg..history.demo04_20230616190004",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>5]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>5]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190004",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190004",
        "description": "limit_mg..history.demo04_20230616190004",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>5]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190004",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190004",
        "description": "limit_mg..history.demo04_20230616190004",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190004",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190004",
        "description": "limit_mg..history.demo04_20230616190004",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190004",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190004",
        "description": "limit_mg..history.demo04_20230616190004",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190004",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190004",
        "description": "limit_mg..history.demo04_20230616190004",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190004",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190008",
        "description": "limit_mg..history.demo04_20230616190008",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190008",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190008",
        "description": "limit_mg..history.demo04_20230616190008",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190008",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190008",
        "description": "limit_mg..history.demo04_20230616190008",
        "peekOfCode": "snr = stars_table[stars_table['SNR_WIN']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190008",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190008",
        "description": "limit_mg..history.demo04_20230616190008",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190008",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190008",
        "description": "limit_mg..history.demo04_20230616190008",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190008",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190008",
        "description": "limit_mg..history.demo04_20230616190008",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190008",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190008",
        "description": "limit_mg..history.demo04_20230616190008",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190008",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190008",
        "description": "limit_mg..history.demo04_20230616190008",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190008",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190046",
        "description": "limit_mg..history.demo04_20230616190046",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190046",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190046",
        "description": "limit_mg..history.demo04_20230616190046",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190046",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190046",
        "description": "limit_mg..history.demo04_20230616190046",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190046",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190046",
        "description": "limit_mg..history.demo04_20230616190046",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190046",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190046",
        "description": "limit_mg..history.demo04_20230616190046",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190046",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190046",
        "description": "limit_mg..history.demo04_20230616190046",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190046",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190046",
        "description": "limit_mg..history.demo04_20230616190046",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190046",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190046",
        "description": "limit_mg..history.demo04_20230616190046",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190046",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190049",
        "description": "limit_mg..history.demo04_20230616190049",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190049",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190049",
        "description": "limit_mg..history.demo04_20230616190049",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190049",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190049",
        "description": "limit_mg..history.demo04_20230616190049",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==>3]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190049",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190049",
        "description": "limit_mg..history.demo04_20230616190049",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190049",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190049",
        "description": "limit_mg..history.demo04_20230616190049",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190049",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190049",
        "description": "limit_mg..history.demo04_20230616190049",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190049",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190049",
        "description": "limit_mg..history.demo04_20230616190049",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190049",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190049",
        "description": "limit_mg..history.demo04_20230616190049",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190049",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190052",
        "description": "limit_mg..history.demo04_20230616190052",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190052",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190052",
        "description": "limit_mg..history.demo04_20230616190052",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==0]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190052",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190052",
        "description": "limit_mg..history.demo04_20230616190052",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==0]['SNR_WIN']\nmag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190052",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190052",
        "description": "limit_mg..history.demo04_20230616190052",
        "peekOfCode": "mag = stars_table[stars_table['SNR_WIN']>3]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190052",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190052",
        "description": "limit_mg..history.demo04_20230616190052",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190052",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190052",
        "description": "limit_mg..history.demo04_20230616190052",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190052",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190052",
        "description": "limit_mg..history.demo04_20230616190052",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190052",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190052",
        "description": "limit_mg..history.demo04_20230616190052",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190052",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190056",
        "description": "limit_mg..history.demo04_20230616190056",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190056",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190056",
        "description": "limit_mg..history.demo04_20230616190056",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190056",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190056",
        "description": "limit_mg..history.demo04_20230616190056",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190056",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190056",
        "description": "limit_mg..history.demo04_20230616190056",
        "peekOfCode": "mag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190056",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190056",
        "description": "limit_mg..history.demo04_20230616190056",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190056",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190056",
        "description": "limit_mg..history.demo04_20230616190056",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190056",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190056",
        "description": "limit_mg..history.demo04_20230616190056",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190056",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190056",
        "description": "limit_mg..history.demo04_20230616190056",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190056",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190109",
        "description": "limit_mg..history.demo04_20230616190109",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190109",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190109",
        "description": "limit_mg..history.demo04_20230616190109",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==0 ]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190109",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190109",
        "description": "limit_mg..history.demo04_20230616190109",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==0 ]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190109",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190109",
        "description": "limit_mg..history.demo04_20230616190109",
        "peekOfCode": "mag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190109",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190109",
        "description": "limit_mg..history.demo04_20230616190109",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190109",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190109",
        "description": "limit_mg..history.demo04_20230616190109",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190109",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190109",
        "description": "limit_mg..history.demo04_20230616190109",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190109",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190109",
        "description": "limit_mg..history.demo04_20230616190109",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190109",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190111",
        "description": "limit_mg..history.demo04_20230616190111",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190111",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190111",
        "description": "limit_mg..history.demo04_20230616190111",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==0 & ]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190111",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190111",
        "description": "limit_mg..history.demo04_20230616190111",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==0 & ]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190111",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190111",
        "description": "limit_mg..history.demo04_20230616190111",
        "peekOfCode": "mag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190111",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190111",
        "description": "limit_mg..history.demo04_20230616190111",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190111",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190111",
        "description": "limit_mg..history.demo04_20230616190111",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190111",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190111",
        "description": "limit_mg..history.demo04_20230616190111",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190111",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190111",
        "description": "limit_mg..history.demo04_20230616190111",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190111",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190115",
        "description": "limit_mg..history.demo04_20230616190115",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190115",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190115",
        "description": "limit_mg..history.demo04_20230616190115",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==0 & stars_table['FLAGS']==0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190115",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190115",
        "description": "limit_mg..history.demo04_20230616190115",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==0 & stars_table['FLAGS']==0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190115",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190115",
        "description": "limit_mg..history.demo04_20230616190115",
        "peekOfCode": "mag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190115",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190115",
        "description": "limit_mg..history.demo04_20230616190115",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190115",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190115",
        "description": "limit_mg..history.demo04_20230616190115",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190115",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190115",
        "description": "limit_mg..history.demo04_20230616190115",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190115",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190115",
        "description": "limit_mg..history.demo04_20230616190115",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190115",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190119",
        "description": "limit_mg..history.demo04_20230616190119",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190119",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190119",
        "description": "limit_mg..history.demo04_20230616190119",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==0 ]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190119",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190119",
        "description": "limit_mg..history.demo04_20230616190119",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==0 ]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190119",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190119",
        "description": "limit_mg..history.demo04_20230616190119",
        "peekOfCode": "mag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190119",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190119",
        "description": "limit_mg..history.demo04_20230616190119",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190119",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190119",
        "description": "limit_mg..history.demo04_20230616190119",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190119",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190119",
        "description": "limit_mg..history.demo04_20230616190119",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190119",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190119",
        "description": "limit_mg..history.demo04_20230616190119",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190119",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190135",
        "description": "limit_mg..history.demo04_20230616190135",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190135",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190135",
        "description": "limit_mg..history.demo04_20230616190135",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==0 &  ]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190135",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190135",
        "description": "limit_mg..history.demo04_20230616190135",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==0 &  ]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190135",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190135",
        "description": "limit_mg..history.demo04_20230616190135",
        "peekOfCode": "mag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190135",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190135",
        "description": "limit_mg..history.demo04_20230616190135",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190135",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190135",
        "description": "limit_mg..history.demo04_20230616190135",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190135",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190135",
        "description": "limit_mg..history.demo04_20230616190135",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190135",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190135",
        "description": "limit_mg..history.demo04_20230616190135",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190135",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190138",
        "description": "limit_mg..history.demo04_20230616190138",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190138",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190138",
        "description": "limit_mg..history.demo04_20230616190138",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==0 & stars_table['FLAGS']==0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190138",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190138",
        "description": "limit_mg..history.demo04_20230616190138",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==0 & stars_table['FLAGS']==0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190138",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190138",
        "description": "limit_mg..history.demo04_20230616190138",
        "peekOfCode": "mag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190138",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190138",
        "description": "limit_mg..history.demo04_20230616190138",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190138",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190138",
        "description": "limit_mg..history.demo04_20230616190138",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190138",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190138",
        "description": "limit_mg..history.demo04_20230616190138",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190138",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190138",
        "description": "limit_mg..history.demo04_20230616190138",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190138",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190142",
        "description": "limit_mg..history.demo04_20230616190142",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190142",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190142",
        "description": "limit_mg..history.demo04_20230616190142",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']==0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190142",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190142",
        "description": "limit_mg..history.demo04_20230616190142",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']==0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190142",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190142",
        "description": "limit_mg..history.demo04_20230616190142",
        "peekOfCode": "mag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190142",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190142",
        "description": "limit_mg..history.demo04_20230616190142",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190142",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190142",
        "description": "limit_mg..history.demo04_20230616190142",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190142",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190142",
        "description": "limit_mg..history.demo04_20230616190142",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190142",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190142",
        "description": "limit_mg..history.demo04_20230616190142",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190142",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190145",
        "description": "limit_mg..history.demo04_20230616190145",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190145",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190145",
        "description": "limit_mg..history.demo04_20230616190145",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190145",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190145",
        "description": "limit_mg..history.demo04_20230616190145",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190145",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190145",
        "description": "limit_mg..history.demo04_20230616190145",
        "peekOfCode": "mag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190145",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190145",
        "description": "limit_mg..history.demo04_20230616190145",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190145",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190145",
        "description": "limit_mg..history.demo04_20230616190145",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190145",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190145",
        "description": "limit_mg..history.demo04_20230616190145",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190145",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190145",
        "description": "limit_mg..history.demo04_20230616190145",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190145",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190146",
        "description": "limit_mg..history.demo04_20230616190146",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190146",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190146",
        "description": "limit_mg..history.demo04_20230616190146",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']>0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190146",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190146",
        "description": "limit_mg..history.demo04_20230616190146",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']>0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190146",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190146",
        "description": "limit_mg..history.demo04_20230616190146",
        "peekOfCode": "mag = stars_table[stars_table['FLAGS']==0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190146",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190146",
        "description": "limit_mg..history.demo04_20230616190146",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190146",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190146",
        "description": "limit_mg..history.demo04_20230616190146",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190146",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190146",
        "description": "limit_mg..history.demo04_20230616190146",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190146",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190146",
        "description": "limit_mg..history.demo04_20230616190146",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190146",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190152",
        "description": "limit_mg..history.demo04_20230616190152",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190152",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190152",
        "description": "limit_mg..history.demo04_20230616190152",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']>0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190152",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190152",
        "description": "limit_mg..history.demo04_20230616190152",
        "peekOfCode": "snr = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']>0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190152",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190152",
        "description": "limit_mg..history.demo04_20230616190152",
        "peekOfCode": "mag = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190152",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190152",
        "description": "limit_mg..history.demo04_20230616190152",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190152",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190152",
        "description": "limit_mg..history.demo04_20230616190152",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190152",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190152",
        "description": "limit_mg..history.demo04_20230616190152",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190152",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190152",
        "description": "limit_mg..history.demo04_20230616190152",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190152",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190202",
        "description": "limit_mg..history.demo04_20230616190202",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190202",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190202",
        "description": "limit_mg..history.demo04_20230616190202",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190202",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190202",
        "description": "limit_mg..history.demo04_20230616190202",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>0]['SNR_WIN']\nmag = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190202",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190202",
        "description": "limit_mg..history.demo04_20230616190202",
        "peekOfCode": "mag = stars_table[stars_table['FLAGS']==0 & stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190202",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190202",
        "description": "limit_mg..history.demo04_20230616190202",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190202",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190202",
        "description": "limit_mg..history.demo04_20230616190202",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190202",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190202",
        "description": "limit_mg..history.demo04_20230616190202",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190202",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190202",
        "description": "limit_mg..history.demo04_20230616190202",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190202",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190205",
        "description": "limit_mg..history.demo04_20230616190205",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190205",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190205",
        "description": "limit_mg..history.demo04_20230616190205",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>0]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190205",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190205",
        "description": "limit_mg..history.demo04_20230616190205",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>0]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190205",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190205",
        "description": "limit_mg..history.demo04_20230616190205",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190205",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190205",
        "description": "limit_mg..history.demo04_20230616190205",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190205",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190205",
        "description": "limit_mg..history.demo04_20230616190205",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190205",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190205",
        "description": "limit_mg..history.demo04_20230616190205",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190205",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190205",
        "description": "limit_mg..history.demo04_20230616190205",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190205",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190210",
        "description": "limit_mg..history.demo04_20230616190210",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190210",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190210",
        "description": "limit_mg..history.demo04_20230616190210",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190210",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190210",
        "description": "limit_mg..history.demo04_20230616190210",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190210",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190210",
        "description": "limit_mg..history.demo04_20230616190210",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190210",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190210",
        "description": "limit_mg..history.demo04_20230616190210",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190210",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190210",
        "description": "limit_mg..history.demo04_20230616190210",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190210",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190210",
        "description": "limit_mg..history.demo04_20230616190210",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190210",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190210",
        "description": "limit_mg..history.demo04_20230616190210",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190210",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190214",
        "description": "limit_mg..history.demo04_20230616190214",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190214",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190214",
        "description": "limit_mg..history.demo04_20230616190214",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190214",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190214",
        "description": "limit_mg..history.demo04_20230616190214",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190214",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190214",
        "description": "limit_mg..history.demo04_20230616190214",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & stars_table['SNR_WIN']>0]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190214",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190214",
        "description": "limit_mg..history.demo04_20230616190214",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190214",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190214",
        "description": "limit_mg..history.demo04_20230616190214",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190214",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190214",
        "description": "limit_mg..history.demo04_20230616190214",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190214",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190214",
        "description": "limit_mg..history.demo04_20230616190214",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190214",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190223",
        "description": "limit_mg..history.demo04_20230616190223",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190223",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190223",
        "description": "limit_mg..history.demo04_20230616190223",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190223",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190223",
        "description": "limit_mg..history.demo04_20230616190223",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190223",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190223",
        "description": "limit_mg..history.demo04_20230616190223",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190223",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190223",
        "description": "limit_mg..history.demo04_20230616190223",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190223",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190223",
        "description": "limit_mg..history.demo04_20230616190223",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190223",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190223",
        "description": "limit_mg..history.demo04_20230616190223",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190223",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190223",
        "description": "limit_mg..history.demo04_20230616190223",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190223",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190252",
        "description": "limit_mg..history.demo04_20230616190252",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190252",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190252",
        "description": "limit_mg..history.demo04_20230616190252",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190252",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190252",
        "description": "limit_mg..history.demo04_20230616190252",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190252",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190252",
        "description": "limit_mg..history.demo04_20230616190252",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190252",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190252",
        "description": "limit_mg..history.demo04_20230616190252",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190252",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190252",
        "description": "limit_mg..history.demo04_20230616190252",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190252",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190252",
        "description": "limit_mg..history.demo04_20230616190252",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190252",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190252",
        "description": "limit_mg..history.demo04_20230616190252",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190252",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190254",
        "description": "limit_mg..history.demo04_20230616190254",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190254",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190254",
        "description": "limit_mg..history.demo04_20230616190254",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190254",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190254",
        "description": "limit_mg..history.demo04_20230616190254",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190254",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190254",
        "description": "limit_mg..history.demo04_20230616190254",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190254",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190254",
        "description": "limit_mg..history.demo04_20230616190254",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190254",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190254",
        "description": "limit_mg..history.demo04_20230616190254",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190254",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190254",
        "description": "limit_mg..history.demo04_20230616190254",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190254",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190254",
        "description": "limit_mg..history.demo04_20230616190254",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190254",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190330",
        "description": "limit_mg..history.demo04_20230616190330",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\nprint()\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190330",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190330",
        "description": "limit_mg..history.demo04_20230616190330",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\nprint()\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616190330",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190330",
        "description": "limit_mg..history.demo04_20230616190330",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\nprint()\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190330",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190330",
        "description": "limit_mg..history.demo04_20230616190330",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\nprint()\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190330",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190330",
        "description": "limit_mg..history.demo04_20230616190330",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\nprint()\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190330",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190330",
        "description": "limit_mg..history.demo04_20230616190330",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\nprint()\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190330",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190330",
        "description": "limit_mg..history.demo04_20230616190330",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190330",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190330",
        "description": "limit_mg..history.demo04_20230616190330",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190330",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190332",
        "description": "limit_mg..history.demo04_20230616190332",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\nprint(snr_sigclip)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190332",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190332",
        "description": "limit_mg..history.demo04_20230616190332",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\nprint(snr_sigclip)\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230616190332",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190332",
        "description": "limit_mg..history.demo04_20230616190332",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\nprint(snr_sigclip)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190332",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190332",
        "description": "limit_mg..history.demo04_20230616190332",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\nprint(snr_sigclip)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190332",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190332",
        "description": "limit_mg..history.demo04_20230616190332",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\nprint(snr_sigclip)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190332",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190332",
        "description": "limit_mg..history.demo04_20230616190332",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\nprint(snr_sigclip)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190332",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190332",
        "description": "limit_mg..history.demo04_20230616190332",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190332",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190332",
        "description": "limit_mg..history.demo04_20230616190332",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190332",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190425",
        "description": "limit_mg..history.demo04_20230616190425",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190425",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190425",
        "description": "limit_mg..history.demo04_20230616190425",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190425",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190425",
        "description": "limit_mg..history.demo04_20230616190425",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190425",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190425",
        "description": "limit_mg..history.demo04_20230616190425",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190425",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190425",
        "description": "limit_mg..history.demo04_20230616190425",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190425",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190425",
        "description": "limit_mg..history.demo04_20230616190425",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190425",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190425",
        "description": "limit_mg..history.demo04_20230616190425",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190425",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190425",
        "description": "limit_mg..history.demo04_20230616190425",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190425",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190437",
        "description": "limit_mg..history.demo04_20230616190437",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190437",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190437",
        "description": "limit_mg..history.demo04_20230616190437",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190437",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190437",
        "description": "limit_mg..history.demo04_20230616190437",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190437",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190437",
        "description": "limit_mg..history.demo04_20230616190437",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190437",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190437",
        "description": "limit_mg..history.demo04_20230616190437",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190437",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190437",
        "description": "limit_mg..history.demo04_20230616190437",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190437",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190437",
        "description": "limit_mg..history.demo04_20230616190437",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190437",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190437",
        "description": "limit_mg..history.demo04_20230616190437",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190437",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190438",
        "description": "limit_mg..history.demo04_20230616190438",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190438",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190438",
        "description": "limit_mg..history.demo04_20230616190438",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190438",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190438",
        "description": "limit_mg..history.demo04_20230616190438",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190438",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190438",
        "description": "limit_mg..history.demo04_20230616190438",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190438",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190438",
        "description": "limit_mg..history.demo04_20230616190438",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190438",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190438",
        "description": "limit_mg..history.demo04_20230616190438",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190438",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190438",
        "description": "limit_mg..history.demo04_20230616190438",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190438",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190438",
        "description": "limit_mg..history.demo04_20230616190438",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190438",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190443",
        "description": "limit_mg..history.demo04_20230616190443",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# # 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190443",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190443",
        "description": "limit_mg..history.demo04_20230616190443",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190443",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190443",
        "description": "limit_mg..history.demo04_20230616190443",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190443",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190443",
        "description": "limit_mg..history.demo04_20230616190443",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190443",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190443",
        "description": "limit_mg..history.demo04_20230616190443",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190443",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190443",
        "description": "limit_mg..history.demo04_20230616190443",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190443",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190447",
        "description": "limit_mg..history.demo04_20230616190447",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# # 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190447",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190447",
        "description": "limit_mg..history.demo04_20230616190447",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190447",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190447",
        "description": "limit_mg..history.demo04_20230616190447",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190447",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190447",
        "description": "limit_mg..history.demo04_20230616190447",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190447",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190447",
        "description": "limit_mg..history.demo04_20230616190447",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190447",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190447",
        "description": "limit_mg..history.demo04_20230616190447",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190447",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190450",
        "description": "limit_mg..history.demo04_20230616190450",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\n# popt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# # 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190450",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190450",
        "description": "limit_mg..history.demo04_20230616190450",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\n# popt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190450",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190450",
        "description": "limit_mg..history.demo04_20230616190450",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\n# popt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190450",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190450",
        "description": "limit_mg..history.demo04_20230616190450",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\n# popt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190450",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190450",
        "description": "limit_mg..history.demo04_20230616190450",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\n# popt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190450",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190450",
        "description": "limit_mg..history.demo04_20230616190450",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\n# popt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190450",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190534",
        "description": "limit_mg..history.demo04_20230616190534",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# # 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190534",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190534",
        "description": "limit_mg..history.demo04_20230616190534",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190534",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190534",
        "description": "limit_mg..history.demo04_20230616190534",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190534",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190534",
        "description": "limit_mg..history.demo04_20230616190534",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190534",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190534",
        "description": "limit_mg..history.demo04_20230616190534",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190534",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190534",
        "description": "limit_mg..history.demo04_20230616190534",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190534",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190535",
        "description": "limit_mg..history.demo04_20230616190535",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190535",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190535",
        "description": "limit_mg..history.demo04_20230616190535",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo04_20230616190535",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190535",
        "description": "limit_mg..history.demo04_20230616190535",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190535",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190535",
        "description": "limit_mg..history.demo04_20230616190535",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190535",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190535",
        "description": "limit_mg..history.demo04_20230616190535",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190535",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190535",
        "description": "limit_mg..history.demo04_20230616190535",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190535",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190535",
        "description": "limit_mg..history.demo04_20230616190535",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190535",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190535",
        "description": "limit_mg..history.demo04_20230616190535",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190535",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190537",
        "description": "limit_mg..history.demo04_20230616190537",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190537",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190537",
        "description": "limit_mg..history.demo04_20230616190537",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev)",
        "detail": "limit_mg..history.demo04_20230616190537",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190537",
        "description": "limit_mg..history.demo04_20230616190537",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190537",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190537",
        "description": "limit_mg..history.demo04_20230616190537",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190537",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190537",
        "description": "limit_mg..history.demo04_20230616190537",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190537",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190537",
        "description": "limit_mg..history.demo04_20230616190537",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190537",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190537",
        "description": "limit_mg..history.demo04_20230616190537",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190537",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190537",
        "description": "limit_mg..history.demo04_20230616190537",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190537",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190539",
        "description": "limit_mg..history.demo04_20230616190539",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190539",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190539",
        "description": "limit_mg..history.demo04_20230616190539",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=)",
        "detail": "limit_mg..history.demo04_20230616190539",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190539",
        "description": "limit_mg..history.demo04_20230616190539",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190539",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190539",
        "description": "limit_mg..history.demo04_20230616190539",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190539",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190539",
        "description": "limit_mg..history.demo04_20230616190539",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190539",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190539",
        "description": "limit_mg..history.demo04_20230616190539",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190539",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190539",
        "description": "limit_mg..history.demo04_20230616190539",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190539",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190539",
        "description": "limit_mg..history.demo04_20230616190539",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190539",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190541",
        "description": "limit_mg..history.demo04_20230616190541",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190541",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190541",
        "description": "limit_mg..history.demo04_20230616190541",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616190541",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190541",
        "description": "limit_mg..history.demo04_20230616190541",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190541",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190541",
        "description": "limit_mg..history.demo04_20230616190541",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190541",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190541",
        "description": "limit_mg..history.demo04_20230616190541",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190541",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190541",
        "description": "limit_mg..history.demo04_20230616190541",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190541",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190541",
        "description": "limit_mg..history.demo04_20230616190541",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190541",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190541",
        "description": "limit_mg..history.demo04_20230616190541",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190541",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190735",
        "description": "limit_mg..history.demo04_20230616190735",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190735",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190735",
        "description": "limit_mg..history.demo04_20230616190735",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616190735",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190735",
        "description": "limit_mg..history.demo04_20230616190735",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190735",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190735",
        "description": "limit_mg..history.demo04_20230616190735",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190735",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190735",
        "description": "limit_mg..history.demo04_20230616190735",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190735",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190735",
        "description": "limit_mg..history.demo04_20230616190735",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190735",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190735",
        "description": "limit_mg..history.demo04_20230616190735",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190735",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190735",
        "description": "limit_mg..history.demo04_20230616190735",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190735",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190736",
        "description": "limit_mg..history.demo04_20230616190736",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190736",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190736",
        "description": "limit_mg..history.demo04_20230616190736",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616190736",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190736",
        "description": "limit_mg..history.demo04_20230616190736",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190736",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190736",
        "description": "limit_mg..history.demo04_20230616190736",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190736",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190736",
        "description": "limit_mg..history.demo04_20230616190736",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190736",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190736",
        "description": "limit_mg..history.demo04_20230616190736",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190736",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190736",
        "description": "limit_mg..history.demo04_20230616190736",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190736",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190736",
        "description": "limit_mg..history.demo04_20230616190736",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190736",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616190737",
        "description": "limit_mg..history.demo04_20230616190737",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616190737",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190737",
        "description": "limit_mg..history.demo04_20230616190737",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616190737",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190737",
        "description": "limit_mg..history.demo04_20230616190737",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616190737",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190737",
        "description": "limit_mg..history.demo04_20230616190737",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616190737",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190737",
        "description": "limit_mg..history.demo04_20230616190737",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616190737",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190737",
        "description": "limit_mg..history.demo04_20230616190737",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616190737",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190737",
        "description": "limit_mg..history.demo04_20230616190737",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190737",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616190737",
        "description": "limit_mg..history.demo04_20230616190737",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616190737",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616191210",
        "description": "limit_mg..history.demo04_20230616191210",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616191210",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191210",
        "description": "limit_mg..history.demo04_20230616191210",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616191210",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191210",
        "description": "limit_mg..history.demo04_20230616191210",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616191210",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191210",
        "description": "limit_mg..history.demo04_20230616191210",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616191210",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191210",
        "description": "limit_mg..history.demo04_20230616191210",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616191210",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191210",
        "description": "limit_mg..history.demo04_20230616191210",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616191210",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191210",
        "description": "limit_mg..history.demo04_20230616191210",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191210",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191210",
        "description": "limit_mg..history.demo04_20230616191210",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191210",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616191216",
        "description": "limit_mg..history.demo04_20230616191216",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616191216",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191216",
        "description": "limit_mg..history.demo04_20230616191216",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616191216",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191216",
        "description": "limit_mg..history.demo04_20230616191216",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616191216",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191216",
        "description": "limit_mg..history.demo04_20230616191216",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616191216",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191216",
        "description": "limit_mg..history.demo04_20230616191216",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616191216",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191216",
        "description": "limit_mg..history.demo04_20230616191216",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616191216",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191216",
        "description": "limit_mg..history.demo04_20230616191216",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191216",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191216",
        "description": "limit_mg..history.demo04_20230616191216",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191216",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616191218",
        "description": "limit_mg..history.demo04_20230616191218",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616191218",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191218",
        "description": "limit_mg..history.demo04_20230616191218",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616191218",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191218",
        "description": "limit_mg..history.demo04_20230616191218",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616191218",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191218",
        "description": "limit_mg..history.demo04_20230616191218",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616191218",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191218",
        "description": "limit_mg..history.demo04_20230616191218",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616191218",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191218",
        "description": "limit_mg..history.demo04_20230616191218",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616191218",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191218",
        "description": "limit_mg..history.demo04_20230616191218",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191218",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191218",
        "description": "limit_mg..history.demo04_20230616191218",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191218",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616191219",
        "description": "limit_mg..history.demo04_20230616191219",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr+(a1*snr**a2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616191219",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191219",
        "description": "limit_mg..history.demo04_20230616191219",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr+(a1*snr**a2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616191219",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191219",
        "description": "limit_mg..history.demo04_20230616191219",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr+(a1*snr**a2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616191219",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191219",
        "description": "limit_mg..history.demo04_20230616191219",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>5)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr+(a1*snr**a2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616191219",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191219",
        "description": "limit_mg..history.demo04_20230616191219",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr+(a1*snr**a2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616191219",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191219",
        "description": "limit_mg..history.demo04_20230616191219",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr+(a1*snr**a2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616191219",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191219",
        "description": "limit_mg..history.demo04_20230616191219",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191219",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191219",
        "description": "limit_mg..history.demo04_20230616191219",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191219",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616191229",
        "description": "limit_mg..history.demo04_20230616191229",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616191229",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191229",
        "description": "limit_mg..history.demo04_20230616191229",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616191229",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191229",
        "description": "limit_mg..history.demo04_20230616191229",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616191229",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191229",
        "description": "limit_mg..history.demo04_20230616191229",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616191229",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191229",
        "description": "limit_mg..history.demo04_20230616191229",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616191229",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191229",
        "description": "limit_mg..history.demo04_20230616191229",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616191229",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191229",
        "description": "limit_mg..history.demo04_20230616191229",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191229",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191229",
        "description": "limit_mg..history.demo04_20230616191229",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191229",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616191230",
        "description": "limit_mg..history.demo04_20230616191230",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616191230",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191230",
        "description": "limit_mg..history.demo04_20230616191230",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616191230",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191230",
        "description": "limit_mg..history.demo04_20230616191230",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616191230",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191230",
        "description": "limit_mg..history.demo04_20230616191230",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616191230",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191230",
        "description": "limit_mg..history.demo04_20230616191230",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616191230",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191230",
        "description": "limit_mg..history.demo04_20230616191230",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616191230",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191230",
        "description": "limit_mg..history.demo04_20230616191230",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191230",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191230",
        "description": "limit_mg..history.demo04_20230616191230",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191230",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616191315",
        "description": "limit_mg..history.demo04_20230616191315",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616191315",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191315",
        "description": "limit_mg..history.demo04_20230616191315",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616191315",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191315",
        "description": "limit_mg..history.demo04_20230616191315",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616191315",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191315",
        "description": "limit_mg..history.demo04_20230616191315",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616191315",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191315",
        "description": "limit_mg..history.demo04_20230616191315",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616191315",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191315",
        "description": "limit_mg..history.demo04_20230616191315",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616191315",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191315",
        "description": "limit_mg..history.demo04_20230616191315",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191315",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191315",
        "description": "limit_mg..history.demo04_20230616191315",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191315",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616191322",
        "description": "limit_mg..history.demo04_20230616191322",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr+(a1*snr**a2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616191322",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191322",
        "description": "limit_mg..history.demo04_20230616191322",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr+(a1*snr**a2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616191322",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191322",
        "description": "limit_mg..history.demo04_20230616191322",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr+(a1*snr**a2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616191322",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191322",
        "description": "limit_mg..history.demo04_20230616191322",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr+(a1*snr**a2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616191322",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191322",
        "description": "limit_mg..history.demo04_20230616191322",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr+(a1*snr**a2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616191322",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191322",
        "description": "limit_mg..history.demo04_20230616191322",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr+(a1*snr**a2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616191322",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191322",
        "description": "limit_mg..history.demo04_20230616191322",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191322",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191322",
        "description": "limit_mg..history.demo04_20230616191322",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191322",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616191332",
        "description": "limit_mg..history.demo04_20230616191332",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616191332",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191332",
        "description": "limit_mg..history.demo04_20230616191332",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616191332",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191332",
        "description": "limit_mg..history.demo04_20230616191332",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616191332",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191332",
        "description": "limit_mg..history.demo04_20230616191332",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616191332",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191332",
        "description": "limit_mg..history.demo04_20230616191332",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616191332",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191332",
        "description": "limit_mg..history.demo04_20230616191332",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616191332",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191332",
        "description": "limit_mg..history.demo04_20230616191332",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191332",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191332",
        "description": "limit_mg..history.demo04_20230616191332",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191332",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616191333",
        "description": "limit_mg..history.demo04_20230616191333",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616191333",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191333",
        "description": "limit_mg..history.demo04_20230616191333",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616191333",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191333",
        "description": "limit_mg..history.demo04_20230616191333",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616191333",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191333",
        "description": "limit_mg..history.demo04_20230616191333",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616191333",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191333",
        "description": "limit_mg..history.demo04_20230616191333",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616191333",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191333",
        "description": "limit_mg..history.demo04_20230616191333",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616191333",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191333",
        "description": "limit_mg..history.demo04_20230616191333",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191333",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191333",
        "description": "limit_mg..history.demo04_20230616191333",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191333",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230616191334",
        "description": "limit_mg..history.demo04_20230616191334",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230616191334",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191334",
        "description": "limit_mg..history.demo04_20230616191334",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230616191334",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191334",
        "description": "limit_mg..history.demo04_20230616191334",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230616191334",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191334",
        "description": "limit_mg..history.demo04_20230616191334",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230616191334",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191334",
        "description": "limit_mg..history.demo04_20230616191334",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230616191334",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191334",
        "description": "limit_mg..history.demo04_20230616191334",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230616191334",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191334",
        "description": "limit_mg..history.demo04_20230616191334",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191334",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230616191334",
        "description": "limit_mg..history.demo04_20230616191334",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230616191334",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617153739",
        "description": "limit_mg..history.demo04_20230617153739",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617153739",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153739",
        "description": "limit_mg..history.demo04_20230617153739",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table=stars_table\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617153739",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153739",
        "description": "limit_mg..history.demo04_20230617153739",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617153739",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153739",
        "description": "limit_mg..history.demo04_20230617153739",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617153739",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153739",
        "description": "limit_mg..history.demo04_20230617153739",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617153739",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153739",
        "description": "limit_mg..history.demo04_20230617153739",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617153739",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153739",
        "description": "limit_mg..history.demo04_20230617153739",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153739",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153739",
        "description": "limit_mg..history.demo04_20230617153739",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153739",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617153741",
        "description": "limit_mg..history.demo04_20230617153741",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617153741",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153741",
        "description": "limit_mg..history.demo04_20230617153741",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table=stars_table[]\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617153741",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153741",
        "description": "limit_mg..history.demo04_20230617153741",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617153741",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153741",
        "description": "limit_mg..history.demo04_20230617153741",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617153741",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153741",
        "description": "limit_mg..history.demo04_20230617153741",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617153741",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153741",
        "description": "limit_mg..history.demo04_20230617153741",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617153741",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153741",
        "description": "limit_mg..history.demo04_20230617153741",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153741",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153741",
        "description": "limit_mg..history.demo04_20230617153741",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153741",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617153744",
        "description": "limit_mg..history.demo04_20230617153744",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617153744",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153744",
        "description": "limit_mg..history.demo04_20230617153744",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table=stars_table[np.ar]\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617153744",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153744",
        "description": "limit_mg..history.demo04_20230617153744",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617153744",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153744",
        "description": "limit_mg..history.demo04_20230617153744",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617153744",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153744",
        "description": "limit_mg..history.demo04_20230617153744",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617153744",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153744",
        "description": "limit_mg..history.demo04_20230617153744",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617153744",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153744",
        "description": "limit_mg..history.demo04_20230617153744",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153744",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153744",
        "description": "limit_mg..history.demo04_20230617153744",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153744",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617153747",
        "description": "limit_mg..history.demo04_20230617153747",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617153747",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153747",
        "description": "limit_mg..history.demo04_20230617153747",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table=stars_table[np.args]\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617153747",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153747",
        "description": "limit_mg..history.demo04_20230617153747",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617153747",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153747",
        "description": "limit_mg..history.demo04_20230617153747",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617153747",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153747",
        "description": "limit_mg..history.demo04_20230617153747",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617153747",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153747",
        "description": "limit_mg..history.demo04_20230617153747",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617153747",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153747",
        "description": "limit_mg..history.demo04_20230617153747",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153747",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153747",
        "description": "limit_mg..history.demo04_20230617153747",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153747",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617153754",
        "description": "limit_mg..history.demo04_20230617153754",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617153754",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153754",
        "description": "limit_mg..history.demo04_20230617153754",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table=stars_table.sor\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617153754",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153754",
        "description": "limit_mg..history.demo04_20230617153754",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617153754",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153754",
        "description": "limit_mg..history.demo04_20230617153754",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617153754",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153754",
        "description": "limit_mg..history.demo04_20230617153754",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617153754",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153754",
        "description": "limit_mg..history.demo04_20230617153754",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617153754",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153754",
        "description": "limit_mg..history.demo04_20230617153754",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153754",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153754",
        "description": "limit_mg..history.demo04_20230617153754",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153754",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617153756",
        "description": "limit_mg..history.demo04_20230617153756",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617153756",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153756",
        "description": "limit_mg..history.demo04_20230617153756",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table=stars_table.sort(\"\")\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617153756",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153756",
        "description": "limit_mg..history.demo04_20230617153756",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617153756",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153756",
        "description": "limit_mg..history.demo04_20230617153756",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617153756",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153756",
        "description": "limit_mg..history.demo04_20230617153756",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617153756",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153756",
        "description": "limit_mg..history.demo04_20230617153756",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617153756",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153756",
        "description": "limit_mg..history.demo04_20230617153756",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153756",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153756",
        "description": "limit_mg..history.demo04_20230617153756",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153756",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617153758",
        "description": "limit_mg..history.demo04_20230617153758",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617153758",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153758",
        "description": "limit_mg..history.demo04_20230617153758",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table=stars_table.sort(\"SNR\")\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617153758",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153758",
        "description": "limit_mg..history.demo04_20230617153758",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617153758",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153758",
        "description": "limit_mg..history.demo04_20230617153758",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617153758",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153758",
        "description": "limit_mg..history.demo04_20230617153758",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617153758",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153758",
        "description": "limit_mg..history.demo04_20230617153758",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617153758",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153758",
        "description": "limit_mg..history.demo04_20230617153758",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153758",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153758",
        "description": "limit_mg..history.demo04_20230617153758",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153758",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617153800",
        "description": "limit_mg..history.demo04_20230617153800",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617153800",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153800",
        "description": "limit_mg..history.demo04_20230617153800",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table=stars_table.sort(\"SNR_WIN\")\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617153800",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153800",
        "description": "limit_mg..history.demo04_20230617153800",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617153800",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153800",
        "description": "limit_mg..history.demo04_20230617153800",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617153800",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153800",
        "description": "limit_mg..history.demo04_20230617153800",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617153800",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153800",
        "description": "limit_mg..history.demo04_20230617153800",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617153800",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153800",
        "description": "limit_mg..history.demo04_20230617153800",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153800",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153800",
        "description": "limit_mg..history.demo04_20230617153800",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153800",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617153820",
        "description": "limit_mg..history.demo04_20230617153820",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617153820",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153820",
        "description": "limit_mg..history.demo04_20230617153820",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617153820",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153820",
        "description": "limit_mg..history.demo04_20230617153820",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617153820",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153820",
        "description": "limit_mg..history.demo04_20230617153820",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617153820",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153820",
        "description": "limit_mg..history.demo04_20230617153820",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617153820",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153820",
        "description": "limit_mg..history.demo04_20230617153820",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617153820",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153820",
        "description": "limit_mg..history.demo04_20230617153820",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153820",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153820",
        "description": "limit_mg..history.demo04_20230617153820",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153820",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617153948",
        "description": "limit_mg..history.demo04_20230617153948",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617153948",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153948",
        "description": "limit_mg..history.demo04_20230617153948",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617153948",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153948",
        "description": "limit_mg..history.demo04_20230617153948",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617153948",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153948",
        "description": "limit_mg..history.demo04_20230617153948",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617153948",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153948",
        "description": "limit_mg..history.demo04_20230617153948",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153948",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153948",
        "description": "limit_mg..history.demo04_20230617153948",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153948",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617153956",
        "description": "limit_mg..history.demo04_20230617153956",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617153956",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153956",
        "description": "limit_mg..history.demo04_20230617153956",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617153956",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153956",
        "description": "limit_mg..history.demo04_20230617153956",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617153956",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153956",
        "description": "limit_mg..history.demo04_20230617153956",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617153956",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153956",
        "description": "limit_mg..history.demo04_20230617153956",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153956",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153956",
        "description": "limit_mg..history.demo04_20230617153956",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153956",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617153958",
        "description": "limit_mg..history.demo04_20230617153958",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr, mag,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617153958",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153958",
        "description": "limit_mg..history.demo04_20230617153958",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617153958",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153958",
        "description": "limit_mg..history.demo04_20230617153958",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr, mag,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617153958",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153958",
        "description": "limit_mg..history.demo04_20230617153958",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr, mag,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617153958",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153958",
        "description": "limit_mg..history.demo04_20230617153958",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153958",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617153958",
        "description": "limit_mg..history.demo04_20230617153958",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617153958",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617154004",
        "description": "limit_mg..history.demo04_20230617154004",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617154004",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154004",
        "description": "limit_mg..history.demo04_20230617154004",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617154004",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154004",
        "description": "limit_mg..history.demo04_20230617154004",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617154004",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154004",
        "description": "limit_mg..history.demo04_20230617154004",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617154004",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154004",
        "description": "limit_mg..history.demo04_20230617154004",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154004",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154004",
        "description": "limit_mg..history.demo04_20230617154004",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154004",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617154011",
        "description": "limit_mg..history.demo04_20230617154011",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617154011",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154011",
        "description": "limit_mg..history.demo04_20230617154011",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617154011",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154011",
        "description": "limit_mg..history.demo04_20230617154011",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617154011",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154011",
        "description": "limit_mg..history.demo04_20230617154011",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617154011",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154011",
        "description": "limit_mg..history.demo04_20230617154011",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154011",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154011",
        "description": "limit_mg..history.demo04_20230617154011",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154011",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617154012",
        "description": "limit_mg..history.demo04_20230617154012",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617154012",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154012",
        "description": "limit_mg..history.demo04_20230617154012",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617154012",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154012",
        "description": "limit_mg..history.demo04_20230617154012",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617154012",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154012",
        "description": "limit_mg..history.demo04_20230617154012",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617154012",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154012",
        "description": "limit_mg..history.demo04_20230617154012",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154012",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154012",
        "description": "limit_mg..history.demo04_20230617154012",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154012",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617154036",
        "description": "limit_mg..history.demo04_20230617154036",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617154036",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154036",
        "description": "limit_mg..history.demo04_20230617154036",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['MAG_AUTO_S']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617154036",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154036",
        "description": "limit_mg..history.demo04_20230617154036",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['MAG_AUTO_S']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617154036",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154036",
        "description": "limit_mg..history.demo04_20230617154036",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['MAG_AUTO_S']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617154036",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154036",
        "description": "limit_mg..history.demo04_20230617154036",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154036",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154036",
        "description": "limit_mg..history.demo04_20230617154036",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154036",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617154037",
        "description": "limit_mg..history.demo04_20230617154037",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617154037",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154037",
        "description": "limit_mg..history.demo04_20230617154037",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617154037",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154037",
        "description": "limit_mg..history.demo04_20230617154037",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617154037",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154037",
        "description": "limit_mg..history.demo04_20230617154037",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617154037",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154037",
        "description": "limit_mg..history.demo04_20230617154037",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154037",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154037",
        "description": "limit_mg..history.demo04_20230617154037",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154037",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617154050",
        "description": "limit_mg..history.demo04_20230617154050",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617154050",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154050",
        "description": "limit_mg..history.demo04_20230617154050",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617154050",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154050",
        "description": "limit_mg..history.demo04_20230617154050",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617154050",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154050",
        "description": "limit_mg..history.demo04_20230617154050",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617154050",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154050",
        "description": "limit_mg..history.demo04_20230617154050",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154050",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154050",
        "description": "limit_mg..history.demo04_20230617154050",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154050",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617154054",
        "description": "limit_mg..history.demo04_20230617154054",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617154054",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154054",
        "description": "limit_mg..history.demo04_20230617154054",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<0)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617154054",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154054",
        "description": "limit_mg..history.demo04_20230617154054",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<0)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617154054",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154054",
        "description": "limit_mg..history.demo04_20230617154054",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617154054",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154054",
        "description": "limit_mg..history.demo04_20230617154054",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154054",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154054",
        "description": "limit_mg..history.demo04_20230617154054",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154054",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617154056",
        "description": "limit_mg..history.demo04_20230617154056",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617154056",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154056",
        "description": "limit_mg..history.demo04_20230617154056",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<1000)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617154056",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154056",
        "description": "limit_mg..history.demo04_20230617154056",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<1000)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617154056",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154056",
        "description": "limit_mg..history.demo04_20230617154056",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617154056",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154056",
        "description": "limit_mg..history.demo04_20230617154056",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154056",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154056",
        "description": "limit_mg..history.demo04_20230617154056",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154056",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617154100",
        "description": "limit_mg..history.demo04_20230617154100",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617154100",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154100",
        "description": "limit_mg..history.demo04_20230617154100",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<1000)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<1000)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617154100",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154100",
        "description": "limit_mg..history.demo04_20230617154100",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<1000)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<1000)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617154100",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154100",
        "description": "limit_mg..history.demo04_20230617154100",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<1000)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617154100",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154100",
        "description": "limit_mg..history.demo04_20230617154100",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154100",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154100",
        "description": "limit_mg..history.demo04_20230617154100",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154100",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617154101",
        "description": "limit_mg..history.demo04_20230617154101",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617154101",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154101",
        "description": "limit_mg..history.demo04_20230617154101",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<1000)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<1000)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617154101",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154101",
        "description": "limit_mg..history.demo04_20230617154101",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<1000)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<1000)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617154101",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154101",
        "description": "limit_mg..history.demo04_20230617154101",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<1000)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617154101",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154101",
        "description": "limit_mg..history.demo04_20230617154101",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154101",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154101",
        "description": "limit_mg..history.demo04_20230617154101",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154101",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617154120",
        "description": "limit_mg..history.demo04_20230617154120",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617154120",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154120",
        "description": "limit_mg..history.demo04_20230617154120",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617154120",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154120",
        "description": "limit_mg..history.demo04_20230617154120",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617154120",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154120",
        "description": "limit_mg..history.demo04_20230617154120",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617154120",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154120",
        "description": "limit_mg..history.demo04_20230617154120",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154120",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154120",
        "description": "limit_mg..history.demo04_20230617154120",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154120",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617154856",
        "description": "limit_mg..history.demo04_20230617154856",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617154856",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154856",
        "description": "limit_mg..history.demo04_20230617154856",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617154856",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154856",
        "description": "limit_mg..history.demo04_20230617154856",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617154856",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154856",
        "description": "limit_mg..history.demo04_20230617154856",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617154856",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154856",
        "description": "limit_mg..history.demo04_20230617154856",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154856",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617154856",
        "description": "limit_mg..history.demo04_20230617154856",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617154856",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617160154",
        "description": "limit_mg..history.demo04_20230617160154",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160154",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160154",
        "description": "limit_mg..history.demo04_20230617160154",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):",
        "detail": "limit_mg..history.demo04_20230617160154",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160154",
        "description": "limit_mg..history.demo04_20230617160154",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160154",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160154",
        "description": "limit_mg..history.demo04_20230617160154",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617160154",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160154",
        "description": "limit_mg..history.demo04_20230617160154",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617160154",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160154",
        "description": "limit_mg..history.demo04_20230617160154",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160154",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160154",
        "description": "limit_mg..history.demo04_20230617160154",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160154",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617160215",
        "description": "limit_mg..history.demo04_20230617160215",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160215",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160215",
        "description": "limit_mg..history.demo04_20230617160215",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)",
        "detail": "limit_mg..history.demo04_20230617160215",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160215",
        "description": "limit_mg..history.demo04_20230617160215",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617160215",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160215",
        "description": "limit_mg..history.demo04_20230617160215",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160215",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160215",
        "description": "limit_mg..history.demo04_20230617160215",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617160215",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160215",
        "description": "limit_mg..history.demo04_20230617160215",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617160215",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160215",
        "description": "limit_mg..history.demo04_20230617160215",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160215",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160215",
        "description": "limit_mg..history.demo04_20230617160215",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160215",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617160253",
        "description": "limit_mg..history.demo04_20230617160253",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160253",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160253",
        "description": "limit_mg..history.demo04_20230617160253",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)",
        "detail": "limit_mg..history.demo04_20230617160253",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160253",
        "description": "limit_mg..history.demo04_20230617160253",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617160253",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160253",
        "description": "limit_mg..history.demo04_20230617160253",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160253",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160253",
        "description": "limit_mg..history.demo04_20230617160253",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617160253",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160253",
        "description": "limit_mg..history.demo04_20230617160253",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617160253",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160253",
        "description": "limit_mg..history.demo04_20230617160253",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160253",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160253",
        "description": "limit_mg..history.demo04_20230617160253",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160253",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617160254",
        "description": "limit_mg..history.demo04_20230617160254",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160254",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160254",
        "description": "limit_mg..history.demo04_20230617160254",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)",
        "detail": "limit_mg..history.demo04_20230617160254",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160254",
        "description": "limit_mg..history.demo04_20230617160254",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617160254",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160254",
        "description": "limit_mg..history.demo04_20230617160254",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160254",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160254",
        "description": "limit_mg..history.demo04_20230617160254",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617160254",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160254",
        "description": "limit_mg..history.demo04_20230617160254",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617160254",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160254",
        "description": "limit_mg..history.demo04_20230617160254",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160254",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160254",
        "description": "limit_mg..history.demo04_20230617160254",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160254",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617160255",
        "description": "limit_mg..history.demo04_20230617160255",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160255",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160255",
        "description": "limit_mg..history.demo04_20230617160255",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)",
        "detail": "limit_mg..history.demo04_20230617160255",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160255",
        "description": "limit_mg..history.demo04_20230617160255",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617160255",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160255",
        "description": "limit_mg..history.demo04_20230617160255",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160255",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160255",
        "description": "limit_mg..history.demo04_20230617160255",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617160255",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160255",
        "description": "limit_mg..history.demo04_20230617160255",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617160255",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160255",
        "description": "limit_mg..history.demo04_20230617160255",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160255",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160255",
        "description": "limit_mg..history.demo04_20230617160255",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160255",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617160612",
        "description": "limit_mg..history.demo04_20230617160612",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160612",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160612",
        "description": "limit_mg..history.demo04_20230617160612",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617160612",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160612",
        "description": "limit_mg..history.demo04_20230617160612",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617160612",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160612",
        "description": "limit_mg..history.demo04_20230617160612",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617160612",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160612",
        "description": "limit_mg..history.demo04_20230617160612",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160612",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160612",
        "description": "limit_mg..history.demo04_20230617160612",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160612",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617160613",
        "description": "limit_mg..history.demo04_20230617160613",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160613",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160613",
        "description": "limit_mg..history.demo04_20230617160613",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo04_20230617160613",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160613",
        "description": "limit_mg..history.demo04_20230617160613",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo04_20230617160613",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160613",
        "description": "limit_mg..history.demo04_20230617160613",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo04_20230617160613",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160613",
        "description": "limit_mg..history.demo04_20230617160613",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160613",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160613",
        "description": "limit_mg..history.demo04_20230617160613",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160613",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617160614",
        "description": "limit_mg..history.demo04_20230617160614",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160614",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160614",
        "description": "limit_mg..history.demo04_20230617160614",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo04_20230617160614",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160614",
        "description": "limit_mg..history.demo04_20230617160614",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617160614",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160614",
        "description": "limit_mg..history.demo04_20230617160614",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617160614",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160614",
        "description": "limit_mg..history.demo04_20230617160614",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160614",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617160614",
        "description": "limit_mg..history.demo04_20230617160614",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617160614",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617161126",
        "description": "limit_mg..history.demo04_20230617161126",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617161126",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161126",
        "description": "limit_mg..history.demo04_20230617161126",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = ['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230617161126",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161126",
        "description": "limit_mg..history.demo04_20230617161126",
        "peekOfCode": "snr_sigclip = ['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617161126",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161126",
        "description": "limit_mg..history.demo04_20230617161126",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617161126",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161126",
        "description": "limit_mg..history.demo04_20230617161126",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617161126",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161126",
        "description": "limit_mg..history.demo04_20230617161126",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617161126",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617161128",
        "description": "limit_mg..history.demo04_20230617161128",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617161128",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161128",
        "description": "limit_mg..history.demo04_20230617161128",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = ['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230617161128",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161128",
        "description": "limit_mg..history.demo04_20230617161128",
        "peekOfCode": "snr_sigclip = ['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617161128",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161128",
        "description": "limit_mg..history.demo04_20230617161128",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617161128",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161128",
        "description": "limit_mg..history.demo04_20230617161128",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617161128",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161128",
        "description": "limit_mg..history.demo04_20230617161128",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617161128",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617161131",
        "description": "limit_mg..history.demo04_20230617161131",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617161131",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161131",
        "description": "limit_mg..history.demo04_20230617161131",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230617161131",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161131",
        "description": "limit_mg..history.demo04_20230617161131",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617161131",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161131",
        "description": "limit_mg..history.demo04_20230617161131",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617161131",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161131",
        "description": "limit_mg..history.demo04_20230617161131",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617161131",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161131",
        "description": "limit_mg..history.demo04_20230617161131",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617161131",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo04_20230617161133",
        "description": "limit_mg..history.demo04_20230617161133",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo04_20230617161133",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161133",
        "description": "limit_mg..history.demo04_20230617161133",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo04_20230617161133",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161133",
        "description": "limit_mg..history.demo04_20230617161133",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo04_20230617161133",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161133",
        "description": "limit_mg..history.demo04_20230617161133",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo04_20230617161133",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161133",
        "description": "limit_mg..history.demo04_20230617161133",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617161133",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo04_20230617161133",
        "description": "limit_mg..history.demo04_20230617161133",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo04_20230617161133",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182132",
        "description": "limit_mg..history.demo05_20230616182132",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182132",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182132",
        "description": "limit_mg..history.demo05_20230616182132",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182132",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182132",
        "description": "limit_mg..history.demo05_20230616182132",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182132",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182136",
        "description": "limit_mg..history.demo05_20230616182136",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN'][]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182136",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182136",
        "description": "limit_mg..history.demo05_20230616182136",
        "peekOfCode": "snr = stars_table['SNR_WIN'][]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182136",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182136",
        "description": "limit_mg..history.demo05_20230616182136",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182136",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182144",
        "description": "limit_mg..history.demo05_20230616182144",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182144",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182144",
        "description": "limit_mg..history.demo05_20230616182144",
        "peekOfCode": "snr = stars_table['SNR_WIN']['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182144",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182144",
        "description": "limit_mg..history.demo05_20230616182144",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182144",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182145",
        "description": "limit_mg..history.demo05_20230616182145",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']['SNR_WIN'>4]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182145",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182145",
        "description": "limit_mg..history.demo05_20230616182145",
        "peekOfCode": "snr = stars_table['SNR_WIN']['SNR_WIN'>4]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182145",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182145",
        "description": "limit_mg..history.demo05_20230616182145",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182145",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182146",
        "description": "limit_mg..history.demo05_20230616182146",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']['SNR_WIN'>4.5]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182146",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182146",
        "description": "limit_mg..history.demo05_20230616182146",
        "peekOfCode": "snr = stars_table['SNR_WIN']['SNR_WIN'>4.5]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182146",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182146",
        "description": "limit_mg..history.demo05_20230616182146",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182146",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182150",
        "description": "limit_mg..history.demo05_20230616182150",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']['SNR_WIN'>4.5 & ]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182150",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182150",
        "description": "limit_mg..history.demo05_20230616182150",
        "peekOfCode": "snr = stars_table['SNR_WIN']['SNR_WIN'>4.5 & ]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182150",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182150",
        "description": "limit_mg..history.demo05_20230616182150",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182150",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182153",
        "description": "limit_mg..history.demo05_20230616182153",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']['SNR_WIN'>4.5 & 'SNR_WIN'>4.5]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182153",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182153",
        "description": "limit_mg..history.demo05_20230616182153",
        "peekOfCode": "snr = stars_table['SNR_WIN']['SNR_WIN'>4.5 & 'SNR_WIN'>4.5]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182153",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182153",
        "description": "limit_mg..history.demo05_20230616182153",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182153",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182155",
        "description": "limit_mg..history.demo05_20230616182155",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']['SNR_WIN'>4.5 & 'SNR_WIN'>5.5]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182155",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182155",
        "description": "limit_mg..history.demo05_20230616182155",
        "peekOfCode": "snr = stars_table['SNR_WIN']['SNR_WIN'>4.5 & 'SNR_WIN'>5.5]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182155",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182155",
        "description": "limit_mg..history.demo05_20230616182155",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182155",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182159",
        "description": "limit_mg..history.demo05_20230616182159",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']['SNR_WIN'>4.5 & ('SNR_WIN'>5.5)]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182159",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182159",
        "description": "limit_mg..history.demo05_20230616182159",
        "peekOfCode": "snr = stars_table['SNR_WIN']['SNR_WIN'>4.5 & ('SNR_WIN'>5.5)]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182159",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182159",
        "description": "limit_mg..history.demo05_20230616182159",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182159",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182203",
        "description": "limit_mg..history.demo05_20230616182203",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN'][('SNR_WIN'>4.5) & ('SNR_WIN'>5.5)]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182203",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182203",
        "description": "limit_mg..history.demo05_20230616182203",
        "peekOfCode": "snr = stars_table['SNR_WIN'][('SNR_WIN'>4.5) & ('SNR_WIN'>5.5)]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182203",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182203",
        "description": "limit_mg..history.demo05_20230616182203",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182203",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182213",
        "description": "limit_mg..history.demo05_20230616182213",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN'][('SNR_WIN'>4.5) & ('SNR_WIN'>11.5)]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182213",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182213",
        "description": "limit_mg..history.demo05_20230616182213",
        "peekOfCode": "snr = stars_table['SNR_WIN'][('SNR_WIN'>4.5) & ('SNR_WIN'>11.5)]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182213",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182213",
        "description": "limit_mg..history.demo05_20230616182213",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182213",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182219",
        "description": "limit_mg..history.demo05_20230616182219",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN'][('SNR_WIN'>11.5) & ('SNR_WIN'>11.5)]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182219",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182219",
        "description": "limit_mg..history.demo05_20230616182219",
        "peekOfCode": "snr = stars_table['SNR_WIN'][('SNR_WIN'>11.5) & ('SNR_WIN'>11.5)]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182219",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182219",
        "description": "limit_mg..history.demo05_20230616182219",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182219",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182221",
        "description": "limit_mg..history.demo05_20230616182221",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN'][('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182221",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182221",
        "description": "limit_mg..history.demo05_20230616182221",
        "peekOfCode": "snr = stars_table['SNR_WIN'][('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182221",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182221",
        "description": "limit_mg..history.demo05_20230616182221",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182221",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182222",
        "description": "limit_mg..history.demo05_20230616182222",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN'][('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182222",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182222",
        "description": "limit_mg..history.demo05_20230616182222",
        "peekOfCode": "snr = stars_table['SNR_WIN'][('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182222",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182222",
        "description": "limit_mg..history.demo05_20230616182222",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182222",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182224",
        "description": "limit_mg..history.demo05_20230616182224",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182224",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182224",
        "description": "limit_mg..history.demo05_20230616182224",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182224",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182224",
        "description": "limit_mg..history.demo05_20230616182224",
        "peekOfCode": "mag = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182224",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182226",
        "description": "limit_mg..history.demo05_20230616182226",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182226",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182226",
        "description": "limit_mg..history.demo05_20230616182226",
        "peekOfCode": "snr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182226",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182226",
        "description": "limit_mg..history.demo05_20230616182226",
        "peekOfCode": "mag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182226",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182238",
        "description": "limit_mg..history.demo05_20230616182238",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182238",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182238",
        "description": "limit_mg..history.demo05_20230616182238",
        "peekOfCode": "snr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182238",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182238",
        "description": "limit_mg..history.demo05_20230616182238",
        "peekOfCode": "mag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230616182238",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182240",
        "description": "limit_mg..history.demo05_20230616182240",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nnp.mea",
        "detail": "limit_mg..history.demo05_20230616182240",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182240",
        "description": "limit_mg..history.demo05_20230616182240",
        "peekOfCode": "snr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nnp.mea",
        "detail": "limit_mg..history.demo05_20230616182240",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182240",
        "description": "limit_mg..history.demo05_20230616182240",
        "peekOfCode": "mag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nnp.mea",
        "detail": "limit_mg..history.demo05_20230616182240",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182243",
        "description": "limit_mg..history.demo05_20230616182243",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nnp.median(mag)",
        "detail": "limit_mg..history.demo05_20230616182243",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182243",
        "description": "limit_mg..history.demo05_20230616182243",
        "peekOfCode": "snr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nnp.median(mag)",
        "detail": "limit_mg..history.demo05_20230616182243",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182243",
        "description": "limit_mg..history.demo05_20230616182243",
        "peekOfCode": "mag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nnp.median(mag)",
        "detail": "limit_mg..history.demo05_20230616182243",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182246",
        "description": "limit_mg..history.demo05_20230616182246",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nprint(np.median(mag))",
        "detail": "limit_mg..history.demo05_20230616182246",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182246",
        "description": "limit_mg..history.demo05_20230616182246",
        "peekOfCode": "snr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nprint(np.median(mag))",
        "detail": "limit_mg..history.demo05_20230616182246",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182246",
        "description": "limit_mg..history.demo05_20230616182246",
        "peekOfCode": "mag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nprint(np.median(mag))",
        "detail": "limit_mg..history.demo05_20230616182246",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182300",
        "description": "limit_mg..history.demo05_20230616182300",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182300",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182300",
        "description": "limit_mg..history.demo05_20230616182300",
        "peekOfCode": "snr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182300",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182300",
        "description": "limit_mg..history.demo05_20230616182300",
        "peekOfCode": "mag = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182300",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182313",
        "description": "limit_mg..history.demo05_20230616182313",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[(stars_table'SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182313",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182313",
        "description": "limit_mg..history.demo05_20230616182313",
        "peekOfCode": "snr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[(stars_table'SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182313",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182313",
        "description": "limit_mg..history.demo05_20230616182313",
        "peekOfCode": "mag = stars_table[(stars_table'SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182313",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182318",
        "description": "limit_mg..history.demo05_20230616182318",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182318",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182318",
        "description": "limit_mg..history.demo05_20230616182318",
        "peekOfCode": "snr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182318",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182318",
        "description": "limit_mg..history.demo05_20230616182318",
        "peekOfCode": "mag = stars_table[(stars_table['SNR_WIN']>10.5) & ('SNR_WIN'>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182318",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182325",
        "description": "limit_mg..history.demo05_20230616182325",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']>10.5) & (stars_table['SNR_WIN']>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182325",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182325",
        "description": "limit_mg..history.demo05_20230616182325",
        "peekOfCode": "snr = stars_table[('SNR_WIN'>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']>10.5) & (stars_table['SNR_WIN']>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182325",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182325",
        "description": "limit_mg..history.demo05_20230616182325",
        "peekOfCode": "mag = stars_table[(stars_table['SNR_WIN']>10.5) & (stars_table['SNR_WIN']>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182325",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182326",
        "description": "limit_mg..history.demo05_20230616182326",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['SNR_WIN']>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']>10.5) & (stars_table['SNR_WIN']>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182326",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182326",
        "description": "limit_mg..history.demo05_20230616182326",
        "peekOfCode": "snr = stars_table[(stars_table['SNR_WIN']>10.5) & ('SNR_WIN'>11.5)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']>10.5) & (stars_table['SNR_WIN']>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182326",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182326",
        "description": "limit_mg..history.demo05_20230616182326",
        "peekOfCode": "mag = stars_table[(stars_table['SNR_WIN']>10.5) & (stars_table['SNR_WIN']>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182326",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182328",
        "description": "limit_mg..history.demo05_20230616182328",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['SNR_WIN']>10.5) & (stars_table['SNR_WIN']>11.5)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']>10.5) & (stars_table['SNR_WIN']>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182328",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182328",
        "description": "limit_mg..history.demo05_20230616182328",
        "peekOfCode": "snr = stars_table[(stars_table['SNR_WIN']>10.5) & (stars_table['SNR_WIN']>11.5)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']>10.5) & (stars_table['SNR_WIN']>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182328",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230616182328",
        "description": "limit_mg..history.demo05_20230616182328",
        "peekOfCode": "mag = stars_table[(stars_table['SNR_WIN']>10.5) & (stars_table['SNR_WIN']>11.5)]['MAG_AUTO_S']\nprint(np.median(float(mag)))",
        "detail": "limit_mg..history.demo05_20230616182328",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160246",
        "description": "limit_mg..history.demo05_20230617160246",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160246",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160246",
        "description": "limit_mg..history.demo05_20230617160246",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)",
        "detail": "limit_mg..history.demo05_20230617160246",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160246",
        "description": "limit_mg..history.demo05_20230617160246",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617160246",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160246",
        "description": "limit_mg..history.demo05_20230617160246",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160246",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160246",
        "description": "limit_mg..history.demo05_20230617160246",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160246",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160246",
        "description": "limit_mg..history.demo05_20230617160246",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160246",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160246",
        "description": "limit_mg..history.demo05_20230617160246",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160246",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160246",
        "description": "limit_mg..history.demo05_20230617160246",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160246",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160318",
        "description": "limit_mg..history.demo05_20230617160318",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160318",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160318",
        "description": "limit_mg..history.demo05_20230617160318",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160318",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160318",
        "description": "limit_mg..history.demo05_20230617160318",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160318",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160318",
        "description": "limit_mg..history.demo05_20230617160318",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160318",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160318",
        "description": "limit_mg..history.demo05_20230617160318",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160318",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160318",
        "description": "limit_mg..history.demo05_20230617160318",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160318",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160318",
        "description": "limit_mg..history.demo05_20230617160318",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160318",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160318",
        "description": "limit_mg..history.demo05_20230617160318",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160318",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160322",
        "description": "limit_mg..history.demo05_20230617160322",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160322",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160322",
        "description": "limit_mg..history.demo05_20230617160322",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160322",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160322",
        "description": "limit_mg..history.demo05_20230617160322",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160322",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160322",
        "description": "limit_mg..history.demo05_20230617160322",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160322",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160322",
        "description": "limit_mg..history.demo05_20230617160322",
        "peekOfCode": "snr_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160322",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160322",
        "description": "limit_mg..history.demo05_20230617160322",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160322",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160322",
        "description": "limit_mg..history.demo05_20230617160322",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160322",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160322",
        "description": "limit_mg..history.demo05_20230617160322",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160322",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160328",
        "description": "limit_mg..history.demo05_20230617160328",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160328",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160328",
        "description": "limit_mg..history.demo05_20230617160328",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160328",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160328",
        "description": "limit_mg..history.demo05_20230617160328",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160328",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160328",
        "description": "limit_mg..history.demo05_20230617160328",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160328",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160328",
        "description": "limit_mg..history.demo05_20230617160328",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160328",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160328",
        "description": "limit_mg..history.demo05_20230617160328",
        "peekOfCode": "mag_sigclip = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160328",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160328",
        "description": "limit_mg..history.demo05_20230617160328",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160328",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160328",
        "description": "limit_mg..history.demo05_20230617160328",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160328",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160330",
        "description": "limit_mg..history.demo05_20230617160330",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160330",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160330",
        "description": "limit_mg..history.demo05_20230617160330",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160330",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160330",
        "description": "limit_mg..history.demo05_20230617160330",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160330",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160330",
        "description": "limit_mg..history.demo05_20230617160330",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160330",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160330",
        "description": "limit_mg..history.demo05_20230617160330",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160330",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160330",
        "description": "limit_mg..history.demo05_20230617160330",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160330",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160330",
        "description": "limit_mg..history.demo05_20230617160330",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160330",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160330",
        "description": "limit_mg..history.demo05_20230617160330",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160330",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160336",
        "description": "limit_mg..history.demo05_20230617160336",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160336",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160336",
        "description": "limit_mg..history.demo05_20230617160336",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160336",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160336",
        "description": "limit_mg..history.demo05_20230617160336",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160336",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160336",
        "description": "limit_mg..history.demo05_20230617160336",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160336",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160336",
        "description": "limit_mg..history.demo05_20230617160336",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160336",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160336",
        "description": "limit_mg..history.demo05_20230617160336",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160336",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160336",
        "description": "limit_mg..history.demo05_20230617160336",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160336",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160336",
        "description": "limit_mg..history.demo05_20230617160336",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160336",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160337",
        "description": "limit_mg..history.demo05_20230617160337",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160337",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160337",
        "description": "limit_mg..history.demo05_20230617160337",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~sigclip_mask)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160337",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160337",
        "description": "limit_mg..history.demo05_20230617160337",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~sigclip_mask)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160337",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160337",
        "description": "limit_mg..history.demo05_20230617160337",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~sigclip_mask)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160337",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160337",
        "description": "limit_mg..history.demo05_20230617160337",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160337",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160337",
        "description": "limit_mg..history.demo05_20230617160337",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160337",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160337",
        "description": "limit_mg..history.demo05_20230617160337",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160337",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160337",
        "description": "limit_mg..history.demo05_20230617160337",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160337",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160339",
        "description": "limit_mg..history.demo05_20230617160339",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160339",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160339",
        "description": "limit_mg..history.demo05_20230617160339",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~sigclip_mask)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160339",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160339",
        "description": "limit_mg..history.demo05_20230617160339",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~sigclip_mask)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160339",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160339",
        "description": "limit_mg..history.demo05_20230617160339",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~sigclip_mask)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160339",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160339",
        "description": "limit_mg..history.demo05_20230617160339",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160339",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160339",
        "description": "limit_mg..history.demo05_20230617160339",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160339",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160339",
        "description": "limit_mg..history.demo05_20230617160339",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160339",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160339",
        "description": "limit_mg..history.demo05_20230617160339",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160339",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160342",
        "description": "limit_mg..history.demo05_20230617160342",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160342",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160342",
        "description": "limit_mg..history.demo05_20230617160342",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160342",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160342",
        "description": "limit_mg..history.demo05_20230617160342",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160342",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160342",
        "description": "limit_mg..history.demo05_20230617160342",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160342",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160342",
        "description": "limit_mg..history.demo05_20230617160342",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160342",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160342",
        "description": "limit_mg..history.demo05_20230617160342",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160342",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160342",
        "description": "limit_mg..history.demo05_20230617160342",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160342",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160342",
        "description": "limit_mg..history.demo05_20230617160342",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160342",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160343",
        "description": "limit_mg..history.demo05_20230617160343",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160343",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160343",
        "description": "limit_mg..history.demo05_20230617160343",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160343",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160343",
        "description": "limit_mg..history.demo05_20230617160343",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160343",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160343",
        "description": "limit_mg..history.demo05_20230617160343",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & ~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160343",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160343",
        "description": "limit_mg..history.demo05_20230617160343",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160343",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160343",
        "description": "limit_mg..history.demo05_20230617160343",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160343",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160343",
        "description": "limit_mg..history.demo05_20230617160343",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160343",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160343",
        "description": "limit_mg..history.demo05_20230617160343",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160343",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160412",
        "description": "limit_mg..history.demo05_20230617160412",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160412",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160412",
        "description": "limit_mg..history.demo05_20230617160412",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) &~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160412",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160412",
        "description": "limit_mg..history.demo05_20230617160412",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) &~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160412",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160412",
        "description": "limit_mg..history.demo05_20230617160412",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) &~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160412",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160412",
        "description": "limit_mg..history.demo05_20230617160412",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160412",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160412",
        "description": "limit_mg..history.demo05_20230617160412",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160412",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160412",
        "description": "limit_mg..history.demo05_20230617160412",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160412",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160412",
        "description": "limit_mg..history.demo05_20230617160412",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160412",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160413",
        "description": "limit_mg..history.demo05_20230617160413",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160413",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160413",
        "description": "limit_mg..history.demo05_20230617160413",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160413",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160413",
        "description": "limit_mg..history.demo05_20230617160413",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160413",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160413",
        "description": "limit_mg..history.demo05_20230617160413",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160413",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160413",
        "description": "limit_mg..history.demo05_20230617160413",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160413",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160413",
        "description": "limit_mg..history.demo05_20230617160413",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160413",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160413",
        "description": "limit_mg..history.demo05_20230617160413",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160413",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160413",
        "description": "limit_mg..history.demo05_20230617160413",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160413",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160414",
        "description": "limit_mg..history.demo05_20230617160414",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160414",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160414",
        "description": "limit_mg..history.demo05_20230617160414",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160414",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160414",
        "description": "limit_mg..history.demo05_20230617160414",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160414",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160414",
        "description": "limit_mg..history.demo05_20230617160414",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160414",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160414",
        "description": "limit_mg..history.demo05_20230617160414",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160414",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160414",
        "description": "limit_mg..history.demo05_20230617160414",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160414",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160414",
        "description": "limit_mg..history.demo05_20230617160414",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160414",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160414",
        "description": "limit_mg..history.demo05_20230617160414",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160414",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160449",
        "description": "limit_mg..history.demo05_20230617160449",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160449",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160449",
        "description": "limit_mg..history.demo05_20230617160449",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160449",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160449",
        "description": "limit_mg..history.demo05_20230617160449",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160449",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160449",
        "description": "limit_mg..history.demo05_20230617160449",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160449",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160449",
        "description": "limit_mg..history.demo05_20230617160449",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160449",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160449",
        "description": "limit_mg..history.demo05_20230617160449",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160449",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160449",
        "description": "limit_mg..history.demo05_20230617160449",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160449",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160449",
        "description": "limit_mg..history.demo05_20230617160449",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160449",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160500",
        "description": "limit_mg..history.demo05_20230617160500",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160500",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160500",
        "description": "limit_mg..history.demo05_20230617160500",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160500",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160500",
        "description": "limit_mg..history.demo05_20230617160500",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160500",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160500",
        "description": "limit_mg..history.demo05_20230617160500",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160500",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160500",
        "description": "limit_mg..history.demo05_20230617160500",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160500",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160500",
        "description": "limit_mg..history.demo05_20230617160500",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160500",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160500",
        "description": "limit_mg..history.demo05_20230617160500",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160500",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160500",
        "description": "limit_mg..history.demo05_20230617160500",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160500",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160513",
        "description": "limit_mg..history.demo05_20230617160513",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160513",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160513",
        "description": "limit_mg..history.demo05_20230617160513",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160513",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160513",
        "description": "limit_mg..history.demo05_20230617160513",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160513",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160513",
        "description": "limit_mg..history.demo05_20230617160513",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160513",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160513",
        "description": "limit_mg..history.demo05_20230617160513",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160513",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160513",
        "description": "limit_mg..history.demo05_20230617160513",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160513",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160513",
        "description": "limit_mg..history.demo05_20230617160513",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160513",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160513",
        "description": "limit_mg..history.demo05_20230617160513",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160513",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160521",
        "description": "limit_mg..history.demo05_20230617160521",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160521",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160521",
        "description": "limit_mg..history.demo05_20230617160521",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160521",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160521",
        "description": "limit_mg..history.demo05_20230617160521",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160521",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160521",
        "description": "limit_mg..history.demo05_20230617160521",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160521",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160521",
        "description": "limit_mg..history.demo05_20230617160521",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160521",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160521",
        "description": "limit_mg..history.demo05_20230617160521",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160521",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160521",
        "description": "limit_mg..history.demo05_20230617160521",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160521",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160521",
        "description": "limit_mg..history.demo05_20230617160521",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160521",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160522",
        "description": "limit_mg..history.demo05_20230617160522",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160522",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160522",
        "description": "limit_mg..history.demo05_20230617160522",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617160522",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160522",
        "description": "limit_mg..history.demo05_20230617160522",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617160522",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160522",
        "description": "limit_mg..history.demo05_20230617160522",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617160522",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160522",
        "description": "limit_mg..history.demo05_20230617160522",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160522",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160522",
        "description": "limit_mg..history.demo05_20230617160522",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160522",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160522",
        "description": "limit_mg..history.demo05_20230617160522",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160522",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160522",
        "description": "limit_mg..history.demo05_20230617160522",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160522",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160531",
        "description": "limit_mg..history.demo05_20230617160531",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160531",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160531",
        "description": "limit_mg..history.demo05_20230617160531",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617160531",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160531",
        "description": "limit_mg..history.demo05_20230617160531",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):",
        "detail": "limit_mg..history.demo05_20230617160531",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160531",
        "description": "limit_mg..history.demo05_20230617160531",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617160531",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160531",
        "description": "limit_mg..history.demo05_20230617160531",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160531",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160531",
        "description": "limit_mg..history.demo05_20230617160531",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160531",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160531",
        "description": "limit_mg..history.demo05_20230617160531",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160531",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160531",
        "description": "limit_mg..history.demo05_20230617160531",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160531",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160534",
        "description": "limit_mg..history.demo05_20230617160534",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160534",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160534",
        "description": "limit_mg..history.demo05_20230617160534",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617160534",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160534",
        "description": "limit_mg..history.demo05_20230617160534",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):",
        "detail": "limit_mg..history.demo05_20230617160534",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160534",
        "description": "limit_mg..history.demo05_20230617160534",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617160534",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160534",
        "description": "limit_mg..history.demo05_20230617160534",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160534",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160534",
        "description": "limit_mg..history.demo05_20230617160534",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160534",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160534",
        "description": "limit_mg..history.demo05_20230617160534",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160534",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160534",
        "description": "limit_mg..history.demo05_20230617160534",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160534",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160537",
        "description": "limit_mg..history.demo05_20230617160537",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160537",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160537",
        "description": "limit_mg..history.demo05_20230617160537",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617160537",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160537",
        "description": "limit_mg..history.demo05_20230617160537",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):",
        "detail": "limit_mg..history.demo05_20230617160537",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160537",
        "description": "limit_mg..history.demo05_20230617160537",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617160537",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160537",
        "description": "limit_mg..history.demo05_20230617160537",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160537",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160537",
        "description": "limit_mg..history.demo05_20230617160537",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160537",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160537",
        "description": "limit_mg..history.demo05_20230617160537",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160537",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160537",
        "description": "limit_mg..history.demo05_20230617160537",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160537",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160545",
        "description": "limit_mg..history.demo05_20230617160545",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160545",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160545",
        "description": "limit_mg..history.demo05_20230617160545",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617160545",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160545",
        "description": "limit_mg..history.demo05_20230617160545",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):",
        "detail": "limit_mg..history.demo05_20230617160545",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160545",
        "description": "limit_mg..history.demo05_20230617160545",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617160545",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160545",
        "description": "limit_mg..history.demo05_20230617160545",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617160545",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160545",
        "description": "limit_mg..history.demo05_20230617160545",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617160545",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160545",
        "description": "limit_mg..history.demo05_20230617160545",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160545",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160545",
        "description": "limit_mg..history.demo05_20230617160545",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160545",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160604",
        "description": "limit_mg..history.demo05_20230617160604",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160604",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160604",
        "description": "limit_mg..history.demo05_20230617160604",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617160604",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160604",
        "description": "limit_mg..history.demo05_20230617160604",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617160604",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160604",
        "description": "limit_mg..history.demo05_20230617160604",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160604",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160604",
        "description": "limit_mg..history.demo05_20230617160604",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo05_20230617160604",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160604",
        "description": "limit_mg..history.demo05_20230617160604",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo05_20230617160604",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160604",
        "description": "limit_mg..history.demo05_20230617160604",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160604",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160604",
        "description": "limit_mg..history.demo05_20230617160604",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160604",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160728",
        "description": "limit_mg..history.demo05_20230617160728",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160728",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160728",
        "description": "limit_mg..history.demo05_20230617160728",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617160728",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160728",
        "description": "limit_mg..history.demo05_20230617160728",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617160728",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160728",
        "description": "limit_mg..history.demo05_20230617160728",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160728",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160728",
        "description": "limit_mg..history.demo05_20230617160728",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo05_20230617160728",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160728",
        "description": "limit_mg..history.demo05_20230617160728",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo05_20230617160728",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160728",
        "description": "limit_mg..history.demo05_20230617160728",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160728",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160728",
        "description": "limit_mg..history.demo05_20230617160728",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160728",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617160729",
        "description": "limit_mg..history.demo05_20230617160729",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160729",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160729",
        "description": "limit_mg..history.demo05_20230617160729",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617160729",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160729",
        "description": "limit_mg..history.demo05_20230617160729",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617160729",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160729",
        "description": "limit_mg..history.demo05_20230617160729",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617160729",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160729",
        "description": "limit_mg..history.demo05_20230617160729",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo05_20230617160729",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160729",
        "description": "limit_mg..history.demo05_20230617160729",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo05_20230617160729",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160729",
        "description": "limit_mg..history.demo05_20230617160729",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160729",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617160729",
        "description": "limit_mg..history.demo05_20230617160729",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617160729",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161431",
        "description": "limit_mg..history.demo05_20230617161431",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617161431",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161431",
        "description": "limit_mg..history.demo05_20230617161431",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161431",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161431",
        "description": "limit_mg..history.demo05_20230617161431",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617161431",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161431",
        "description": "limit_mg..history.demo05_20230617161431",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数",
        "detail": "limit_mg..history.demo05_20230617161431",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161431",
        "description": "limit_mg..history.demo05_20230617161431",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c",
        "detail": "limit_mg..history.demo05_20230617161431",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161431",
        "description": "limit_mg..history.demo05_20230617161431",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161431",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161431",
        "description": "limit_mg..history.demo05_20230617161431",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617161431",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161431",
        "description": "limit_mg..history.demo05_20230617161431",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161431",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161431",
        "description": "limit_mg..history.demo05_20230617161431",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161431",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161433",
        "description": "limit_mg..history.demo05_20230617161433",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617161433",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161433",
        "description": "limit_mg..history.demo05_20230617161433",
        "peekOfCode": "def magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161433",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161433",
        "description": "limit_mg..history.demo05_20230617161433",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617161433",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161433",
        "description": "limit_mg..history.demo05_20230617161433",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数",
        "detail": "limit_mg..history.demo05_20230617161433",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161433",
        "description": "limit_mg..history.demo05_20230617161433",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c",
        "detail": "limit_mg..history.demo05_20230617161433",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161433",
        "description": "limit_mg..history.demo05_20230617161433",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161433",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161433",
        "description": "limit_mg..history.demo05_20230617161433",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617161433",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161433",
        "description": "limit_mg..history.demo05_20230617161433",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161433",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161433",
        "description": "limit_mg..history.demo05_20230617161433",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161433",
        "documentation": {}
    },
    {
        "label": "magsnr_1",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161434",
        "description": "limit_mg..history.demo05_20230617161434",
        "peekOfCode": "def magsnr_1(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617161434",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161434",
        "description": "limit_mg..history.demo05_20230617161434",
        "peekOfCode": "def magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161434",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161434",
        "description": "limit_mg..history.demo05_20230617161434",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617161434",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161434",
        "description": "limit_mg..history.demo05_20230617161434",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr_1(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数",
        "detail": "limit_mg..history.demo05_20230617161434",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161434",
        "description": "limit_mg..history.demo05_20230617161434",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr_1(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c",
        "detail": "limit_mg..history.demo05_20230617161434",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161434",
        "description": "limit_mg..history.demo05_20230617161434",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr_1(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161434",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161434",
        "description": "limit_mg..history.demo05_20230617161434",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr_1(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617161434",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161434",
        "description": "limit_mg..history.demo05_20230617161434",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161434",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161434",
        "description": "limit_mg..history.demo05_20230617161434",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161434",
        "documentation": {}
    },
    {
        "label": "magsnr_1",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161435",
        "description": "limit_mg..history.demo05_20230617161435",
        "peekOfCode": "def magsnr_1(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617161435",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161435",
        "description": "limit_mg..history.demo05_20230617161435",
        "peekOfCode": "def magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161435",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161435",
        "description": "limit_mg..history.demo05_20230617161435",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617161435",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161435",
        "description": "limit_mg..history.demo05_20230617161435",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr_1(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数",
        "detail": "limit_mg..history.demo05_20230617161435",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161435",
        "description": "limit_mg..history.demo05_20230617161435",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr_1(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c",
        "detail": "limit_mg..history.demo05_20230617161435",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161435",
        "description": "limit_mg..history.demo05_20230617161435",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr_1(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161435",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161435",
        "description": "limit_mg..history.demo05_20230617161435",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr_1(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 定义指数函数\ndef magsnr(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617161435",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161435",
        "description": "limit_mg..history.demo05_20230617161435",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161435",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161435",
        "description": "limit_mg..history.demo05_20230617161435",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161435",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161457",
        "description": "limit_mg..history.demo05_20230617161457",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161457",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161457",
        "description": "limit_mg..history.demo05_20230617161457",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617161457",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161457",
        "description": "limit_mg..history.demo05_20230617161457",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617161457",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161457",
        "description": "limit_mg..history.demo05_20230617161457",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161457",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161457",
        "description": "limit_mg..history.demo05_20230617161457",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo05_20230617161457",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161457",
        "description": "limit_mg..history.demo05_20230617161457",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo05_20230617161457",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161457",
        "description": "limit_mg..history.demo05_20230617161457",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161457",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161457",
        "description": "limit_mg..history.demo05_20230617161457",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161457",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161612",
        "description": "limit_mg..history.demo05_20230617161612",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161612",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161612",
        "description": "limit_mg..history.demo05_20230617161612",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617161612",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161612",
        "description": "limit_mg..history.demo05_20230617161612",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617161612",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161612",
        "description": "limit_mg..history.demo05_20230617161612",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161612",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161612",
        "description": "limit_mg..history.demo05_20230617161612",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo05_20230617161612",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161612",
        "description": "limit_mg..history.demo05_20230617161612",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo05_20230617161612",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161612",
        "description": "limit_mg..history.demo05_20230617161612",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161612",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161612",
        "description": "limit_mg..history.demo05_20230617161612",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161612",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161613",
        "description": "limit_mg..history.demo05_20230617161613",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161613",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161613",
        "description": "limit_mg..history.demo05_20230617161613",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617161613",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161613",
        "description": "limit_mg..history.demo05_20230617161613",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617161613",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161613",
        "description": "limit_mg..history.demo05_20230617161613",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161613",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161613",
        "description": "limit_mg..history.demo05_20230617161613",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo05_20230617161613",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161613",
        "description": "limit_mg..history.demo05_20230617161613",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo05_20230617161613",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161613",
        "description": "limit_mg..history.demo05_20230617161613",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161613",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161613",
        "description": "limit_mg..history.demo05_20230617161613",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161613",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161621",
        "description": "limit_mg..history.demo05_20230617161621",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161621",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161621",
        "description": "limit_mg..history.demo05_20230617161621",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617161621",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161621",
        "description": "limit_mg..history.demo05_20230617161621",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617161621",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161621",
        "description": "limit_mg..history.demo05_20230617161621",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161621",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161621",
        "description": "limit_mg..history.demo05_20230617161621",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo05_20230617161621",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161621",
        "description": "limit_mg..history.demo05_20230617161621",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo05_20230617161621",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161621",
        "description": "limit_mg..history.demo05_20230617161621",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161621",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161621",
        "description": "limit_mg..history.demo05_20230617161621",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161621",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617161634",
        "description": "limit_mg..history.demo05_20230617161634",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161634",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161634",
        "description": "limit_mg..history.demo05_20230617161634",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617161634",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161634",
        "description": "limit_mg..history.demo05_20230617161634",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617161634",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161634",
        "description": "limit_mg..history.demo05_20230617161634",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617161634",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161634",
        "description": "limit_mg..history.demo05_20230617161634",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo05_20230617161634",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161634",
        "description": "limit_mg..history.demo05_20230617161634",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo05_20230617161634",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161634",
        "description": "limit_mg..history.demo05_20230617161634",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161634",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617161634",
        "description": "limit_mg..history.demo05_20230617161634",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617161634",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617162247",
        "description": "limit_mg..history.demo05_20230617162247",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617162247",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162247",
        "description": "limit_mg..history.demo05_20230617162247",
        "peekOfCode": "stars_table = Table.read('mb_sc_tngc6946_v_20230602205650_242_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.demo05_20230617162247",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162247",
        "description": "limit_mg..history.demo05_20230617162247",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo05_20230617162247",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162247",
        "description": "limit_mg..history.demo05_20230617162247",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo05_20230617162247",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162247",
        "description": "limit_mg..history.demo05_20230617162247",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo05_20230617162247",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162247",
        "description": "limit_mg..history.demo05_20230617162247",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo05_20230617162247",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162247",
        "description": "limit_mg..history.demo05_20230617162247",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617162247",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162247",
        "description": "limit_mg..history.demo05_20230617162247",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617162247",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617162309",
        "description": "limit_mg..history.demo05_20230617162309",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617162309",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162309",
        "description": "limit_mg..history.demo05_20230617162309",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617162309",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162309",
        "description": "limit_mg..history.demo05_20230617162309",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617162309",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162309",
        "description": "limit_mg..history.demo05_20230617162309",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617162309",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162309",
        "description": "limit_mg..history.demo05_20230617162309",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617162309",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162309",
        "description": "limit_mg..history.demo05_20230617162309",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617162309",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162309",
        "description": "limit_mg..history.demo05_20230617162309",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617162309",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162309",
        "description": "limit_mg..history.demo05_20230617162309",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617162309",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617162315",
        "description": "limit_mg..history.demo05_20230617162315",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617162315",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162315",
        "description": "limit_mg..history.demo05_20230617162315",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617162315",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162315",
        "description": "limit_mg..history.demo05_20230617162315",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo05_20230617162315",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162315",
        "description": "limit_mg..history.demo05_20230617162315",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo05_20230617162315",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162315",
        "description": "limit_mg..history.demo05_20230617162315",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617162315",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162315",
        "description": "limit_mg..history.demo05_20230617162315",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617162315",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617162321",
        "description": "limit_mg..history.demo05_20230617162321",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617162321",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162321",
        "description": "limit_mg..history.demo05_20230617162321",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617162321",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162321",
        "description": "limit_mg..history.demo05_20230617162321",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617162321",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162321",
        "description": "limit_mg..history.demo05_20230617162321",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=5).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617162321",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162321",
        "description": "limit_mg..history.demo05_20230617162321",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617162321",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162321",
        "description": "limit_mg..history.demo05_20230617162321",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617162321",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162321",
        "description": "limit_mg..history.demo05_20230617162321",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617162321",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162321",
        "description": "limit_mg..history.demo05_20230617162321",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617162321",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617162324",
        "description": "limit_mg..history.demo05_20230617162324",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617162324",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162324",
        "description": "limit_mg..history.demo05_20230617162324",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617162324",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162324",
        "description": "limit_mg..history.demo05_20230617162324",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617162324",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162324",
        "description": "limit_mg..history.demo05_20230617162324",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617162324",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162324",
        "description": "limit_mg..history.demo05_20230617162324",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617162324",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162324",
        "description": "limit_mg..history.demo05_20230617162324",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617162324",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162324",
        "description": "limit_mg..history.demo05_20230617162324",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617162324",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162324",
        "description": "limit_mg..history.demo05_20230617162324",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617162324",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo05_20230617162326",
        "description": "limit_mg..history.demo05_20230617162326",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo05_20230617162326",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162326",
        "description": "limit_mg..history.demo05_20230617162326",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg..history.demo05_20230617162326",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162326",
        "description": "limit_mg..history.demo05_20230617162326",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo05_20230617162326",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162326",
        "description": "limit_mg..history.demo05_20230617162326",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo05_20230617162326",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162326",
        "description": "limit_mg..history.demo05_20230617162326",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo05_20230617162326",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162326",
        "description": "limit_mg..history.demo05_20230617162326",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo05_20230617162326",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162326",
        "description": "limit_mg..history.demo05_20230617162326",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617162326",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo05_20230617162326",
        "description": "limit_mg..history.demo05_20230617162326",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo05_20230617162326",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo06_20230616191333",
        "description": "limit_mg..history.demo06_20230616191333",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191333",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191333",
        "description": "limit_mg..history.demo06_20230616191333",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo06_20230616191333",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191333",
        "description": "limit_mg..history.demo06_20230616191333",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191333",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191333",
        "description": "limit_mg..history.demo06_20230616191333",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191333",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191333",
        "description": "limit_mg..history.demo06_20230616191333",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo06_20230616191333",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191333",
        "description": "limit_mg..history.demo06_20230616191333",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616191333",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191333",
        "description": "limit_mg..history.demo06_20230616191333",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191333",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191333",
        "description": "limit_mg..history.demo06_20230616191333",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191333",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191549",
        "description": "limit_mg..history.demo06_20230616191549",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191549",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191549",
        "description": "limit_mg..history.demo06_20230616191549",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr, mag)\n# 预测新数据",
        "detail": "limit_mg..history.demo06_20230616191549",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191549",
        "description": "limit_mg..history.demo06_20230616191549",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr, mag)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值",
        "detail": "limit_mg..history.demo06_20230616191549",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191549",
        "description": "limit_mg..history.demo06_20230616191549",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr, mag)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191549",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191549",
        "description": "limit_mg..history.demo06_20230616191549",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr, mag)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191549",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191549",
        "description": "limit_mg..history.demo06_20230616191549",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr, mag)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo06_20230616191549",
        "documentation": {}
    },
    {
        "label": "new_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191549",
        "description": "limit_mg..history.demo06_20230616191549",
        "peekOfCode": "new_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)",
        "detail": "limit_mg..history.demo06_20230616191549",
        "documentation": {}
    },
    {
        "label": "new_mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191549",
        "description": "limit_mg..history.demo06_20230616191549",
        "peekOfCode": "new_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191549",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191549",
        "description": "limit_mg..history.demo06_20230616191549",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191549",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191549",
        "description": "limit_mg..history.demo06_20230616191549",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191549",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191552",
        "description": "limit_mg..history.demo06_20230616191552",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191552",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191552",
        "description": "limit_mg..history.demo06_20230616191552",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag)\n# 预测新数据",
        "detail": "limit_mg..history.demo06_20230616191552",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191552",
        "description": "limit_mg..history.demo06_20230616191552",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值",
        "detail": "limit_mg..history.demo06_20230616191552",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191552",
        "description": "limit_mg..history.demo06_20230616191552",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191552",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191552",
        "description": "limit_mg..history.demo06_20230616191552",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191552",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191552",
        "description": "limit_mg..history.demo06_20230616191552",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo06_20230616191552",
        "documentation": {}
    },
    {
        "label": "new_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191552",
        "description": "limit_mg..history.demo06_20230616191552",
        "peekOfCode": "new_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)",
        "detail": "limit_mg..history.demo06_20230616191552",
        "documentation": {}
    },
    {
        "label": "new_mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191552",
        "description": "limit_mg..history.demo06_20230616191552",
        "peekOfCode": "new_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191552",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191552",
        "description": "limit_mg..history.demo06_20230616191552",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191552",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191552",
        "description": "limit_mg..history.demo06_20230616191552",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191552",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191555",
        "description": "limit_mg..history.demo06_20230616191555",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191555",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191555",
        "description": "limit_mg..history.demo06_20230616191555",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\n# 预测新数据",
        "detail": "limit_mg..history.demo06_20230616191555",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191555",
        "description": "limit_mg..history.demo06_20230616191555",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值",
        "detail": "limit_mg..history.demo06_20230616191555",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191555",
        "description": "limit_mg..history.demo06_20230616191555",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191555",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191555",
        "description": "limit_mg..history.demo06_20230616191555",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191555",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191555",
        "description": "limit_mg..history.demo06_20230616191555",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo06_20230616191555",
        "documentation": {}
    },
    {
        "label": "new_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191555",
        "description": "limit_mg..history.demo06_20230616191555",
        "peekOfCode": "new_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)",
        "detail": "limit_mg..history.demo06_20230616191555",
        "documentation": {}
    },
    {
        "label": "new_mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191555",
        "description": "limit_mg..history.demo06_20230616191555",
        "peekOfCode": "new_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191555",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191555",
        "description": "limit_mg..history.demo06_20230616191555",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191555",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191555",
        "description": "limit_mg..history.demo06_20230616191555",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191555",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191556",
        "description": "limit_mg..history.demo06_20230616191556",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191556",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191556",
        "description": "limit_mg..history.demo06_20230616191556",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\n# 预测新数据",
        "detail": "limit_mg..history.demo06_20230616191556",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191556",
        "description": "limit_mg..history.demo06_20230616191556",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值",
        "detail": "limit_mg..history.demo06_20230616191556",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191556",
        "description": "limit_mg..history.demo06_20230616191556",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191556",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191556",
        "description": "limit_mg..history.demo06_20230616191556",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191556",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191556",
        "description": "limit_mg..history.demo06_20230616191556",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\n# 预测新数据\nnew_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo06_20230616191556",
        "documentation": {}
    },
    {
        "label": "new_snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191556",
        "description": "limit_mg..history.demo06_20230616191556",
        "peekOfCode": "new_snr = [[5], [6], [7]]  # 新的SNR_WIN值\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)",
        "detail": "limit_mg..history.demo06_20230616191556",
        "documentation": {}
    },
    {
        "label": "new_mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191556",
        "description": "limit_mg..history.demo06_20230616191556",
        "peekOfCode": "new_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191556",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191556",
        "description": "limit_mg..history.demo06_20230616191556",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191556",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191556",
        "description": "limit_mg..history.demo06_20230616191556",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191556",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191600",
        "description": "limit_mg..history.demo06_20230616191600",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191600",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191600",
        "description": "limit_mg..history.demo06_20230616191600",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(new_snr)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191600",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191600",
        "description": "limit_mg..history.demo06_20230616191600",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191600",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191600",
        "description": "limit_mg..history.demo06_20230616191600",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191600",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191600",
        "description": "limit_mg..history.demo06_20230616191600",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191600",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191600",
        "description": "limit_mg..history.demo06_20230616191600",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191600",
        "documentation": {}
    },
    {
        "label": "new_mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191600",
        "description": "limit_mg..history.demo06_20230616191600",
        "peekOfCode": "new_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191600",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191600",
        "description": "limit_mg..history.demo06_20230616191600",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191600",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191600",
        "description": "limit_mg..history.demo06_20230616191600",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191600",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191601",
        "description": "limit_mg..history.demo06_20230616191601",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191601",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191601",
        "description": "limit_mg..history.demo06_20230616191601",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(new_snr)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191601",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191601",
        "description": "limit_mg..history.demo06_20230616191601",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191601",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191601",
        "description": "limit_mg..history.demo06_20230616191601",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191601",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191601",
        "description": "limit_mg..history.demo06_20230616191601",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191601",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191601",
        "description": "limit_mg..history.demo06_20230616191601",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191601",
        "documentation": {}
    },
    {
        "label": "new_mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191601",
        "description": "limit_mg..history.demo06_20230616191601",
        "peekOfCode": "new_mag = model.predict(new_snr)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191601",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191601",
        "description": "limit_mg..history.demo06_20230616191601",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191601",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191601",
        "description": "limit_mg..history.demo06_20230616191601",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191601",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191605",
        "description": "limit_mg..history.demo06_20230616191605",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191605",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191605",
        "description": "limit_mg..history.demo06_20230616191605",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191605",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191605",
        "description": "limit_mg..history.demo06_20230616191605",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191605",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191605",
        "description": "limit_mg..history.demo06_20230616191605",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191605",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191605",
        "description": "limit_mg..history.demo06_20230616191605",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191605",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191605",
        "description": "limit_mg..history.demo06_20230616191605",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nnew_mag = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191605",
        "documentation": {}
    },
    {
        "label": "new_mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191605",
        "description": "limit_mg..history.demo06_20230616191605",
        "peekOfCode": "new_mag = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191605",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191605",
        "description": "limit_mg..history.demo06_20230616191605",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191605",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191605",
        "description": "limit_mg..history.demo06_20230616191605",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191605",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191616",
        "description": "limit_mg..history.demo06_20230616191616",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191616",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191616",
        "description": "limit_mg..history.demo06_20230616191616",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191616",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191616",
        "description": "limit_mg..history.demo06_20230616191616",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191616",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191616",
        "description": "limit_mg..history.demo06_20230616191616",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191616",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191616",
        "description": "limit_mg..history.demo06_20230616191616",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191616",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191616",
        "description": "limit_mg..history.demo06_20230616191616",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191616",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191616",
        "description": "limit_mg..history.demo06_20230616191616",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191616",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191616",
        "description": "limit_mg..history.demo06_20230616191616",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191616",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191616",
        "description": "limit_mg..history.demo06_20230616191616",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191616",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191624",
        "description": "limit_mg..history.demo06_20230616191624",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191624",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191624",
        "description": "limit_mg..history.demo06_20230616191624",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191624",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191624",
        "description": "limit_mg..history.demo06_20230616191624",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191624",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191624",
        "description": "limit_mg..history.demo06_20230616191624",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191624",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191624",
        "description": "limit_mg..history.demo06_20230616191624",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191624",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191624",
        "description": "limit_mg..history.demo06_20230616191624",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191624",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191624",
        "description": "limit_mg..history.demo06_20230616191624",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191624",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191624",
        "description": "limit_mg..history.demo06_20230616191624",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191624",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191624",
        "description": "limit_mg..history.demo06_20230616191624",
        "peekOfCode": "y = model.predict\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191624",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191625",
        "description": "limit_mg..history.demo06_20230616191625",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191625",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191625",
        "description": "limit_mg..history.demo06_20230616191625",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191625",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191625",
        "description": "limit_mg..history.demo06_20230616191625",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191625",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191625",
        "description": "limit_mg..history.demo06_20230616191625",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191625",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191625",
        "description": "limit_mg..history.demo06_20230616191625",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191625",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191625",
        "description": "limit_mg..history.demo06_20230616191625",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191625",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191625",
        "description": "limit_mg..history.demo06_20230616191625",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict()\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191625",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191625",
        "description": "limit_mg..history.demo06_20230616191625",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict()\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191625",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191625",
        "description": "limit_mg..history.demo06_20230616191625",
        "peekOfCode": "y = model.predict()\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191625",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191628",
        "description": "limit_mg..history.demo06_20230616191628",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191628",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191628",
        "description": "limit_mg..history.demo06_20230616191628",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191628",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191628",
        "description": "limit_mg..history.demo06_20230616191628",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191628",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191628",
        "description": "limit_mg..history.demo06_20230616191628",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191628",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191628",
        "description": "limit_mg..history.demo06_20230616191628",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191628",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191628",
        "description": "limit_mg..history.demo06_20230616191628",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191628",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191628",
        "description": "limit_mg..history.demo06_20230616191628",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191628",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191628",
        "description": "limit_mg..history.demo06_20230616191628",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191628",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191628",
        "description": "limit_mg..history.demo06_20230616191628",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616191628",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191633",
        "description": "limit_mg..history.demo06_20230616191633",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191633",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191633",
        "description": "limit_mg..history.demo06_20230616191633",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191633",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191633",
        "description": "limit_mg..history.demo06_20230616191633",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191633",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191633",
        "description": "limit_mg..history.demo06_20230616191633",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191633",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191633",
        "description": "limit_mg..history.demo06_20230616191633",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191633",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191633",
        "description": "limit_mg..history.demo06_20230616191633",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191633",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191633",
        "description": "limit_mg..history.demo06_20230616191633",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191633",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191633",
        "description": "limit_mg..history.demo06_20230616191633",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict(x))",
        "detail": "limit_mg..history.demo06_20230616191633",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191633",
        "description": "limit_mg..history.demo06_20230616191633",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict(x))",
        "detail": "limit_mg..history.demo06_20230616191633",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191639",
        "description": "limit_mg..history.demo06_20230616191639",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191639",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191639",
        "description": "limit_mg..history.demo06_20230616191639",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191639",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191639",
        "description": "limit_mg..history.demo06_20230616191639",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191639",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191639",
        "description": "limit_mg..history.demo06_20230616191639",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191639",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191639",
        "description": "limit_mg..history.demo06_20230616191639",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191639",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191639",
        "description": "limit_mg..history.demo06_20230616191639",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191639",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191639",
        "description": "limit_mg..history.demo06_20230616191639",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191639",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191639",
        "description": "limit_mg..history.demo06_20230616191639",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[]x))",
        "detail": "limit_mg..history.demo06_20230616191639",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191639",
        "description": "limit_mg..history.demo06_20230616191639",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[]x))",
        "detail": "limit_mg..history.demo06_20230616191639",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191641",
        "description": "limit_mg..history.demo06_20230616191641",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191641",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191641",
        "description": "limit_mg..history.demo06_20230616191641",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191641",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191641",
        "description": "limit_mg..history.demo06_20230616191641",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191641",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191641",
        "description": "limit_mg..history.demo06_20230616191641",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191641",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191641",
        "description": "limit_mg..history.demo06_20230616191641",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191641",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191641",
        "description": "limit_mg..history.demo06_20230616191641",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191641",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191641",
        "description": "limit_mg..history.demo06_20230616191641",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191641",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191641",
        "description": "limit_mg..history.demo06_20230616191641",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5]x))",
        "detail": "limit_mg..history.demo06_20230616191641",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191641",
        "description": "limit_mg..history.demo06_20230616191641",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5]x))",
        "detail": "limit_mg..history.demo06_20230616191641",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191642",
        "description": "limit_mg..history.demo06_20230616191642",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191642",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191642",
        "description": "limit_mg..history.demo06_20230616191642",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191642",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191642",
        "description": "limit_mg..history.demo06_20230616191642",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191642",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191642",
        "description": "limit_mg..history.demo06_20230616191642",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191642",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191642",
        "description": "limit_mg..history.demo06_20230616191642",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191642",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191642",
        "description": "limit_mg..history.demo06_20230616191642",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191642",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191642",
        "description": "limit_mg..history.demo06_20230616191642",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191642",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191642",
        "description": "limit_mg..history.demo06_20230616191642",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5]))",
        "detail": "limit_mg..history.demo06_20230616191642",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191642",
        "description": "limit_mg..history.demo06_20230616191642",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5]))",
        "detail": "limit_mg..history.demo06_20230616191642",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191644",
        "description": "limit_mg..history.demo06_20230616191644",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191644",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191644",
        "description": "limit_mg..history.demo06_20230616191644",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191644",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191644",
        "description": "limit_mg..history.demo06_20230616191644",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191644",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191644",
        "description": "limit_mg..history.demo06_20230616191644",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191644",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191644",
        "description": "limit_mg..history.demo06_20230616191644",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616191644",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191644",
        "description": "limit_mg..history.demo06_20230616191644",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191644",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191644",
        "description": "limit_mg..history.demo06_20230616191644",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191644",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191644",
        "description": "limit_mg..history.demo06_20230616191644",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616191644",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191644",
        "description": "limit_mg..history.demo06_20230616191644",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616191644",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191921",
        "description": "limit_mg..history.demo06_20230616191921",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191921",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191921",
        "description": "limit_mg..history.demo06_20230616191921",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\ninput()",
        "detail": "limit_mg..history.demo06_20230616191921",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191921",
        "description": "limit_mg..history.demo06_20230616191921",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191921",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191921",
        "description": "limit_mg..history.demo06_20230616191921",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191921",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191921",
        "description": "limit_mg..history.demo06_20230616191921",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191921",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191921",
        "description": "limit_mg..history.demo06_20230616191921",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip, mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616191921",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191921",
        "description": "limit_mg..history.demo06_20230616191921",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191921",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191921",
        "description": "limit_mg..history.demo06_20230616191921",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616191921",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191921",
        "description": "limit_mg..history.demo06_20230616191921",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616191921",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191932",
        "description": "limit_mg..history.demo06_20230616191932",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191932",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191932",
        "description": "limit_mg..history.demo06_20230616191932",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape, mag_sigclip)\ninput()",
        "detail": "limit_mg..history.demo06_20230616191932",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191932",
        "description": "limit_mg..history.demo06_20230616191932",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape, mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191932",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191932",
        "description": "limit_mg..history.demo06_20230616191932",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape, mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191932",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191932",
        "description": "limit_mg..history.demo06_20230616191932",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape, mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191932",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191932",
        "description": "limit_mg..history.demo06_20230616191932",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape, mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616191932",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191932",
        "description": "limit_mg..history.demo06_20230616191932",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191932",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191932",
        "description": "limit_mg..history.demo06_20230616191932",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616191932",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191932",
        "description": "limit_mg..history.demo06_20230616191932",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616191932",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191934",
        "description": "limit_mg..history.demo06_20230616191934",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191934",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191934",
        "description": "limit_mg..history.demo06_20230616191934",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(), mag_sigclip)\ninput()",
        "detail": "limit_mg..history.demo06_20230616191934",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191934",
        "description": "limit_mg..history.demo06_20230616191934",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(), mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191934",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191934",
        "description": "limit_mg..history.demo06_20230616191934",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(), mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191934",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191934",
        "description": "limit_mg..history.demo06_20230616191934",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(), mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191934",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191934",
        "description": "limit_mg..history.demo06_20230616191934",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(), mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616191934",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191934",
        "description": "limit_mg..history.demo06_20230616191934",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191934",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191934",
        "description": "limit_mg..history.demo06_20230616191934",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616191934",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191934",
        "description": "limit_mg..history.demo06_20230616191934",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616191934",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191936",
        "description": "limit_mg..history.demo06_20230616191936",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191936",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191936",
        "description": "limit_mg..history.demo06_20230616191936",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip)\ninput()",
        "detail": "limit_mg..history.demo06_20230616191936",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191936",
        "description": "limit_mg..history.demo06_20230616191936",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191936",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191936",
        "description": "limit_mg..history.demo06_20230616191936",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191936",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191936",
        "description": "limit_mg..history.demo06_20230616191936",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191936",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191936",
        "description": "limit_mg..history.demo06_20230616191936",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip)\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616191936",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191936",
        "description": "limit_mg..history.demo06_20230616191936",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191936",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191936",
        "description": "limit_mg..history.demo06_20230616191936",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616191936",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191936",
        "description": "limit_mg..history.demo06_20230616191936",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616191936",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191940",
        "description": "limit_mg..history.demo06_20230616191940",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616191940",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191940",
        "description": "limit_mg..history.demo06_20230616191940",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\ninput()",
        "detail": "limit_mg..history.demo06_20230616191940",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191940",
        "description": "limit_mg..history.demo06_20230616191940",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616191940",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191940",
        "description": "limit_mg..history.demo06_20230616191940",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616191940",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191940",
        "description": "limit_mg..history.demo06_20230616191940",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616191940",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191940",
        "description": "limit_mg..history.demo06_20230616191940",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\ninput()\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616191940",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191940",
        "description": "limit_mg..history.demo06_20230616191940",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616191940",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191940",
        "description": "limit_mg..history.demo06_20230616191940",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616191940",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616191940",
        "description": "limit_mg..history.demo06_20230616191940",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616191940",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192004",
        "description": "limit_mg..history.demo06_20230616192004",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616192004",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192004",
        "description": "limit_mg..history.demo06_20230616192004",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616192004",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192004",
        "description": "limit_mg..history.demo06_20230616192004",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192004",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192004",
        "description": "limit_mg..history.demo06_20230616192004",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192004",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192004",
        "description": "limit_mg..history.demo06_20230616192004",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192004",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192004",
        "description": "limit_mg..history.demo06_20230616192004",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192004",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192004",
        "description": "limit_mg..history.demo06_20230616192004",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616192004",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192004",
        "description": "limit_mg..history.demo06_20230616192004",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616192004",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192004",
        "description": "limit_mg..history.demo06_20230616192004",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616192004",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192043",
        "description": "limit_mg..history.demo06_20230616192043",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616192043",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192043",
        "description": "limit_mg..history.demo06_20230616192043",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1))  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616192043",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192043",
        "description": "limit_mg..history.demo06_20230616192043",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1))  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192043",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192043",
        "description": "limit_mg..history.demo06_20230616192043",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1))  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192043",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192043",
        "description": "limit_mg..history.demo06_20230616192043",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1))  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192043",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192043",
        "description": "limit_mg..history.demo06_20230616192043",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1))  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192043",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192043",
        "description": "limit_mg..history.demo06_20230616192043",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip.reshape(-1,1))  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616192043",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192043",
        "description": "limit_mg..history.demo06_20230616192043",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616192043",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192043",
        "description": "limit_mg..history.demo06_20230616192043",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616192043",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192046",
        "description": "limit_mg..history.demo06_20230616192046",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616192046",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192046",
        "description": "limit_mg..history.demo06_20230616192046",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616192046",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192046",
        "description": "limit_mg..history.demo06_20230616192046",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192046",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192046",
        "description": "limit_mg..history.demo06_20230616192046",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192046",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192046",
        "description": "limit_mg..history.demo06_20230616192046",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192046",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192046",
        "description": "limit_mg..history.demo06_20230616192046",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192046",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192046",
        "description": "limit_mg..history.demo06_20230616192046",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616192046",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192046",
        "description": "limit_mg..history.demo06_20230616192046",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616192046",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192046",
        "description": "limit_mg..history.demo06_20230616192046",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616192046",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192058",
        "description": "limit_mg..history.demo06_20230616192058",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616192058",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192058",
        "description": "limit_mg..history.demo06_20230616192058",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616192058",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192058",
        "description": "limit_mg..history.demo06_20230616192058",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192058",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192058",
        "description": "limit_mg..history.demo06_20230616192058",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192058",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192058",
        "description": "limit_mg..history.demo06_20230616192058",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192058",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192058",
        "description": "limit_mg..history.demo06_20230616192058",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192058",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192058",
        "description": "limit_mg..history.demo06_20230616192058",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)reshape(-1,1)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616192058",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192058",
        "description": "limit_mg..history.demo06_20230616192058",
        "peekOfCode": "x = np.sort(snr_sigclip)reshape(-1,1)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616192058",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192058",
        "description": "limit_mg..history.demo06_20230616192058",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616192058",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192059",
        "description": "limit_mg..history.demo06_20230616192059",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型",
        "detail": "limit_mg..history.demo06_20230616192059",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192059",
        "description": "limit_mg..history.demo06_20230616192059",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测",
        "detail": "limit_mg..history.demo06_20230616192059",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192059",
        "description": "limit_mg..history.demo06_20230616192059",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192059",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192059",
        "description": "limit_mg..history.demo06_20230616192059",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192059",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192059",
        "description": "limit_mg..history.demo06_20230616192059",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom sklearn.linear_model import LinearRegression\n# 创建线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192059",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192059",
        "description": "limit_mg..history.demo06_20230616192059",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(snr_sigclip.reshape(-1,1), mag_sigclip.reshape(-1,1))\nsnr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192059",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192059",
        "description": "limit_mg..history.demo06_20230616192059",
        "peekOfCode": "snr_sigclip = model.predict(snr_sigclip.reshape(-1,1)).reshape(-1,1)  # 对新数据进行预测\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip).reshape(-1,1)\ny = model.predict(x)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616192059",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192059",
        "description": "limit_mg..history.demo06_20230616192059",
        "peekOfCode": "x = np.sort(snr_sigclip).reshape(-1,1)\ny = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616192059",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192059",
        "description": "limit_mg..history.demo06_20230616192059",
        "peekOfCode": "y = model.predict(x)\nplt.plot(x, y, '-r')\nplt.show()\nprint(model.predict[5])",
        "detail": "limit_mg..history.demo06_20230616192059",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo06_20230616192408",
        "description": "limit_mg..history.demo06_20230616192408",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192408",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192408",
        "description": "limit_mg..history.demo06_20230616192408",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo06_20230616192408",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192408",
        "description": "limit_mg..history.demo06_20230616192408",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192408",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192408",
        "description": "limit_mg..history.demo06_20230616192408",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192408",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192408",
        "description": "limit_mg..history.demo06_20230616192408",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo06_20230616192408",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192408",
        "description": "limit_mg..history.demo06_20230616192408",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192408",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192408",
        "description": "limit_mg..history.demo06_20230616192408",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192408",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192408",
        "description": "limit_mg..history.demo06_20230616192408",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192408",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo06_20230616192417",
        "description": "limit_mg..history.demo06_20230616192417",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192417",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192417",
        "description": "limit_mg..history.demo06_20230616192417",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合",
        "detail": "limit_mg..history.demo06_20230616192417",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192417",
        "description": "limit_mg..history.demo06_20230616192417",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192417",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192417",
        "description": "limit_mg..history.demo06_20230616192417",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192417",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192417",
        "description": "limit_mg..history.demo06_20230616192417",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192417",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192417",
        "description": "limit_mg..history.demo06_20230616192417",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo06_20230616192417",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192417",
        "description": "limit_mg..history.demo06_20230616192417",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192417",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192417",
        "description": "limit_mg..history.demo06_20230616192417",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192417",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg..history.demo06_20230616192423",
        "description": "limit_mg..history.demo06_20230616192423",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192423",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192423",
        "description": "limit_mg..history.demo06_20230616192423",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg..history.demo06_20230616192423",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192423",
        "description": "limit_mg..history.demo06_20230616192423",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo06_20230616192423",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192423",
        "description": "limit_mg..history.demo06_20230616192423",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192423",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192423",
        "description": "limit_mg..history.demo06_20230616192423",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192423",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192423",
        "description": "limit_mg..history.demo06_20230616192423",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192423",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192423",
        "description": "limit_mg..history.demo06_20230616192423",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192423",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192423",
        "description": "limit_mg..history.demo06_20230616192423",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192423",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192423",
        "description": "limit_mg..history.demo06_20230616192423",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192423",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192425",
        "description": "limit_mg..history.demo06_20230616192425",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg..history.demo06_20230616192425",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192425",
        "description": "limit_mg..history.demo06_20230616192425",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192425",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192425",
        "description": "limit_mg..history.demo06_20230616192425",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192425",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192425",
        "description": "limit_mg..history.demo06_20230616192425",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.demo06_20230616192425",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192425",
        "description": "limit_mg..history.demo06_20230616192425",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192425",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192425",
        "description": "limit_mg..history.demo06_20230616192425",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192425",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192425",
        "description": "limit_mg..history.demo06_20230616192425",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192425",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192425",
        "description": "limit_mg..history.demo06_20230616192425",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192425",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192434",
        "description": "limit_mg..history.demo06_20230616192434",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192434",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192434",
        "description": "limit_mg..history.demo06_20230616192434",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, x, y)",
        "detail": "limit_mg..history.demo06_20230616192434",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192434",
        "description": "limit_mg..history.demo06_20230616192434",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, x, y)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192434",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192434",
        "description": "limit_mg..history.demo06_20230616192434",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, x, y)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192434",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192434",
        "description": "limit_mg..history.demo06_20230616192434",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, x, y)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192434",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192434",
        "description": "limit_mg..history.demo06_20230616192434",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, x, y)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192434",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192434",
        "description": "limit_mg..history.demo06_20230616192434",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, x, y)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192434",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192434",
        "description": "limit_mg..history.demo06_20230616192434",
        "peekOfCode": "fit_result = fitter(quadratic_model, x, y)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616192434",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192434",
        "description": "limit_mg..history.demo06_20230616192434",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192434",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192434",
        "description": "limit_mg..history.demo06_20230616192434",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192434",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192437",
        "description": "limit_mg..history.demo06_20230616192437",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192437",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192437",
        "description": "limit_mg..history.demo06_20230616192437",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, y)",
        "detail": "limit_mg..history.demo06_20230616192437",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192437",
        "description": "limit_mg..history.demo06_20230616192437",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, y)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192437",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192437",
        "description": "limit_mg..history.demo06_20230616192437",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, y)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192437",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192437",
        "description": "limit_mg..history.demo06_20230616192437",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, y)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192437",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192437",
        "description": "limit_mg..history.demo06_20230616192437",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, y)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192437",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192437",
        "description": "limit_mg..history.demo06_20230616192437",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, y)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192437",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192437",
        "description": "limit_mg..history.demo06_20230616192437",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, y)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616192437",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192437",
        "description": "limit_mg..history.demo06_20230616192437",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192437",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192437",
        "description": "limit_mg..history.demo06_20230616192437",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192437",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192439",
        "description": "limit_mg..history.demo06_20230616192439",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192439",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192439",
        "description": "limit_mg..history.demo06_20230616192439",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192439",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192439",
        "description": "limit_mg..history.demo06_20230616192439",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192439",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192439",
        "description": "limit_mg..history.demo06_20230616192439",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192439",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192439",
        "description": "limit_mg..history.demo06_20230616192439",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192439",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192439",
        "description": "limit_mg..history.demo06_20230616192439",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192439",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192439",
        "description": "limit_mg..history.demo06_20230616192439",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192439",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192439",
        "description": "limit_mg..history.demo06_20230616192439",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616192439",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192439",
        "description": "limit_mg..history.demo06_20230616192439",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192439",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192439",
        "description": "limit_mg..history.demo06_20230616192439",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192439",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192440",
        "description": "limit_mg..history.demo06_20230616192440",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192440",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192440",
        "description": "limit_mg..history.demo06_20230616192440",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192440",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192440",
        "description": "limit_mg..history.demo06_20230616192440",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192440",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192440",
        "description": "limit_mg..history.demo06_20230616192440",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192440",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192440",
        "description": "limit_mg..history.demo06_20230616192440",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192440",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192440",
        "description": "limit_mg..history.demo06_20230616192440",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192440",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192440",
        "description": "limit_mg..history.demo06_20230616192440",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192440",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192440",
        "description": "limit_mg..history.demo06_20230616192440",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线\nx = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')",
        "detail": "limit_mg..history.demo06_20230616192440",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192440",
        "description": "limit_mg..history.demo06_20230616192440",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192440",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192440",
        "description": "limit_mg..history.demo06_20230616192440",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192440",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192447",
        "description": "limit_mg..history.demo06_20230616192447",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192447",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192447",
        "description": "limit_mg..history.demo06_20230616192447",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192447",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192447",
        "description": "limit_mg..history.demo06_20230616192447",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192447",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192447",
        "description": "limit_mg..history.demo06_20230616192447",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192447",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192447",
        "description": "limit_mg..history.demo06_20230616192447",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192447",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192447",
        "description": "limit_mg..history.demo06_20230616192447",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192447",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192447",
        "description": "limit_mg..history.demo06_20230616192447",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(x, fit_result(x), color='r')\nplt.show()",
        "detail": "limit_mg..history.demo06_20230616192447",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192447",
        "description": "limit_mg..history.demo06_20230616192447",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192447",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192448",
        "description": "limit_mg..history.demo06_20230616192448",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192448",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192448",
        "description": "limit_mg..history.demo06_20230616192448",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192448",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192448",
        "description": "limit_mg..history.demo06_20230616192448",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192448",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192448",
        "description": "limit_mg..history.demo06_20230616192448",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192448",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192448",
        "description": "limit_mg..history.demo06_20230616192448",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192448",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192448",
        "description": "limit_mg..history.demo06_20230616192448",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192448",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192448",
        "description": "limit_mg..history.demo06_20230616192448",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(x, fit_result(x), color='r')\nplt.show()",
        "detail": "limit_mg..history.demo06_20230616192448",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192448",
        "description": "limit_mg..history.demo06_20230616192448",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192448",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192456",
        "description": "limit_mg..history.demo06_20230616192456",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192456",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192456",
        "description": "limit_mg..history.demo06_20230616192456",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192456",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192456",
        "description": "limit_mg..history.demo06_20230616192456",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192456",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192456",
        "description": "limit_mg..history.demo06_20230616192456",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192456",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192456",
        "description": "limit_mg..history.demo06_20230616192456",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192456",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192456",
        "description": "limit_mg..history.demo06_20230616192456",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192456",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192456",
        "description": "limit_mg..history.demo06_20230616192456",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(snr_sigclip, fit_result(x), color='r')\nplt.show()",
        "detail": "limit_mg..history.demo06_20230616192456",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192456",
        "description": "limit_mg..history.demo06_20230616192456",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(snr_sigclip, fit_result(x), color='r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192456",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192458",
        "description": "limit_mg..history.demo06_20230616192458",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192458",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192458",
        "description": "limit_mg..history.demo06_20230616192458",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192458",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192458",
        "description": "limit_mg..history.demo06_20230616192458",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192458",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192458",
        "description": "limit_mg..history.demo06_20230616192458",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192458",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192458",
        "description": "limit_mg..history.demo06_20230616192458",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192458",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192458",
        "description": "limit_mg..history.demo06_20230616192458",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192458",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192458",
        "description": "limit_mg..history.demo06_20230616192458",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(snr_sigclip, fit_result(snr_sigclip), color='r')\nplt.show()",
        "detail": "limit_mg..history.demo06_20230616192458",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192458",
        "description": "limit_mg..history.demo06_20230616192458",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(snr_sigclip, fit_result(snr_sigclip), color='r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg..history.demo06_20230616192458",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192500",
        "description": "limit_mg..history.demo06_20230616192500",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192500",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192500",
        "description": "limit_mg..history.demo06_20230616192500",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192500",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192500",
        "description": "limit_mg..history.demo06_20230616192500",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192500",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192500",
        "description": "limit_mg..history.demo06_20230616192500",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192500",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192500",
        "description": "limit_mg..history.demo06_20230616192500",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192500",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192500",
        "description": "limit_mg..history.demo06_20230616192500",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192500",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192500",
        "description": "limit_mg..history.demo06_20230616192500",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(snr_sigclip, fit_result(snr_sigclip), color='r')\nplt.show()",
        "detail": "limit_mg..history.demo06_20230616192500",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192500",
        "description": "limit_mg..history.demo06_20230616192500",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(snr_sigclip, fit_result(snr_sigclip), color='r')\nplt.show()\nprint(magsnr(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192500",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192505",
        "description": "limit_mg..history.demo06_20230616192505",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192505",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192505",
        "description": "limit_mg..history.demo06_20230616192505",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192505",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192505",
        "description": "limit_mg..history.demo06_20230616192505",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192505",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192505",
        "description": "limit_mg..history.demo06_20230616192505",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192505",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192505",
        "description": "limit_mg..history.demo06_20230616192505",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192505",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192505",
        "description": "limit_mg..history.demo06_20230616192505",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192505",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192505",
        "description": "limit_mg..history.demo06_20230616192505",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(snr_sigclip, fit_result(snr_sigclip), color='r')\nplt.show()",
        "detail": "limit_mg..history.demo06_20230616192505",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192505",
        "description": "limit_mg..history.demo06_20230616192505",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(snr_sigclip, fit_result(snr_sigclip), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192505",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192521",
        "description": "limit_mg..history.demo06_20230616192521",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192521",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192521",
        "description": "limit_mg..history.demo06_20230616192521",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192521",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192521",
        "description": "limit_mg..history.demo06_20230616192521",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192521",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192521",
        "description": "limit_mg..history.demo06_20230616192521",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192521",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192521",
        "description": "limit_mg..history.demo06_20230616192521",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192521",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192521",
        "description": "limit_mg..history.demo06_20230616192521",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192521",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192521",
        "description": "limit_mg..history.demo06_20230616192521",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(np.sort(snr_sigclip), fit_result(snr_sigclip), color='r')\nplt.show()",
        "detail": "limit_mg..history.demo06_20230616192521",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192521",
        "description": "limit_mg..history.demo06_20230616192521",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.plot(np.sort(snr_sigclip), fit_result(snr_sigclip), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192521",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192534",
        "description": "limit_mg..history.demo06_20230616192534",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192534",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192534",
        "description": "limit_mg..history.demo06_20230616192534",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192534",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192534",
        "description": "limit_mg..history.demo06_20230616192534",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192534",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192534",
        "description": "limit_mg..history.demo06_20230616192534",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192534",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192534",
        "description": "limit_mg..history.demo06_20230616192534",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192534",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192534",
        "description": "limit_mg..history.demo06_20230616192534",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192534",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192534",
        "description": "limit_mg..history.demo06_20230616192534",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(, fit_result(snr_sigclip), color='r')",
        "detail": "limit_mg..history.demo06_20230616192534",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192534",
        "description": "limit_mg..history.demo06_20230616192534",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(, fit_result(snr_sigclip), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192534",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192536",
        "description": "limit_mg..history.demo06_20230616192536",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192536",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192536",
        "description": "limit_mg..history.demo06_20230616192536",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192536",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192536",
        "description": "limit_mg..history.demo06_20230616192536",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192536",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192536",
        "description": "limit_mg..history.demo06_20230616192536",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192536",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192536",
        "description": "limit_mg..history.demo06_20230616192536",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192536",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192536",
        "description": "limit_mg..history.demo06_20230616192536",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192536",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192536",
        "description": "limit_mg..history.demo06_20230616192536",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(snr_sxigclip), color='r')",
        "detail": "limit_mg..history.demo06_20230616192536",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192536",
        "description": "limit_mg..history.demo06_20230616192536",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(snr_sxigclip), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192536",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192537",
        "description": "limit_mg..history.demo06_20230616192537",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192537",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192537",
        "description": "limit_mg..history.demo06_20230616192537",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192537",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192537",
        "description": "limit_mg..history.demo06_20230616192537",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192537",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192537",
        "description": "limit_mg..history.demo06_20230616192537",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192537",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192537",
        "description": "limit_mg..history.demo06_20230616192537",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192537",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192537",
        "description": "limit_mg..history.demo06_20230616192537",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192537",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192537",
        "description": "limit_mg..history.demo06_20230616192537",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192537",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192537",
        "description": "limit_mg..history.demo06_20230616192537",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192537",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192616",
        "description": "limit_mg..history.demo06_20230616192616",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192616",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192616",
        "description": "limit_mg..history.demo06_20230616192616",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192616",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192616",
        "description": "limit_mg..history.demo06_20230616192616",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192616",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192616",
        "description": "limit_mg..history.demo06_20230616192616",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192616",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192616",
        "description": "limit_mg..history.demo06_20230616192616",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192616",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192616",
        "description": "limit_mg..history.demo06_20230616192616",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192616",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192616",
        "description": "limit_mg..history.demo06_20230616192616",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192616",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192616",
        "description": "limit_mg..history.demo06_20230616192616",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192616",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192617",
        "description": "limit_mg..history.demo06_20230616192617",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192617",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192617",
        "description": "limit_mg..history.demo06_20230616192617",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192617",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192617",
        "description": "limit_mg..history.demo06_20230616192617",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192617",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192617",
        "description": "limit_mg..history.demo06_20230616192617",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192617",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192617",
        "description": "limit_mg..history.demo06_20230616192617",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192617",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192617",
        "description": "limit_mg..history.demo06_20230616192617",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192617",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192617",
        "description": "limit_mg..history.demo06_20230616192617",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192617",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192617",
        "description": "limit_mg..history.demo06_20230616192617",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192617",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192655",
        "description": "limit_mg..history.demo06_20230616192655",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nexp_model = models.Exponential1D(amplitude=2.0, decay=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192655",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192655",
        "description": "limit_mg..history.demo06_20230616192655",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nexp_model = models.Exponential1D(amplitude=2.0, decay=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192655",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192655",
        "description": "limit_mg..history.demo06_20230616192655",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nexp_model = models.Exponential1D(amplitude=2.0, decay=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192655",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192655",
        "description": "limit_mg..history.demo06_20230616192655",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nexp_model = models.Exponential1D(amplitude=2.0, decay=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192655",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192655",
        "description": "limit_mg..history.demo06_20230616192655",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nexp_model = models.Exponential1D(amplitude=2.0, decay=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192655",
        "documentation": {}
    },
    {
        "label": "exp_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192655",
        "description": "limit_mg..history.demo06_20230616192655",
        "peekOfCode": "exp_model = models.Exponential1D(amplitude=2.0, decay=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192655",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192655",
        "description": "limit_mg..history.demo06_20230616192655",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192655",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192655",
        "description": "limit_mg..history.demo06_20230616192655",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192655",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192658",
        "description": "limit_mg..history.demo06_20230616192658",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, decay=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192658",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192658",
        "description": "limit_mg..history.demo06_20230616192658",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, decay=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192658",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192658",
        "description": "limit_mg..history.demo06_20230616192658",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, decay=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192658",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192658",
        "description": "limit_mg..history.demo06_20230616192658",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, decay=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192658",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192658",
        "description": "limit_mg..history.demo06_20230616192658",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, decay=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192658",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192658",
        "description": "limit_mg..history.demo06_20230616192658",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, decay=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192658",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192658",
        "description": "limit_mg..history.demo06_20230616192658",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192658",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192658",
        "description": "limit_mg..history.demo06_20230616192658",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192658",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192753",
        "description": "limit_mg..history.demo06_20230616192753",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, ta=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192753",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192753",
        "description": "limit_mg..history.demo06_20230616192753",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, ta=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192753",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192753",
        "description": "limit_mg..history.demo06_20230616192753",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, ta=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192753",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192753",
        "description": "limit_mg..history.demo06_20230616192753",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, ta=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192753",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192753",
        "description": "limit_mg..history.demo06_20230616192753",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, ta=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192753",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192753",
        "description": "limit_mg..history.demo06_20230616192753",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, ta=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192753",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192753",
        "description": "limit_mg..history.demo06_20230616192753",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192753",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192753",
        "description": "limit_mg..history.demo06_20230616192753",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192753",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192755",
        "description": "limit_mg..history.demo06_20230616192755",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192755",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192755",
        "description": "limit_mg..history.demo06_20230616192755",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192755",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192755",
        "description": "limit_mg..history.demo06_20230616192755",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192755",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192755",
        "description": "limit_mg..history.demo06_20230616192755",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192755",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192755",
        "description": "limit_mg..history.demo06_20230616192755",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192755",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192755",
        "description": "limit_mg..history.demo06_20230616192755",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192755",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192755",
        "description": "limit_mg..history.demo06_20230616192755",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192755",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192755",
        "description": "limit_mg..history.demo06_20230616192755",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192755",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192847",
        "description": "limit_mg..history.demo06_20230616192847",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D()\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192847",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192847",
        "description": "limit_mg..history.demo06_20230616192847",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D()\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192847",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192847",
        "description": "limit_mg..history.demo06_20230616192847",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D()\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192847",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192847",
        "description": "limit_mg..history.demo06_20230616192847",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D()\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192847",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192847",
        "description": "limit_mg..history.demo06_20230616192847",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D()\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192847",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192847",
        "description": "limit_mg..history.demo06_20230616192847",
        "peekOfCode": "quadratic_model = models.Exponential1D()\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192847",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192847",
        "description": "limit_mg..history.demo06_20230616192847",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192847",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192847",
        "description": "limit_mg..history.demo06_20230616192847",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192847",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192913",
        "description": "limit_mg..history.demo06_20230616192913",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192913",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192913",
        "description": "limit_mg..history.demo06_20230616192913",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192913",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192913",
        "description": "limit_mg..history.demo06_20230616192913",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192913",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192913",
        "description": "limit_mg..history.demo06_20230616192913",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192913",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192913",
        "description": "limit_mg..history.demo06_20230616192913",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192913",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192913",
        "description": "limit_mg..history.demo06_20230616192913",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192913",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192913",
        "description": "limit_mg..history.demo06_20230616192913",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192913",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192913",
        "description": "limit_mg..history.demo06_20230616192913",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192913",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192922",
        "description": "limit_mg..history.demo06_20230616192922",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=3)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192922",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192922",
        "description": "limit_mg..history.demo06_20230616192922",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=3)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192922",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192922",
        "description": "limit_mg..history.demo06_20230616192922",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=3)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192922",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192922",
        "description": "limit_mg..history.demo06_20230616192922",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=3)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192922",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192922",
        "description": "limit_mg..history.demo06_20230616192922",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=3)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192922",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192922",
        "description": "limit_mg..history.demo06_20230616192922",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=3)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192922",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192922",
        "description": "limit_mg..history.demo06_20230616192922",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192922",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192922",
        "description": "limit_mg..history.demo06_20230616192922",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192922",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192931",
        "description": "limit_mg..history.demo06_20230616192931",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192931",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192931",
        "description": "limit_mg..history.demo06_20230616192931",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192931",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192931",
        "description": "limit_mg..history.demo06_20230616192931",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192931",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192931",
        "description": "limit_mg..history.demo06_20230616192931",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192931",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192931",
        "description": "limit_mg..history.demo06_20230616192931",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192931",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192931",
        "description": "limit_mg..history.demo06_20230616192931",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192931",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192931",
        "description": "limit_mg..history.demo06_20230616192931",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192931",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192931",
        "description": "limit_mg..history.demo06_20230616192931",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192931",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192946",
        "description": "limit_mg..history.demo06_20230616192946",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192946",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192946",
        "description": "limit_mg..history.demo06_20230616192946",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192946",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192946",
        "description": "limit_mg..history.demo06_20230616192946",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192946",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192946",
        "description": "limit_mg..history.demo06_20230616192946",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192946",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192946",
        "description": "limit_mg..history.demo06_20230616192946",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192946",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192946",
        "description": "limit_mg..history.demo06_20230616192946",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192946",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192946",
        "description": "limit_mg..history.demo06_20230616192946",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192946",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192946",
        "description": "limit_mg..history.demo06_20230616192946",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result(snr_sigclip))",
        "detail": "limit_mg..history.demo06_20230616192946",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192959",
        "description": "limit_mg..history.demo06_20230616192959",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616192959",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192959",
        "description": "limit_mg..history.demo06_20230616192959",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616192959",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192959",
        "description": "limit_mg..history.demo06_20230616192959",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616192959",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192959",
        "description": "limit_mg..history.demo06_20230616192959",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616192959",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192959",
        "description": "limit_mg..history.demo06_20230616192959",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616192959",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192959",
        "description": "limit_mg..history.demo06_20230616192959",
        "peekOfCode": "quadratic_model = models.Polynomial1D(degree=2)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616192959",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192959",
        "description": "limit_mg..history.demo06_20230616192959",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616192959",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616192959",
        "description": "limit_mg..history.demo06_20230616192959",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616192959",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193028",
        "description": "limit_mg..history.demo06_20230616193028",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193028",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193028",
        "description": "limit_mg..history.demo06_20230616193028",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193028",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193028",
        "description": "limit_mg..history.demo06_20230616193028",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193028",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193028",
        "description": "limit_mg..history.demo06_20230616193028",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193028",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193028",
        "description": "limit_mg..history.demo06_20230616193028",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193028",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193028",
        "description": "limit_mg..history.demo06_20230616193028",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193028",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193028",
        "description": "limit_mg..history.demo06_20230616193028",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193028",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193028",
        "description": "limit_mg..history.demo06_20230616193028",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193028",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193114",
        "description": "limit_mg..history.demo06_20230616193114",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193114",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193114",
        "description": "limit_mg..history.demo06_20230616193114",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193114",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193114",
        "description": "limit_mg..history.demo06_20230616193114",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193114",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193114",
        "description": "limit_mg..history.demo06_20230616193114",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193114",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193114",
        "description": "limit_mg..history.demo06_20230616193114",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193114",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193114",
        "description": "limit_mg..history.demo06_20230616193114",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193114",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193114",
        "description": "limit_mg..history.demo06_20230616193114",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193114",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193114",
        "description": "limit_mg..history.demo06_20230616193114",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193114",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193115",
        "description": "limit_mg..history.demo06_20230616193115",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['FLAGS']==0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193115",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193115",
        "description": "limit_mg..history.demo06_20230616193115",
        "peekOfCode": "snr = stars_table[(stars_table['FLAGS']==0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['FLAGS']==0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193115",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193115",
        "description": "limit_mg..history.demo06_20230616193115",
        "peekOfCode": "mag = stars_table[(stars_table['FLAGS']==0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193115",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193115",
        "description": "limit_mg..history.demo06_20230616193115",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193115",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193115",
        "description": "limit_mg..history.demo06_20230616193115",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193115",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193115",
        "description": "limit_mg..history.demo06_20230616193115",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193115",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193115",
        "description": "limit_mg..history.demo06_20230616193115",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193115",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193115",
        "description": "limit_mg..history.demo06_20230616193115",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193115",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193119",
        "description": "limit_mg..history.demo06_20230616193119",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['snr']==0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']==0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193119",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193119",
        "description": "limit_mg..history.demo06_20230616193119",
        "peekOfCode": "snr = stars_table[(stars_table['snr']==0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']==0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193119",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193119",
        "description": "limit_mg..history.demo06_20230616193119",
        "peekOfCode": "mag = stars_table[(stars_table['snr']==0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193119",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193119",
        "description": "limit_mg..history.demo06_20230616193119",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193119",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193119",
        "description": "limit_mg..history.demo06_20230616193119",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193119",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193119",
        "description": "limit_mg..history.demo06_20230616193119",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193119",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193119",
        "description": "limit_mg..history.demo06_20230616193119",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193119",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193119",
        "description": "limit_mg..history.demo06_20230616193119",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193119",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193123",
        "description": "limit_mg..history.demo06_20230616193123",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['snr']!=0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193123",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193123",
        "description": "limit_mg..history.demo06_20230616193123",
        "peekOfCode": "snr = stars_table[(stars_table['snr']!=0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193123",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193123",
        "description": "limit_mg..history.demo06_20230616193123",
        "peekOfCode": "mag = stars_table[(stars_table['snr']!=0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193123",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193123",
        "description": "limit_mg..history.demo06_20230616193123",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193123",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193123",
        "description": "limit_mg..history.demo06_20230616193123",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193123",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193123",
        "description": "limit_mg..history.demo06_20230616193123",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193123",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193123",
        "description": "limit_mg..history.demo06_20230616193123",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193123",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193123",
        "description": "limit_mg..history.demo06_20230616193123",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193123",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193125",
        "description": "limit_mg..history.demo06_20230616193125",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['snr']!=0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193125",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193125",
        "description": "limit_mg..history.demo06_20230616193125",
        "peekOfCode": "snr = stars_table[(stars_table['snr']!=0) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193125",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193125",
        "description": "limit_mg..history.demo06_20230616193125",
        "peekOfCode": "mag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193125",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193125",
        "description": "limit_mg..history.demo06_20230616193125",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193125",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193125",
        "description": "limit_mg..history.demo06_20230616193125",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193125",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193125",
        "description": "limit_mg..history.demo06_20230616193125",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193125",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193125",
        "description": "limit_mg..history.demo06_20230616193125",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193125",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193125",
        "description": "limit_mg..history.demo06_20230616193125",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193125",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193130",
        "description": "limit_mg..history.demo06_20230616193130",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['snr']!=nan) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193130",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193130",
        "description": "limit_mg..history.demo06_20230616193130",
        "peekOfCode": "snr = stars_table[(stars_table['snr']!=nan) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193130",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193130",
        "description": "limit_mg..history.demo06_20230616193130",
        "peekOfCode": "mag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193130",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193130",
        "description": "limit_mg..history.demo06_20230616193130",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193130",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193130",
        "description": "limit_mg..history.demo06_20230616193130",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193130",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193130",
        "description": "limit_mg..history.demo06_20230616193130",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193130",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193130",
        "description": "limit_mg..history.demo06_20230616193130",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193130",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193130",
        "description": "limit_mg..history.demo06_20230616193130",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193130",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193133",
        "description": "limit_mg..history.demo06_20230616193133",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['snr']!=na) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193133",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193133",
        "description": "limit_mg..history.demo06_20230616193133",
        "peekOfCode": "snr = stars_table[(stars_table['snr']!=na) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193133",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193133",
        "description": "limit_mg..history.demo06_20230616193133",
        "peekOfCode": "mag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193133",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193133",
        "description": "limit_mg..history.demo06_20230616193133",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193133",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193133",
        "description": "limit_mg..history.demo06_20230616193133",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193133",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193133",
        "description": "limit_mg..history.demo06_20230616193133",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193133",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193133",
        "description": "limit_mg..history.demo06_20230616193133",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193133",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193133",
        "description": "limit_mg..history.demo06_20230616193133",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193133",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193139",
        "description": "limit_mg..history.demo06_20230616193139",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['snr']!=nan()) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193139",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193139",
        "description": "limit_mg..history.demo06_20230616193139",
        "peekOfCode": "snr = stars_table[(stars_table['snr']!=nan()) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193139",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193139",
        "description": "limit_mg..history.demo06_20230616193139",
        "peekOfCode": "mag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193139",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193139",
        "description": "limit_mg..history.demo06_20230616193139",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193139",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193139",
        "description": "limit_mg..history.demo06_20230616193139",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193139",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193139",
        "description": "limit_mg..history.demo06_20230616193139",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193139",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193139",
        "description": "limit_mg..history.demo06_20230616193139",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193139",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193139",
        "description": "limit_mg..history.demo06_20230616193139",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193139",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193141",
        "description": "limit_mg..history.demo06_20230616193141",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193141",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193141",
        "description": "limit_mg..history.demo06_20230616193141",
        "peekOfCode": "snr = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193141",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193141",
        "description": "limit_mg..history.demo06_20230616193141",
        "peekOfCode": "mag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193141",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193141",
        "description": "limit_mg..history.demo06_20230616193141",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193141",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193141",
        "description": "limit_mg..history.demo06_20230616193141",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193141",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193141",
        "description": "limit_mg..history.demo06_20230616193141",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193141",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193141",
        "description": "limit_mg..history.demo06_20230616193141",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193141",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193141",
        "description": "limit_mg..history.demo06_20230616193141",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193141",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193151",
        "description": "limit_mg..history.demo06_20230616193151",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['SNT_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193151",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193151",
        "description": "limit_mg..history.demo06_20230616193151",
        "peekOfCode": "snr = stars_table[(stars_table['SNT_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193151",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193151",
        "description": "limit_mg..history.demo06_20230616193151",
        "peekOfCode": "mag = stars_table[(stars_table['snr']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193151",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193151",
        "description": "limit_mg..history.demo06_20230616193151",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193151",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193151",
        "description": "limit_mg..history.demo06_20230616193151",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193151",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193151",
        "description": "limit_mg..history.demo06_20230616193151",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193151",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193151",
        "description": "limit_mg..history.demo06_20230616193151",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193151",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193151",
        "description": "limit_mg..history.demo06_20230616193151",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193151",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193152",
        "description": "limit_mg..history.demo06_20230616193152",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['SNT_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNT_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193152",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193152",
        "description": "limit_mg..history.demo06_20230616193152",
        "peekOfCode": "snr = stars_table[(stars_table['SNT_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNT_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193152",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193152",
        "description": "limit_mg..history.demo06_20230616193152",
        "peekOfCode": "mag = stars_table[(stars_table['SNT_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193152",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193152",
        "description": "limit_mg..history.demo06_20230616193152",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193152",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193152",
        "description": "limit_mg..history.demo06_20230616193152",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193152",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193152",
        "description": "limit_mg..history.demo06_20230616193152",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193152",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193152",
        "description": "limit_mg..history.demo06_20230616193152",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193152",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193152",
        "description": "limit_mg..history.demo06_20230616193152",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193152",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193200",
        "description": "limit_mg..history.demo06_20230616193200",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNT_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193200",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193200",
        "description": "limit_mg..history.demo06_20230616193200",
        "peekOfCode": "snr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNT_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193200",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193200",
        "description": "limit_mg..history.demo06_20230616193200",
        "peekOfCode": "mag = stars_table[(stars_table['SNT_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193200",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193200",
        "description": "limit_mg..history.demo06_20230616193200",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193200",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193200",
        "description": "limit_mg..history.demo06_20230616193200",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193200",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193200",
        "description": "limit_mg..history.demo06_20230616193200",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193200",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193200",
        "description": "limit_mg..history.demo06_20230616193200",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193200",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193200",
        "description": "limit_mg..history.demo06_20230616193200",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193200",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193201",
        "description": "limit_mg..history.demo06_20230616193201",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193201",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193201",
        "description": "limit_mg..history.demo06_20230616193201",
        "peekOfCode": "snr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193201",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193201",
        "description": "limit_mg..history.demo06_20230616193201",
        "peekOfCode": "mag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193201",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193201",
        "description": "limit_mg..history.demo06_20230616193201",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193201",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193201",
        "description": "limit_mg..history.demo06_20230616193201",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193201",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193201",
        "description": "limit_mg..history.demo06_20230616193201",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193201",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193201",
        "description": "limit_mg..history.demo06_20230616193201",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193201",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193201",
        "description": "limit_mg..history.demo06_20230616193201",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193201",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193255",
        "description": "limit_mg..history.demo06_20230616193255",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 删除包含NaN值的行\nstars_table.dropna()\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)",
        "detail": "limit_mg..history.demo06_20230616193255",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193255",
        "description": "limit_mg..history.demo06_20230616193255",
        "peekOfCode": "snr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193255",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193255",
        "description": "limit_mg..history.demo06_20230616193255",
        "peekOfCode": "mag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193255",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193255",
        "description": "limit_mg..history.demo06_20230616193255",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193255",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193255",
        "description": "limit_mg..history.demo06_20230616193255",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193255",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193255",
        "description": "limit_mg..history.demo06_20230616193255",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193255",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193255",
        "description": "limit_mg..history.demo06_20230616193255",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193255",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193255",
        "description": "limit_mg..history.demo06_20230616193255",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193255",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193308",
        "description": "limit_mg..history.demo06_20230616193308",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193308",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193308",
        "description": "limit_mg..history.demo06_20230616193308",
        "peekOfCode": "snr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193308",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193308",
        "description": "limit_mg..history.demo06_20230616193308",
        "peekOfCode": "mag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193308",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193308",
        "description": "limit_mg..history.demo06_20230616193308",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193308",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193308",
        "description": "limit_mg..history.demo06_20230616193308",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193308",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193308",
        "description": "limit_mg..history.demo06_20230616193308",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193308",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193308",
        "description": "limit_mg..history.demo06_20230616193308",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193308",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193308",
        "description": "limit_mg..history.demo06_20230616193308",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193308",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193309",
        "description": "limit_mg..history.demo06_20230616193309",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193309",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193309",
        "description": "limit_mg..history.demo06_20230616193309",
        "peekOfCode": "snr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193309",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193309",
        "description": "limit_mg..history.demo06_20230616193309",
        "peekOfCode": "mag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193309",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193309",
        "description": "limit_mg..history.demo06_20230616193309",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193309",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193309",
        "description": "limit_mg..history.demo06_20230616193309",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193309",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193309",
        "description": "limit_mg..history.demo06_20230616193309",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193309",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193309",
        "description": "limit_mg..history.demo06_20230616193309",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193309",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193309",
        "description": "limit_mg..history.demo06_20230616193309",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193309",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193311",
        "description": "limit_mg..history.demo06_20230616193311",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193311",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193311",
        "description": "limit_mg..history.demo06_20230616193311",
        "peekOfCode": "snr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193311",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193311",
        "description": "limit_mg..history.demo06_20230616193311",
        "peekOfCode": "mag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193311",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193311",
        "description": "limit_mg..history.demo06_20230616193311",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193311",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193311",
        "description": "limit_mg..history.demo06_20230616193311",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193311",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193311",
        "description": "limit_mg..history.demo06_20230616193311",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193311",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193311",
        "description": "limit_mg..history.demo06_20230616193311",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193311",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193311",
        "description": "limit_mg..history.demo06_20230616193311",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193311",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193312",
        "description": "limit_mg..history.demo06_20230616193312",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg..history.demo06_20230616193312",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193312",
        "description": "limit_mg..history.demo06_20230616193312",
        "peekOfCode": "snr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg..history.demo06_20230616193312",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193312",
        "description": "limit_mg..history.demo06_20230616193312",
        "peekOfCode": "mag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.demo06_20230616193312",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193312",
        "description": "limit_mg..history.demo06_20230616193312",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.demo06_20230616193312",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193312",
        "description": "limit_mg..history.demo06_20230616193312",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg..history.demo06_20230616193312",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193312",
        "description": "limit_mg..history.demo06_20230616193312",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.demo06_20230616193312",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193312",
        "description": "limit_mg..history.demo06_20230616193312",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg..history.demo06_20230616193312",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg..history.demo06_20230616193312",
        "description": "limit_mg..history.demo06_20230616193312",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg..history.demo06_20230616193312",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617152800",
        "description": "limit_mg..history.main7_20230617152800",
        "peekOfCode": "tab_hdu = Table.read(\"my_sc_tngc3627_g_20230606153712_029_sciimg_sexcat.fits\", hdu=2)\ntab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)",
        "detail": "limit_mg..history.main7_20230617152800",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617152800",
        "description": "limit_mg..history.main7_20230617152800",
        "peekOfCode": "tab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617152800",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617152800",
        "description": "limit_mg..history.main7_20230617152800",
        "peekOfCode": "snr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式",
        "detail": "limit_mg..history.main7_20230617152800",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617152800",
        "description": "limit_mg..history.main7_20230617152800",
        "peekOfCode": "mag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617152800",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617152800",
        "description": "limit_mg..history.main7_20230617152800",
        "peekOfCode": "snr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617152800",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617152800",
        "description": "limit_mg..history.main7_20230617152800",
        "peekOfCode": "mag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)",
        "detail": "limit_mg..history.main7_20230617152800",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617152800",
        "description": "limit_mg..history.main7_20230617152800",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617152800",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617152800",
        "description": "limit_mg..history.main7_20230617152800",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617152800",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617152800",
        "description": "limit_mg..history.main7_20230617152800",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617152800",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617152800",
        "description": "limit_mg..history.main7_20230617152800",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617152800",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617152800",
        "description": "limit_mg..history.main7_20230617152800",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617152800",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617152800",
        "description": "limit_mg..history.main7_20230617152800",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617152800",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160740",
        "description": "limit_mg..history.main7_20230617160740",
        "peekOfCode": "tab_hdu = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\ntab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)",
        "detail": "limit_mg..history.main7_20230617160740",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160740",
        "description": "limit_mg..history.main7_20230617160740",
        "peekOfCode": "tab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160740",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160740",
        "description": "limit_mg..history.main7_20230617160740",
        "peekOfCode": "snr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式",
        "detail": "limit_mg..history.main7_20230617160740",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160740",
        "description": "limit_mg..history.main7_20230617160740",
        "peekOfCode": "mag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617160740",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160740",
        "description": "limit_mg..history.main7_20230617160740",
        "peekOfCode": "snr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617160740",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160740",
        "description": "limit_mg..history.main7_20230617160740",
        "peekOfCode": "mag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)",
        "detail": "limit_mg..history.main7_20230617160740",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160740",
        "description": "limit_mg..history.main7_20230617160740",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160740",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160740",
        "description": "limit_mg..history.main7_20230617160740",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617160740",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160740",
        "description": "limit_mg..history.main7_20230617160740",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617160740",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160740",
        "description": "limit_mg..history.main7_20230617160740",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617160740",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160740",
        "description": "limit_mg..history.main7_20230617160740",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617160740",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160740",
        "description": "limit_mg..history.main7_20230617160740",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617160740",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160741",
        "description": "limit_mg..history.main7_20230617160741",
        "peekOfCode": "tab_hdu = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\ntab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)",
        "detail": "limit_mg..history.main7_20230617160741",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160741",
        "description": "limit_mg..history.main7_20230617160741",
        "peekOfCode": "tab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160741",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160741",
        "description": "limit_mg..history.main7_20230617160741",
        "peekOfCode": "snr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式",
        "detail": "limit_mg..history.main7_20230617160741",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160741",
        "description": "limit_mg..history.main7_20230617160741",
        "peekOfCode": "mag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617160741",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160741",
        "description": "limit_mg..history.main7_20230617160741",
        "peekOfCode": "snr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617160741",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160741",
        "description": "limit_mg..history.main7_20230617160741",
        "peekOfCode": "mag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)",
        "detail": "limit_mg..history.main7_20230617160741",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160741",
        "description": "limit_mg..history.main7_20230617160741",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160741",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160741",
        "description": "limit_mg..history.main7_20230617160741",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617160741",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160741",
        "description": "limit_mg..history.main7_20230617160741",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617160741",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160741",
        "description": "limit_mg..history.main7_20230617160741",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617160741",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160741",
        "description": "limit_mg..history.main7_20230617160741",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617160741",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160741",
        "description": "limit_mg..history.main7_20230617160741",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617160741",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160756",
        "description": "limit_mg..history.main7_20230617160756",
        "peekOfCode": "tab_hdu = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\ntab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)",
        "detail": "limit_mg..history.main7_20230617160756",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160756",
        "description": "limit_mg..history.main7_20230617160756",
        "peekOfCode": "tab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np",
        "detail": "limit_mg..history.main7_20230617160756",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160756",
        "description": "limit_mg..history.main7_20230617160756",
        "peekOfCode": "snr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617160756",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160756",
        "description": "limit_mg..history.main7_20230617160756",
        "peekOfCode": "mag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)",
        "detail": "limit_mg..history.main7_20230617160756",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160756",
        "description": "limit_mg..history.main7_20230617160756",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160756",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160756",
        "description": "limit_mg..history.main7_20230617160756",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617160756",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160756",
        "description": "limit_mg..history.main7_20230617160756",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617160756",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160756",
        "description": "limit_mg..history.main7_20230617160756",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617160756",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160756",
        "description": "limit_mg..history.main7_20230617160756",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617160756",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160756",
        "description": "limit_mg..history.main7_20230617160756",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617160756",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160757",
        "description": "limit_mg..history.main7_20230617160757",
        "peekOfCode": "tab_hdu = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\ntab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)",
        "detail": "limit_mg..history.main7_20230617160757",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160757",
        "description": "limit_mg..history.main7_20230617160757",
        "peekOfCode": "tab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np",
        "detail": "limit_mg..history.main7_20230617160757",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160757",
        "description": "limit_mg..history.main7_20230617160757",
        "peekOfCode": "snr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617160757",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160757",
        "description": "limit_mg..history.main7_20230617160757",
        "peekOfCode": "mag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)",
        "detail": "limit_mg..history.main7_20230617160757",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160757",
        "description": "limit_mg..history.main7_20230617160757",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160757",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160757",
        "description": "limit_mg..history.main7_20230617160757",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617160757",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160757",
        "description": "limit_mg..history.main7_20230617160757",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617160757",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160757",
        "description": "limit_mg..history.main7_20230617160757",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617160757",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160757",
        "description": "limit_mg..history.main7_20230617160757",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617160757",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160757",
        "description": "limit_mg..history.main7_20230617160757",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617160757",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160802",
        "description": "limit_mg..history.main7_20230617160802",
        "peekOfCode": "tab_hdu = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\ntab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)",
        "detail": "limit_mg..history.main7_20230617160802",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160802",
        "description": "limit_mg..history.main7_20230617160802",
        "peekOfCode": "tab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160802",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160802",
        "description": "limit_mg..history.main7_20230617160802",
        "peekOfCode": "snr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式",
        "detail": "limit_mg..history.main7_20230617160802",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160802",
        "description": "limit_mg..history.main7_20230617160802",
        "peekOfCode": "mag_auto_s = tab_hdu['MAG_AUTO_S']\n# 获取SNR_WIN和MAG_AUTO_S列的值\nsnr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617160802",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160802",
        "description": "limit_mg..history.main7_20230617160802",
        "peekOfCode": "snr_win = sigma_clip(snr_win)\nmag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617160802",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160802",
        "description": "limit_mg..history.main7_20230617160802",
        "peekOfCode": "mag_auto_s = sigma_clip(mag_auto_s)\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)",
        "detail": "limit_mg..history.main7_20230617160802",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160802",
        "description": "limit_mg..history.main7_20230617160802",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160802",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160802",
        "description": "limit_mg..history.main7_20230617160802",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617160802",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160802",
        "description": "limit_mg..history.main7_20230617160802",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617160802",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160802",
        "description": "limit_mg..history.main7_20230617160802",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617160802",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160802",
        "description": "limit_mg..history.main7_20230617160802",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617160802",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160802",
        "description": "limit_mg..history.main7_20230617160802",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617160802",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160805",
        "description": "limit_mg..history.main7_20230617160805",
        "peekOfCode": "tab_hdu = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\ntab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np",
        "detail": "limit_mg..history.main7_20230617160805",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160805",
        "description": "limit_mg..history.main7_20230617160805",
        "peekOfCode": "tab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression",
        "detail": "limit_mg..history.main7_20230617160805",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160805",
        "description": "limit_mg..history.main7_20230617160805",
        "peekOfCode": "snr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617160805",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160805",
        "description": "limit_mg..history.main7_20230617160805",
        "peekOfCode": "mag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)",
        "detail": "limit_mg..history.main7_20230617160805",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160805",
        "description": "limit_mg..history.main7_20230617160805",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160805",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160805",
        "description": "limit_mg..history.main7_20230617160805",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617160805",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160805",
        "description": "limit_mg..history.main7_20230617160805",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617160805",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160805",
        "description": "limit_mg..history.main7_20230617160805",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617160805",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160805",
        "description": "limit_mg..history.main7_20230617160805",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617160805",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160805",
        "description": "limit_mg..history.main7_20230617160805",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617160805",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160806",
        "description": "limit_mg..history.main7_20230617160806",
        "peekOfCode": "tab_hdu = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\ntab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np",
        "detail": "limit_mg..history.main7_20230617160806",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160806",
        "description": "limit_mg..history.main7_20230617160806",
        "peekOfCode": "tab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression",
        "detail": "limit_mg..history.main7_20230617160806",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160806",
        "description": "limit_mg..history.main7_20230617160806",
        "peekOfCode": "snr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617160806",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160806",
        "description": "limit_mg..history.main7_20230617160806",
        "peekOfCode": "mag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)",
        "detail": "limit_mg..history.main7_20230617160806",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160806",
        "description": "limit_mg..history.main7_20230617160806",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160806",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160806",
        "description": "limit_mg..history.main7_20230617160806",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617160806",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160806",
        "description": "limit_mg..history.main7_20230617160806",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617160806",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160806",
        "description": "limit_mg..history.main7_20230617160806",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617160806",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160806",
        "description": "limit_mg..history.main7_20230617160806",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617160806",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160806",
        "description": "limit_mg..history.main7_20230617160806",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617160806",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160808",
        "description": "limit_mg..history.main7_20230617160808",
        "peekOfCode": "tab_hdu = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\ntab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式",
        "detail": "limit_mg..history.main7_20230617160808",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160808",
        "description": "limit_mg..history.main7_20230617160808",
        "peekOfCode": "tab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617160808",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160808",
        "description": "limit_mg..history.main7_20230617160808",
        "peekOfCode": "snr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617160808",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160808",
        "description": "limit_mg..history.main7_20230617160808",
        "peekOfCode": "mag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617160808",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160808",
        "description": "limit_mg..history.main7_20230617160808",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160808",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160808",
        "description": "limit_mg..history.main7_20230617160808",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617160808",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160808",
        "description": "limit_mg..history.main7_20230617160808",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617160808",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160808",
        "description": "limit_mg..history.main7_20230617160808",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617160808",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160808",
        "description": "limit_mg..history.main7_20230617160808",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617160808",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160808",
        "description": "limit_mg..history.main7_20230617160808",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617160808",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160811",
        "description": "limit_mg..history.main7_20230617160811",
        "peekOfCode": "tab_hdu = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\ntab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式",
        "detail": "limit_mg..history.main7_20230617160811",
        "documentation": {}
    },
    {
        "label": "tab_hdu",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160811",
        "description": "limit_mg..history.main7_20230617160811",
        "peekOfCode": "tab_hdu = tab_hdu[np.argsort(tab_hdu['SNR_WIN'])]\n# 获取SNR_WIN和MAG_AUTO_S列的值\n# snr_win = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['SNR_WIN']\n# mag_auto_s = tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['SNR_WIN']<500)]['MAG_AUTO_S']\ntab_hdu=tab_hdu[(tab_hdu['SNR_WIN']>0) & (tab_hdu['FLAGS']==0) & (tab_hdu['SNR_WIN']!=np.nan)]\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617160811",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160811",
        "description": "limit_mg..history.main7_20230617160811",
        "peekOfCode": "snr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617160811",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160811",
        "description": "limit_mg..history.main7_20230617160811",
        "peekOfCode": "mag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617160811",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160811",
        "description": "limit_mg..history.main7_20230617160811",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160811",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160811",
        "description": "limit_mg..history.main7_20230617160811",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617160811",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160811",
        "description": "limit_mg..history.main7_20230617160811",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617160811",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160811",
        "description": "limit_mg..history.main7_20230617160811",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617160811",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160811",
        "description": "limit_mg..history.main7_20230617160811",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617160811",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160811",
        "description": "limit_mg..history.main7_20230617160811",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617160811",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "snr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "mag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617160958",
        "description": "limit_mg..history.main7_20230617160958",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617160958",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161004",
        "description": "limit_mg..history.main7_20230617161004",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161004",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161004",
        "description": "limit_mg..history.main7_20230617161004",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161004",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161004",
        "description": "limit_mg..history.main7_20230617161004",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617161004",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161004",
        "description": "limit_mg..history.main7_20230617161004",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161004",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161004",
        "description": "limit_mg..history.main7_20230617161004",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161004",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161004",
        "description": "limit_mg..history.main7_20230617161004",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161004",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161004",
        "description": "limit_mg..history.main7_20230617161004",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161004",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161004",
        "description": "limit_mg..history.main7_20230617161004",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161004",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161004",
        "description": "limit_mg..history.main7_20230617161004",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161004",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161004",
        "description": "limit_mg..history.main7_20230617161004",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161004",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161004",
        "description": "limit_mg..history.main7_20230617161004",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161004",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "snr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "mag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161007",
        "description": "limit_mg..history.main7_20230617161007",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161007",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "snr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "mag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161013",
        "description": "limit_mg..history.main7_20230617161013",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161013",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nsnr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "snr_win = tab_hdu['SNR_WIN']\nmag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "mag_auto_s = tab_hdu['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161014",
        "description": "limit_mg..history.main7_20230617161014",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161014",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161015",
        "description": "limit_mg..history.main7_20230617161015",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161015",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161015",
        "description": "limit_mg..history.main7_20230617161015",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161015",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161015",
        "description": "limit_mg..history.main7_20230617161015",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617161015",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161015",
        "description": "limit_mg..history.main7_20230617161015",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161015",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161015",
        "description": "limit_mg..history.main7_20230617161015",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161015",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161015",
        "description": "limit_mg..history.main7_20230617161015",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161015",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161015",
        "description": "limit_mg..history.main7_20230617161015",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161015",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161015",
        "description": "limit_mg..history.main7_20230617161015",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161015",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161015",
        "description": "limit_mg..history.main7_20230617161015",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161015",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161015",
        "description": "limit_mg..history.main7_20230617161015",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161015",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161015",
        "description": "limit_mg..history.main7_20230617161015",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161015",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161016",
        "description": "limit_mg..history.main7_20230617161016",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161016",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161016",
        "description": "limit_mg..history.main7_20230617161016",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161016",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161016",
        "description": "limit_mg..history.main7_20230617161016",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617161016",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161016",
        "description": "limit_mg..history.main7_20230617161016",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161016",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161016",
        "description": "limit_mg..history.main7_20230617161016",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161016",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161016",
        "description": "limit_mg..history.main7_20230617161016",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161016",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161016",
        "description": "limit_mg..history.main7_20230617161016",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161016",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161016",
        "description": "limit_mg..history.main7_20230617161016",
        "peekOfCode": "poly = PolynomialFeatures(degree=5)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161016",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161016",
        "description": "limit_mg..history.main7_20230617161016",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161016",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161016",
        "description": "limit_mg..history.main7_20230617161016",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161016",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161016",
        "description": "limit_mg..history.main7_20230617161016",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161016",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161024",
        "description": "limit_mg..history.main7_20230617161024",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161024",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161024",
        "description": "limit_mg..history.main7_20230617161024",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161024",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161024",
        "description": "limit_mg..history.main7_20230617161024",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617161024",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161024",
        "description": "limit_mg..history.main7_20230617161024",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161024",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161024",
        "description": "limit_mg..history.main7_20230617161024",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161024",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161024",
        "description": "limit_mg..history.main7_20230617161024",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161024",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161024",
        "description": "limit_mg..history.main7_20230617161024",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161024",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161024",
        "description": "limit_mg..history.main7_20230617161024",
        "peekOfCode": "poly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161024",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161024",
        "description": "limit_mg..history.main7_20230617161024",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161024",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161024",
        "description": "limit_mg..history.main7_20230617161024",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161024",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161024",
        "description": "limit_mg..history.main7_20230617161024",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161024",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161032",
        "description": "limit_mg..history.main7_20230617161032",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161032",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161032",
        "description": "limit_mg..history.main7_20230617161032",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161032",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161032",
        "description": "limit_mg..history.main7_20230617161032",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617161032",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161032",
        "description": "limit_mg..history.main7_20230617161032",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=1)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161032",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161032",
        "description": "limit_mg..history.main7_20230617161032",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=1)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161032",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161032",
        "description": "limit_mg..history.main7_20230617161032",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=1)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161032",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161032",
        "description": "limit_mg..history.main7_20230617161032",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=1)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161032",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161032",
        "description": "limit_mg..history.main7_20230617161032",
        "peekOfCode": "poly = PolynomialFeatures(degree=1)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161032",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161032",
        "description": "limit_mg..history.main7_20230617161032",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161032",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161032",
        "description": "limit_mg..history.main7_20230617161032",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161032",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161032",
        "description": "limit_mg..history.main7_20230617161032",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161032",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161039",
        "description": "limit_mg..history.main7_20230617161039",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161039",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161039",
        "description": "limit_mg..history.main7_20230617161039",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161039",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161039",
        "description": "limit_mg..history.main7_20230617161039",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617161039",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161039",
        "description": "limit_mg..history.main7_20230617161039",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161039",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161039",
        "description": "limit_mg..history.main7_20230617161039",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161039",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161039",
        "description": "limit_mg..history.main7_20230617161039",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161039",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161039",
        "description": "limit_mg..history.main7_20230617161039",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161039",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161039",
        "description": "limit_mg..history.main7_20230617161039",
        "peekOfCode": "poly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161039",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161039",
        "description": "limit_mg..history.main7_20230617161039",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161039",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161039",
        "description": "limit_mg..history.main7_20230617161039",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161039",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161039",
        "description": "limit_mg..history.main7_20230617161039",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161039",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161047",
        "description": "limit_mg..history.main7_20230617161047",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161047",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161047",
        "description": "limit_mg..history.main7_20230617161047",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161047",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161047",
        "description": "limit_mg..history.main7_20230617161047",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617161047",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161047",
        "description": "limit_mg..history.main7_20230617161047",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161047",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161047",
        "description": "limit_mg..history.main7_20230617161047",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161047",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161047",
        "description": "limit_mg..history.main7_20230617161047",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161047",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161047",
        "description": "limit_mg..history.main7_20230617161047",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161047",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161047",
        "description": "limit_mg..history.main7_20230617161047",
        "peekOfCode": "poly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161047",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161047",
        "description": "limit_mg..history.main7_20230617161047",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161047",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161047",
        "description": "limit_mg..history.main7_20230617161047",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161047",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161047",
        "description": "limit_mg..history.main7_20230617161047",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161047",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161101",
        "description": "limit_mg..history.main7_20230617161101",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161101",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161101",
        "description": "limit_mg..history.main7_20230617161101",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161101",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161101",
        "description": "limit_mg..history.main7_20230617161101",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617161101",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161101",
        "description": "limit_mg..history.main7_20230617161101",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161101",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161101",
        "description": "limit_mg..history.main7_20230617161101",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161101",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161101",
        "description": "limit_mg..history.main7_20230617161101",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161101",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161101",
        "description": "limit_mg..history.main7_20230617161101",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161101",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161101",
        "description": "limit_mg..history.main7_20230617161101",
        "peekOfCode": "poly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161101",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161101",
        "description": "limit_mg..history.main7_20230617161101",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161101",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161101",
        "description": "limit_mg..history.main7_20230617161101",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161101",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161101",
        "description": "limit_mg..history.main7_20230617161101",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161101",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161103",
        "description": "limit_mg..history.main7_20230617161103",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161103",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161103",
        "description": "limit_mg..history.main7_20230617161103",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161103",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161103",
        "description": "limit_mg..history.main7_20230617161103",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617161103",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161103",
        "description": "limit_mg..history.main7_20230617161103",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161103",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161103",
        "description": "limit_mg..history.main7_20230617161103",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161103",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161103",
        "description": "limit_mg..history.main7_20230617161103",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161103",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161103",
        "description": "limit_mg..history.main7_20230617161103",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161103",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161103",
        "description": "limit_mg..history.main7_20230617161103",
        "peekOfCode": "poly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161103",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161103",
        "description": "limit_mg..history.main7_20230617161103",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161103",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161103",
        "description": "limit_mg..history.main7_20230617161103",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161103",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161103",
        "description": "limit_mg..history.main7_20230617161103",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161103",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161115",
        "description": "limit_mg..history.main7_20230617161115",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']",
        "detail": "limit_mg..history.main7_20230617161115",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161115",
        "description": "limit_mg..history.main7_20230617161115",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161115",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161115",
        "description": "limit_mg..history.main7_20230617161115",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\n# stars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器",
        "detail": "limit_mg..history.main7_20230617161115",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161115",
        "description": "limit_mg..history.main7_20230617161115",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161115",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161115",
        "description": "limit_mg..history.main7_20230617161115",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161115",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161115",
        "description": "limit_mg..history.main7_20230617161115",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161115",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161115",
        "description": "limit_mg..history.main7_20230617161115",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161115",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161115",
        "description": "limit_mg..history.main7_20230617161115",
        "peekOfCode": "poly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161115",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161115",
        "description": "limit_mg..history.main7_20230617161115",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161115",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161115",
        "description": "limit_mg..history.main7_20230617161115",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161115",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161115",
        "description": "limit_mg..history.main7_20230617161115",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161115",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161151",
        "description": "limit_mg..history.main7_20230617161151",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式",
        "detail": "limit_mg..history.main7_20230617161151",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161151",
        "description": "limit_mg..history.main7_20230617161151",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)",
        "detail": "limit_mg..history.main7_20230617161151",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161151",
        "description": "limit_mg..history.main7_20230617161151",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据",
        "detail": "limit_mg..history.main7_20230617161151",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161151",
        "description": "limit_mg..history.main7_20230617161151",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161151",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161151",
        "description": "limit_mg..history.main7_20230617161151",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161151",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161151",
        "description": "limit_mg..history.main7_20230617161151",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161151",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161151",
        "description": "limit_mg..history.main7_20230617161151",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161151",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161151",
        "description": "limit_mg..history.main7_20230617161151",
        "peekOfCode": "poly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161151",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161151",
        "description": "limit_mg..history.main7_20230617161151",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161151",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161151",
        "description": "limit_mg..history.main7_20230617161151",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161151",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161151",
        "description": "limit_mg..history.main7_20230617161151",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161151",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161152",
        "description": "limit_mg..history.main7_20230617161152",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式",
        "detail": "limit_mg..history.main7_20230617161152",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161152",
        "description": "limit_mg..history.main7_20230617161152",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)",
        "detail": "limit_mg..history.main7_20230617161152",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161152",
        "description": "limit_mg..history.main7_20230617161152",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据",
        "detail": "limit_mg..history.main7_20230617161152",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161152",
        "description": "limit_mg..history.main7_20230617161152",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161152",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161152",
        "description": "limit_mg..history.main7_20230617161152",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161152",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161152",
        "description": "limit_mg..history.main7_20230617161152",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161152",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161152",
        "description": "limit_mg..history.main7_20230617161152",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161152",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161152",
        "description": "limit_mg..history.main7_20230617161152",
        "peekOfCode": "poly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161152",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161152",
        "description": "limit_mg..history.main7_20230617161152",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161152",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161152",
        "description": "limit_mg..history.main7_20230617161152",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161152",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161152",
        "description": "limit_mg..history.main7_20230617161152",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161152",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161155",
        "description": "limit_mg..history.main7_20230617161155",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161155",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161155",
        "description": "limit_mg..history.main7_20230617161155",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161155",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161155",
        "description": "limit_mg..history.main7_20230617161155",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161155",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161155",
        "description": "limit_mg..history.main7_20230617161155",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161155",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161155",
        "description": "limit_mg..history.main7_20230617161155",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161155",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161155",
        "description": "limit_mg..history.main7_20230617161155",
        "peekOfCode": "poly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161155",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161155",
        "description": "limit_mg..history.main7_20230617161155",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161155",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161155",
        "description": "limit_mg..history.main7_20230617161155",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161155",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161155",
        "description": "limit_mg..history.main7_20230617161155",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161155",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161156",
        "description": "limit_mg..history.main7_20230617161156",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161156",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161156",
        "description": "limit_mg..history.main7_20230617161156",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161156",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161156",
        "description": "limit_mg..history.main7_20230617161156",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161156",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161156",
        "description": "limit_mg..history.main7_20230617161156",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161156",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161156",
        "description": "limit_mg..history.main7_20230617161156",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161156",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161156",
        "description": "limit_mg..history.main7_20230617161156",
        "peekOfCode": "poly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161156",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161156",
        "description": "limit_mg..history.main7_20230617161156",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161156",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161156",
        "description": "limit_mg..history.main7_20230617161156",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161156",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161156",
        "description": "limit_mg..history.main7_20230617161156",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161156",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161205",
        "description": "limit_mg..history.main7_20230617161205",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161205",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161205",
        "description": "limit_mg..history.main7_20230617161205",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161205",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161205",
        "description": "limit_mg..history.main7_20230617161205",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161205",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161205",
        "description": "limit_mg..history.main7_20230617161205",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161205",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161205",
        "description": "limit_mg..history.main7_20230617161205",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161205",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161205",
        "description": "limit_mg..history.main7_20230617161205",
        "peekOfCode": "poly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161205",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161205",
        "description": "limit_mg..history.main7_20230617161205",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161205",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161205",
        "description": "limit_mg..history.main7_20230617161205",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161205",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161205",
        "description": "limit_mg..history.main7_20230617161205",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161205",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161211",
        "description": "limit_mg..history.main7_20230617161211",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161211",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161211",
        "description": "limit_mg..history.main7_20230617161211",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161211",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161211",
        "description": "limit_mg..history.main7_20230617161211",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161211",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161211",
        "description": "limit_mg..history.main7_20230617161211",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161211",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161211",
        "description": "limit_mg..history.main7_20230617161211",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161211",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161211",
        "description": "limit_mg..history.main7_20230617161211",
        "peekOfCode": "poly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161211",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161211",
        "description": "limit_mg..history.main7_20230617161211",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161211",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161211",
        "description": "limit_mg..history.main7_20230617161211",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161211",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161211",
        "description": "limit_mg..history.main7_20230617161211",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161211",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161225",
        "description": "limit_mg..history.main7_20230617161225",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161225",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161225",
        "description": "limit_mg..history.main7_20230617161225",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures()\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161225",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161225",
        "description": "limit_mg..history.main7_20230617161225",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures()\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161225",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161225",
        "description": "limit_mg..history.main7_20230617161225",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures()\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161225",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161225",
        "description": "limit_mg..history.main7_20230617161225",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures()\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161225",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161225",
        "description": "limit_mg..history.main7_20230617161225",
        "peekOfCode": "poly = PolynomialFeatures()\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161225",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161225",
        "description": "limit_mg..history.main7_20230617161225",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161225",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161225",
        "description": "limit_mg..history.main7_20230617161225",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161225",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161225",
        "description": "limit_mg..history.main7_20230617161225",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161225",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161313",
        "description": "limit_mg..history.main7_20230617161313",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161313",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161313",
        "description": "limit_mg..history.main7_20230617161313",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161313",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161313",
        "description": "limit_mg..history.main7_20230617161313",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161313",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161313",
        "description": "limit_mg..history.main7_20230617161313",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161313",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161313",
        "description": "limit_mg..history.main7_20230617161313",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161313",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161313",
        "description": "limit_mg..history.main7_20230617161313",
        "peekOfCode": "poly = PolynomialFeatures(degree=3)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161313",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161313",
        "description": "limit_mg..history.main7_20230617161313",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161313",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161313",
        "description": "limit_mg..history.main7_20230617161313",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161313",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161313",
        "description": "limit_mg..history.main7_20230617161313",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161313",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161316",
        "description": "limit_mg..history.main7_20230617161316",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)",
        "detail": "limit_mg..history.main7_20230617161316",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161316",
        "description": "limit_mg..history.main7_20230617161316",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg..history.main7_20230617161316",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161316",
        "description": "limit_mg..history.main7_20230617161316",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg..history.main7_20230617161316",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161316",
        "description": "limit_mg..history.main7_20230617161316",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg..history.main7_20230617161316",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161316",
        "description": "limit_mg..history.main7_20230617161316",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg..history.main7_20230617161316",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161316",
        "description": "limit_mg..history.main7_20230617161316",
        "peekOfCode": "poly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main7_20230617161316",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161316",
        "description": "limit_mg..history.main7_20230617161316",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg..history.main7_20230617161316",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161316",
        "description": "limit_mg..history.main7_20230617161316",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg..history.main7_20230617161316",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg..history.main7_20230617161316",
        "description": "limit_mg..history.main7_20230617161316",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg..history.main7_20230617161316",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171758",
        "description": "limit_mg..history.main_20230616171758",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\nstars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]",
        "detail": "limit_mg..history.main_20230616171758",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171805",
        "description": "limit_mg..history.main_20230616171805",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]",
        "detail": "limit_mg..history.main_20230616171805",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171810",
        "description": "limit_mg..history.main_20230616171810",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']",
        "detail": "limit_mg..history.main_20230616171810",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171810",
        "description": "limit_mg..history.main_20230616171810",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']",
        "detail": "limit_mg..history.main_20230616171810",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171810",
        "description": "limit_mg..history.main_20230616171810",
        "peekOfCode": "mag = stars_table['MAG_AUTO']",
        "detail": "limit_mg..history.main_20230616171810",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171813",
        "description": "limit_mg..history.main_20230616171813",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\n# 对SNR_WIN和MAG_AUTO进行二次函数拟合\ncoeffs = np.polyfit(snr, mag, 2)\np = np.poly1d(coeffs)",
        "detail": "limit_mg..history.main_20230616171813",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171813",
        "description": "limit_mg..history.main_20230616171813",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\n# 对SNR_WIN和MAG_AUTO进行二次函数拟合\ncoeffs = np.polyfit(snr, mag, 2)\np = np.poly1d(coeffs)\n# 绘制拟合曲线和原始数据散点图\nx = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)",
        "detail": "limit_mg..history.main_20230616171813",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171813",
        "description": "limit_mg..history.main_20230616171813",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\n# 对SNR_WIN和MAG_AUTO进行二次函数拟合\ncoeffs = np.polyfit(snr, mag, 2)\np = np.poly1d(coeffs)\n# 绘制拟合曲线和原始数据散点图\nx = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg..history.main_20230616171813",
        "documentation": {}
    },
    {
        "label": "coeffs",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171813",
        "description": "limit_mg..history.main_20230616171813",
        "peekOfCode": "coeffs = np.polyfit(snr, mag, 2)\np = np.poly1d(coeffs)\n# 绘制拟合曲线和原始数据散点图\nx = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.main_20230616171813",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171813",
        "description": "limit_mg..history.main_20230616171813",
        "peekOfCode": "p = np.poly1d(coeffs)\n# 绘制拟合曲线和原始数据散点图\nx = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.show()",
        "detail": "limit_mg..history.main_20230616171813",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171813",
        "description": "limit_mg..history.main_20230616171813",
        "peekOfCode": "x = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.show()",
        "detail": "limit_mg..history.main_20230616171813",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171813",
        "description": "limit_mg..history.main_20230616171813",
        "peekOfCode": "y = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.show()",
        "detail": "limit_mg..history.main_20230616171813",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171822",
        "description": "limit_mg..history.main_20230616171822",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\n# 对SNR_WIN和MAG_AUTO进行二次函数拟合\ncoeffs = np.polyfit(snr, mag, 2)",
        "detail": "limit_mg..history.main_20230616171822",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171822",
        "description": "limit_mg..history.main_20230616171822",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\n# 对SNR_WIN和MAG_AUTO进行二次函数拟合\ncoeffs = np.polyfit(snr, mag, 2)\np = np.poly1d(coeffs)\n# 绘制拟合曲线和原始数据散点图\nx = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.main_20230616171822",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171822",
        "description": "limit_mg..history.main_20230616171822",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\n# 对SNR_WIN和MAG_AUTO进行二次函数拟合\ncoeffs = np.polyfit(snr, mag, 2)\np = np.poly1d(coeffs)\n# 绘制拟合曲线和原始数据散点图\nx = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)",
        "detail": "limit_mg..history.main_20230616171822",
        "documentation": {}
    },
    {
        "label": "coeffs",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171822",
        "description": "limit_mg..history.main_20230616171822",
        "peekOfCode": "coeffs = np.polyfit(snr, mag, 2)\np = np.poly1d(coeffs)\n# 绘制拟合曲线和原始数据散点图\nx = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.main_20230616171822",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171822",
        "description": "limit_mg..history.main_20230616171822",
        "peekOfCode": "p = np.poly1d(coeffs)\n# 绘制拟合曲线和原始数据散点图\nx = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.show()",
        "detail": "limit_mg..history.main_20230616171822",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171822",
        "description": "limit_mg..history.main_20230616171822",
        "peekOfCode": "x = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.show()",
        "detail": "limit_mg..history.main_20230616171822",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171822",
        "description": "limit_mg..history.main_20230616171822",
        "peekOfCode": "y = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.show()",
        "detail": "limit_mg..history.main_20230616171822",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171826",
        "description": "limit_mg..history.main_20230616171826",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616171826",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171826",
        "description": "limit_mg..history.main_20230616171826",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 对SNR_WIN和MAG_AUTO进行二次函数拟合\ncoeffs = np.polyfit(snr, mag, 2)\np = np.poly1d(coeffs)\n# 绘制拟合曲线和原始数据散点图\nx = np.linspace(min(snr), max(snr), 100)",
        "detail": "limit_mg..history.main_20230616171826",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171826",
        "description": "limit_mg..history.main_20230616171826",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 对SNR_WIN和MAG_AUTO进行二次函数拟合\ncoeffs = np.polyfit(snr, mag, 2)\np = np.poly1d(coeffs)\n# 绘制拟合曲线和原始数据散点图\nx = np.linspace(min(snr), max(snr), 100)\ny = p(x)",
        "detail": "limit_mg..history.main_20230616171826",
        "documentation": {}
    },
    {
        "label": "coeffs",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171826",
        "description": "limit_mg..history.main_20230616171826",
        "peekOfCode": "coeffs = np.polyfit(snr, mag, 2)\np = np.poly1d(coeffs)\n# 绘制拟合曲线和原始数据散点图\nx = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.main_20230616171826",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171826",
        "description": "limit_mg..history.main_20230616171826",
        "peekOfCode": "p = np.poly1d(coeffs)\n# 绘制拟合曲线和原始数据散点图\nx = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.show()",
        "detail": "limit_mg..history.main_20230616171826",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171826",
        "description": "limit_mg..history.main_20230616171826",
        "peekOfCode": "x = np.linspace(min(snr), max(snr), 100)\ny = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.show()",
        "detail": "limit_mg..history.main_20230616171826",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171826",
        "description": "limit_mg..history.main_20230616171826",
        "peekOfCode": "y = p(x)\nplt.scatter(snr, mag, s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.show()",
        "detail": "limit_mg..history.main_20230616171826",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171830",
        "description": "limit_mg..history.main_20230616171830",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616171830",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171830",
        "description": "limit_mg..history.main_20230616171830",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 对SNR_WIN和MAG_AUTO进行二次函数拟合\ncoeffs = np.polyfit(mag_sigclip,snr_sigclip,  2)\np = np.poly1d(coeffs)\ny = p(x)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.main_20230616171830",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171830",
        "description": "limit_mg..history.main_20230616171830",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 对SNR_WIN和MAG_AUTO进行二次函数拟合\ncoeffs = np.polyfit(mag_sigclip,snr_sigclip,  2)\np = np.poly1d(coeffs)\ny = p(x)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)",
        "detail": "limit_mg..history.main_20230616171830",
        "documentation": {}
    },
    {
        "label": "coeffs",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171830",
        "description": "limit_mg..history.main_20230616171830",
        "peekOfCode": "coeffs = np.polyfit(mag_sigclip,snr_sigclip,  2)\np = np.poly1d(coeffs)\ny = p(x)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616171830",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171830",
        "description": "limit_mg..history.main_20230616171830",
        "peekOfCode": "p = np.poly1d(coeffs)\ny = p(x)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616171830",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171830",
        "description": "limit_mg..history.main_20230616171830",
        "peekOfCode": "y = p(x)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616171830",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171832",
        "description": "limit_mg..history.main_20230616171832",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616171832",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171832",
        "description": "limit_mg..history.main_20230616171832",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.main_20230616171832",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171832",
        "description": "limit_mg..history.main_20230616171832",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616171832",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171835",
        "description": "limit_mg..history.main_20230616171835",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616171835",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171835",
        "description": "limit_mg..history.main_20230616171835",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.main_20230616171835",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171835",
        "description": "limit_mg..history.main_20230616171835",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.plot(x, y, color='red', linewidth=2)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616171835",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171858",
        "description": "limit_mg..history.main_20230616171858",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616171858",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171858",
        "description": "limit_mg..history.main_20230616171858",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616171858",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171858",
        "description": "limit_mg..history.main_20230616171858",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616171858",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171859",
        "description": "limit_mg..history.main_20230616171859",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616171859",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171859",
        "description": "limit_mg..history.main_20230616171859",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616171859",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616171859",
        "description": "limit_mg..history.main_20230616171859",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616171859",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172038",
        "description": "limit_mg..history.main_20230616172038",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172038",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172038",
        "description": "limit_mg..history.main_20230616172038",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616172038",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172038",
        "description": "limit_mg..history.main_20230616172038",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616172038",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172041",
        "description": "limit_mg..history.main_20230616172041",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172041",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172041",
        "description": "limit_mg..history.main_20230616172041",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616172041",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172041",
        "description": "limit_mg..history.main_20230616172041",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616172041",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172148",
        "description": "limit_mg..history.main_20230616172148",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\n# 对SNR_WIN和MAG_AUTO进行sigma clipping处理\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 进行二次函数拟合\nfit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly1d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.main_20230616172148",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172148",
        "description": "limit_mg..history.main_20230616172148",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\n# 对SNR_WIN和MAG_AUTO进行sigma clipping处理\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 进行二次函数拟合\nfit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly1d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')",
        "detail": "limit_mg..history.main_20230616172148",
        "documentation": {}
    },
    {
        "label": "fit_params",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172148",
        "description": "limit_mg..history.main_20230616172148",
        "peekOfCode": "fit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly1d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616172148",
        "documentation": {}
    },
    {
        "label": "fit_func",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172148",
        "description": "limit_mg..history.main_20230616172148",
        "peekOfCode": "fit_func = np.poly1d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616172148",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172155",
        "description": "limit_mg..history.main_20230616172155",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172155",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172155",
        "description": "limit_mg..history.main_20230616172155",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616172155",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172155",
        "description": "limit_mg..history.main_20230616172155",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616172155",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172205",
        "description": "limit_mg..history.main_20230616172205",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172205",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172205",
        "description": "limit_mg..history.main_20230616172205",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616172205",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172205",
        "description": "limit_mg..history.main_20230616172205",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616172205",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172206",
        "description": "limit_mg..history.main_20230616172206",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172206",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172206",
        "description": "limit_mg..history.main_20230616172206",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616172206",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172206",
        "description": "limit_mg..history.main_20230616172206",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\nplt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616172206",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172209",
        "description": "limit_mg..history.main_20230616172209",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172209",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172209",
        "description": "limit_mg..history.main_20230616172209",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# plt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\n# plt.xlabel('SNR_WIN')\n# plt.ylabel('MAG_AUTO')\n# plt.title('SNR_WIN and MAG_AUTO Fit')\n# plt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616172209",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172209",
        "description": "limit_mg..history.main_20230616172209",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# plt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)\n# plt.xlabel('SNR_WIN')\n# plt.ylabel('MAG_AUTO')\n# plt.title('SNR_WIN and MAG_AUTO Fit')\n# plt.gca().invert_xaxis()\n# plt.show()",
        "detail": "limit_mg..history.main_20230616172209",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172210",
        "description": "limit_mg..history.main_20230616172210",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172210",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172210",
        "description": "limit_mg..history.main_20230616172210",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 进行二次函数拟合\nfit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly1d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.main_20230616172210",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172210",
        "description": "limit_mg..history.main_20230616172210",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 进行二次函数拟合\nfit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly1d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')",
        "detail": "limit_mg..history.main_20230616172210",
        "documentation": {}
    },
    {
        "label": "fit_params",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172210",
        "description": "limit_mg..history.main_20230616172210",
        "peekOfCode": "fit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly1d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616172210",
        "documentation": {}
    },
    {
        "label": "fit_func",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172210",
        "description": "limit_mg..history.main_20230616172210",
        "peekOfCode": "fit_func = np.poly1d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()\n# plt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.main_20230616172210",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172222",
        "description": "limit_mg..history.main_20230616172222",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172222",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172222",
        "description": "limit_mg..history.main_20230616172222",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 进行二次函数拟合\nfit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly2d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.main_20230616172222",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172222",
        "description": "limit_mg..history.main_20230616172222",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 进行二次函数拟合\nfit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly2d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')",
        "detail": "limit_mg..history.main_20230616172222",
        "documentation": {}
    },
    {
        "label": "fit_params",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172222",
        "description": "limit_mg..history.main_20230616172222",
        "peekOfCode": "fit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly2d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616172222",
        "documentation": {}
    },
    {
        "label": "fit_func",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172222",
        "description": "limit_mg..history.main_20230616172222",
        "peekOfCode": "fit_func = np.poly2d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()\n# plt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.main_20230616172222",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172223",
        "description": "limit_mg..history.main_20230616172223",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172223",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172223",
        "description": "limit_mg..history.main_20230616172223",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 进行二次函数拟合\nfit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly2d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.main_20230616172223",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172223",
        "description": "limit_mg..history.main_20230616172223",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 进行二次函数拟合\nfit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly2d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')",
        "detail": "limit_mg..history.main_20230616172223",
        "documentation": {}
    },
    {
        "label": "fit_params",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172223",
        "description": "limit_mg..history.main_20230616172223",
        "peekOfCode": "fit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly2d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616172223",
        "documentation": {}
    },
    {
        "label": "fit_func",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172223",
        "description": "limit_mg..history.main_20230616172223",
        "peekOfCode": "fit_func = np.poly2d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()\n# plt.scatter(mag_sigclip,snr_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.main_20230616172223",
        "documentation": {}
    },
    {
        "label": "exp_func",
        "kind": 2,
        "importPath": "limit_mg..history.main_20230616172326",
        "description": "limit_mg..history.main_20230616172326",
        "peekOfCode": "def exp_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数函数拟合\npopt, _ = curve_fit(exp_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, exp_func(mag_sigclip, *popt), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.main_20230616172326",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172326",
        "description": "limit_mg..history.main_20230616172326",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172326",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172326",
        "description": "limit_mg..history.main_20230616172326",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 定义指数函数\ndef exp_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数函数拟合\npopt, _ = curve_fit(exp_func, mag_sigclip, snr_sigclip)",
        "detail": "limit_mg..history.main_20230616172326",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172326",
        "description": "limit_mg..history.main_20230616172326",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 定义指数函数\ndef exp_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数函数拟合\npopt, _ = curve_fit(exp_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.main_20230616172326",
        "documentation": {}
    },
    {
        "label": "exp_func",
        "kind": 2,
        "importPath": "limit_mg..history.main_20230616172327",
        "description": "limit_mg..history.main_20230616172327",
        "peekOfCode": "def exp_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数函数拟合\npopt, _ = curve_fit(exp_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, exp_func(mag_sigclip, *popt), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.main_20230616172327",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172327",
        "description": "limit_mg..history.main_20230616172327",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172327",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172327",
        "description": "limit_mg..history.main_20230616172327",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 定义指数函数\ndef exp_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数函数拟合\npopt, _ = curve_fit(exp_func, mag_sigclip, snr_sigclip)",
        "detail": "limit_mg..history.main_20230616172327",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172327",
        "description": "limit_mg..history.main_20230616172327",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 定义指数函数\ndef exp_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数函数拟合\npopt, _ = curve_fit(exp_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.main_20230616172327",
        "documentation": {}
    },
    {
        "label": "exp_func",
        "kind": 2,
        "importPath": "limit_mg..history.main_20230616172336",
        "description": "limit_mg..history.main_20230616172336",
        "peekOfCode": "def exp_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数函数拟合\npopt, _ = curve_fit(exp_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, exp_func(mag_sigclip, *popt), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.main_20230616172336",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172336",
        "description": "limit_mg..history.main_20230616172336",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172336",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172336",
        "description": "limit_mg..history.main_20230616172336",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 定义指数函数\ndef exp_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数函数拟合\npopt, _ = curve_fit(exp_func, mag_sigclip, snr_sigclip)",
        "detail": "limit_mg..history.main_20230616172336",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172336",
        "description": "limit_mg..history.main_20230616172336",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 定义指数函数\ndef exp_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数函数拟合\npopt, _ = curve_fit(exp_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg..history.main_20230616172336",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172447",
        "description": "limit_mg..history.main_20230616172447",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616172447",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172447",
        "description": "limit_mg..history.main_20230616172447",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 进行二次函数拟合\nfit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly1d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg..history.main_20230616172447",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172447",
        "description": "limit_mg..history.main_20230616172447",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 进行二次函数拟合\nfit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly1d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')",
        "detail": "limit_mg..history.main_20230616172447",
        "documentation": {}
    },
    {
        "label": "fit_params",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172447",
        "description": "limit_mg..history.main_20230616172447",
        "peekOfCode": "fit_params = np.polyfit(mag_sigclip, snr_sigclip, 2)\nfit_func = np.poly1d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()",
        "detail": "limit_mg..history.main_20230616172447",
        "documentation": {}
    },
    {
        "label": "fit_func",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616172447",
        "description": "limit_mg..history.main_20230616172447",
        "peekOfCode": "fit_func = np.poly1d(fit_params)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()\nplt.show()\n# # 进行二次函数拟合",
        "detail": "limit_mg..history.main_20230616172447",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616173132",
        "description": "limit_mg..history.main_20230616173132",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616173132",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616173132",
        "description": "limit_mg..history.main_20230616173132",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg..history.main_20230616173132",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616173132",
        "description": "limit_mg..history.main_20230616173132",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.plot(mag_sigclip, fit_func(mag_sigclip), color='red')\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.main_20230616173132",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616173134",
        "description": "limit_mg..history.main_20230616173134",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616173134",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616173134",
        "description": "limit_mg..history.main_20230616173134",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.main_20230616173134",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616173134",
        "description": "limit_mg..history.main_20230616173134",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616173134",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616191005",
        "description": "limit_mg..history.main_20230616191005",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616191005",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616191005",
        "description": "limit_mg..history.main_20230616191005",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.main_20230616191005",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616191005",
        "description": "limit_mg..history.main_20230616191005",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616191005",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616191006",
        "description": "limit_mg..history.main_20230616191006",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg..history.main_20230616191006",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616191006",
        "description": "limit_mg..history.main_20230616191006",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg..history.main_20230616191006",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg..history.main_20230616191006",
        "description": "limit_mg..history.main_20230616191006",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg..history.main_20230616191006",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg.old.demo02",
        "description": "limit_mg.old.demo02",
        "peekOfCode": "snr = np.random.normal(size=100)\nmag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]",
        "detail": "limit_mg.old.demo02",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg.old.demo02",
        "description": "limit_mg.old.demo02",
        "peekOfCode": "mag = 10 - 2.5 * np.log10(np.abs(snr)) + np.random.normal(scale=0.1, size=100)\n# Apply sigma clipping\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions",
        "detail": "limit_mg.old.demo02",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg.old.demo02",
        "description": "limit_mg.old.demo02",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')",
        "detail": "limit_mg.old.demo02",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg.old.demo02",
        "description": "limit_mg.old.demo02",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# Fit quadratic functions to the clipped data\np_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')",
        "detail": "limit_mg.old.demo02",
        "documentation": {}
    },
    {
        "label": "p_snr",
        "kind": 5,
        "importPath": "limit_mg.old.demo02",
        "description": "limit_mg.old.demo02",
        "peekOfCode": "p_snr = np.polyfit(snr_sigclip, mag_sigclip, 2)\n# Evaluate the fitted functions at some new values (e.g. x=0,1,2,...,len(snr_sigclip))\nx_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')",
        "detail": "limit_mg.old.demo02",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg.old.demo02",
        "description": "limit_mg.old.demo02",
        "peekOfCode": "x_new = np.arange(len(snr_sigclip))\ny_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg.old.demo02",
        "documentation": {}
    },
    {
        "label": "y_snr_fit",
        "kind": 5,
        "importPath": "limit_mg.old.demo02",
        "description": "limit_mg.old.demo02",
        "peekOfCode": "y_snr_fit = p_snr[0] * snr_sigclip**2 + p_snr[1] * x_new + p_snr[2]\n# Plot the clipped data and fitted functions\nplt.figure(figsize=(8, 6))\nplt.scatter(snr_sigclip, mag_sigclip, label='Clipped SNR')\nplt.plot(x_new, y_snr_fit, 'r-', label='Fitted SNR')\nplt.legend()\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.show()",
        "detail": "limit_mg.old.demo02",
        "documentation": {}
    },
    {
        "label": "exponential_func",
        "kind": 2,
        "importPath": "limit_mg.old.demo03",
        "description": "limit_mg.old.demo03",
        "peekOfCode": "def exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg.old.demo03",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg.old.demo03",
        "description": "limit_mg.old.demo03",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合",
        "detail": "limit_mg.old.demo03",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg.old.demo03",
        "description": "limit_mg.old.demo03",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg.old.demo03",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg.old.demo03",
        "description": "limit_mg.old.demo03",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nsnr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)",
        "detail": "limit_mg.old.demo03",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg.old.demo03",
        "description": "limit_mg.old.demo03",
        "peekOfCode": "snr_sigclip = sigma_clip(snr)\nmag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')",
        "detail": "limit_mg.old.demo03",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg.old.demo03",
        "description": "limit_mg.old.demo03",
        "peekOfCode": "mag_sigclip = sigma_clip(mag)\n# 定义指数函数\ndef exponential_func(x, a, b, c):\n    return a * np.exp(-b * x) + c\n# 进行指数式拟合\npopt, pcov = curve_fit(exponential_func, mag_sigclip, snr_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')",
        "detail": "limit_mg.old.demo03",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg.old.demo03",
        "description": "limit_mg.old.demo03",
        "peekOfCode": "x = np.linspace(np.min(mag_sigclip), np.max(mag_sigclip), len(mag_sigclip))\ny = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg.old.demo03",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg.old.demo03",
        "description": "limit_mg.old.demo03",
        "peekOfCode": "y = exponential_func(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()",
        "detail": "limit_mg.old.demo03",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg.old.demo06",
        "description": "limit_mg.old.demo06",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()",
        "detail": "limit_mg.old.demo06",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg.old.demo06",
        "description": "limit_mg.old.demo06",
        "peekOfCode": "snr = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['SNR_WIN']\nmag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)",
        "detail": "limit_mg.old.demo06",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg.old.demo06",
        "description": "limit_mg.old.demo06",
        "peekOfCode": "mag = stars_table[(stars_table['SNR_WIN']!=None) &(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0)]['MAG_AUTO_S']\nsnr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线",
        "detail": "limit_mg.old.demo06",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg.old.demo06",
        "description": "limit_mg.old.demo06",
        "peekOfCode": "snr_sigclip = sigma_clip(snr,maxiters=5)\nmag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg.old.demo06",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg.old.demo06",
        "description": "limit_mg.old.demo06",
        "peekOfCode": "mag_sigclip = sigma_clip(mag,maxiters=5)\nfrom astropy.modeling import models, fitting\nquadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg.old.demo06",
        "documentation": {}
    },
    {
        "label": "quadratic_model",
        "kind": 5,
        "importPath": "limit_mg.old.demo06",
        "description": "limit_mg.old.demo06",
        "peekOfCode": "quadratic_model = models.Exponential1D(amplitude=2.0, tau=0.1)\n# 定义拟合器\nfitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg.old.demo06",
        "documentation": {}
    },
    {
        "label": "fitter",
        "kind": 5,
        "importPath": "limit_mg.old.demo06",
        "description": "limit_mg.old.demo06",
        "peekOfCode": "fitter = fitting.LevMarLSQFitter()\n# 拟合模型\nfit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')",
        "detail": "limit_mg.old.demo06",
        "documentation": {}
    },
    {
        "label": "fit_result",
        "kind": 5,
        "importPath": "limit_mg.old.demo06",
        "description": "limit_mg.old.demo06",
        "peekOfCode": "fit_result = fitter(quadratic_model, snr_sigclip, mag_sigclip)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nx=np.sort(snr_sigclip)\nplt.plot(x, fit_result(x), color='r')\nplt.show()\nprint(fit_result([5]))",
        "detail": "limit_mg.old.demo06",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg.old.main",
        "description": "limit_mg.old.main",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits',hdu=2)\n# stars_table[(stars_table[\"SNR_WIN\"] > 4.5) & (stars_table[\"SNR_WIN\"] < 5.5)]\nimport numpy as np\nimport matplotlib.pyplot as plt\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nsnr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)",
        "detail": "limit_mg.old.main",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg.old.main",
        "description": "limit_mg.old.main",
        "peekOfCode": "snr = stars_table['SNR_WIN']\nmag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg.old.main",
        "documentation": {}
    },
    {
        "label": "mag",
        "kind": 5,
        "importPath": "limit_mg.old.main",
        "description": "limit_mg.old.main",
        "peekOfCode": "mag = stars_table['MAG_AUTO']\nfrom astropy.stats import sigma_clip\nsnr_sigclip=sigma_clip(snr)\nmag_sigclip=sigma_clip(mag)\n# 绘制散点图和拟合曲线\nplt.scatter(mag_sigclip, snr_sigclip, s=0.1, alpha=0.5)\nplt.xlabel('MAG_AUTO')\nplt.ylabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\nplt.gca().invert_xaxis()",
        "detail": "limit_mg.old.main",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg.old.main7",
        "description": "limit_mg.old.main7",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)",
        "detail": "limit_mg.old.main7",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg.old.main7",
        "description": "limit_mg.old.main7",
        "peekOfCode": "snr_win = stars_table['SNR_WIN']\nmag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)",
        "detail": "limit_mg.old.main7",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg.old.main7",
        "description": "limit_mg.old.main7",
        "peekOfCode": "mag_auto_s = stars_table['MAG_AUTO_S']\nplt.scatter(snr_win, mag_auto_s, s=1)\n# 将数据转换成输入格式\nsnr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型",
        "detail": "limit_mg.old.main7",
        "documentation": {}
    },
    {
        "label": "snr_win",
        "kind": 5,
        "importPath": "limit_mg.old.main7",
        "description": "limit_mg.old.main7",
        "peekOfCode": "snr_win = snr_win.reshape(-1, 1)\nmag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)",
        "detail": "limit_mg.old.main7",
        "documentation": {}
    },
    {
        "label": "mag_auto_s",
        "kind": 5,
        "importPath": "limit_mg.old.main7",
        "description": "limit_mg.old.main7",
        "peekOfCode": "mag_auto_s = mag_auto_s.reshape(-1, 1)\n# 定义多项式特征转换器\npoly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)",
        "detail": "limit_mg.old.main7",
        "documentation": {}
    },
    {
        "label": "poly",
        "kind": 5,
        "importPath": "limit_mg.old.main7",
        "description": "limit_mg.old.main7",
        "peekOfCode": "poly = PolynomialFeatures(degree=2)\n# 转换输入数据\nX_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg.old.main7",
        "documentation": {}
    },
    {
        "label": "X_poly",
        "kind": 5,
        "importPath": "limit_mg.old.main7",
        "description": "limit_mg.old.main7",
        "peekOfCode": "X_poly = poly.fit_transform(snr_win)\n# 定义线性回归模型\nmodel = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()",
        "detail": "limit_mg.old.main7",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "limit_mg.old.main7",
        "description": "limit_mg.old.main7",
        "peekOfCode": "model = LinearRegression()\n# 训练模型\nmodel.fit(X_poly, mag_auto_s)\nx_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果",
        "detail": "limit_mg.old.main7",
        "documentation": {}
    },
    {
        "label": "x_new",
        "kind": 5,
        "importPath": "limit_mg.old.main7",
        "description": "limit_mg.old.main7",
        "peekOfCode": "x_new = np.sort(snr_win)\nplt.plot(x_new, model.predict(poly.fit_transform(x_new)), 'r')\nplt.xlabel('SNR_WIN')\nplt.ylabel('MAG_AUTO_S')\nplt.show()\nplt.savefig(\"2.png\")\n# 输出拟合结果\nprint(model.predict(poly.fit_transform([[5]])))",
        "detail": "limit_mg.old.main7",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg.demo04",
        "description": "limit_mg.demo04",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg.demo04",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg.demo04",
        "description": "limit_mg.demo04",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & (stars_table['SNR_WIN']<800)]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg.demo04",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg.demo04",
        "description": "limit_mg.demo04",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')",
        "detail": "limit_mg.demo04",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg.demo04",
        "description": "limit_mg.demo04",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')",
        "detail": "limit_mg.demo04",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg.demo04",
        "description": "limit_mg.demo04",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg.demo04",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg.demo04",
        "description": "limit_mg.demo04",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg.demo04",
        "documentation": {}
    },
    {
        "label": "magsnr",
        "kind": 2,
        "importPath": "limit_mg.demo05",
        "description": "limit_mg.demo05",
        "peekOfCode": "def magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')\nplt.xlabel('SNR_WIN')\nplt.title('SNR_WIN and MAG_AUTO Fit')\n# 绘制拟合曲线",
        "detail": "limit_mg.demo05",
        "documentation": {}
    },
    {
        "label": "stars_table",
        "kind": 5,
        "importPath": "limit_mg.demo05",
        "description": "limit_mg.demo05",
        "peekOfCode": "stars_table = Table.read('mb_sc_tm15_u_20230602204159_239_sciimg_sexcat.fits', hdu=2)\n# 从stars_table中提取SNR_WIN和MAG_AUTO\nstars_table.sort(\"SNR_WIN\")\n# 从stars_table中提取SNR_WIN\nsnr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']",
        "detail": "limit_mg.demo05",
        "documentation": {}
    },
    {
        "label": "snr",
        "kind": 5,
        "importPath": "limit_mg.demo05",
        "description": "limit_mg.demo05",
        "peekOfCode": "snr = stars_table['SNR_WIN']\n# 对SNR_WIN进行3sigma clipping处理并获取掩码\nsigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr",
        "detail": "limit_mg.demo05",
        "documentation": {}
    },
    {
        "label": "sigclip_mask",
        "kind": 5,
        "importPath": "limit_mg.demo05",
        "description": "limit_mg.demo05",
        "peekOfCode": "sigclip_mask = sigma_clip(snr, sigma=3, maxiters=1).mask\nstars_table=stars_table[(stars_table['FLAGS']==0) & (stars_table['SNR_WIN']>0) & ~sigclip_mask ]\nsnr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)",
        "detail": "limit_mg.demo05",
        "documentation": {}
    },
    {
        "label": "snr_sigclip",
        "kind": 5,
        "importPath": "limit_mg.demo05",
        "description": "limit_mg.demo05",
        "peekOfCode": "snr_sigclip = stars_table['SNR_WIN']\nmag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)",
        "detail": "limit_mg.demo05",
        "documentation": {}
    },
    {
        "label": "mag_sigclip",
        "kind": 5,
        "importPath": "limit_mg.demo05",
        "description": "limit_mg.demo05",
        "peekOfCode": "mag_sigclip = stars_table['MAG_AUTO_S']\n# snr_sigclip = sigma_clip(snr,maxiters=5)\n# mag_sigclip = sigma_clip(mag,maxiters=5)\ndef magsnr(snr,a0,a1,a2,a3,a4):\n    return a0+(a1*snr**a2)+a3*snr\n# 进行指数式拟合\npopt, pcov = curve_fit(magsnr, snr_sigclip, mag_sigclip,maxfev=10000)\n# 绘制散点图和拟合曲线\nplt.scatter(snr_sigclip,mag_sigclip,  s=0.1, alpha=0.5)\nplt.ylabel('MAG_AUTO')",
        "detail": "limit_mg.demo05",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "limit_mg.demo05",
        "description": "limit_mg.demo05",
        "peekOfCode": "x = np.sort(snr_sigclip)\ny = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg.demo05",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "limit_mg.demo05",
        "description": "limit_mg.demo05",
        "peekOfCode": "y = magsnr(x, *popt)\nplt.plot(x, y, '-r')\nplt.show()\nprint(magsnr(5, *popt))",
        "detail": "limit_mg.demo05",
        "documentation": {}
    },
    {
        "label": "angular_distance",
        "kind": 2,
        "importPath": "RA和DEC的距离计算.demo01",
        "description": "RA和DEC的距离计算.demo01",
        "peekOfCode": "def angular_distance(ra1, dec1, ra2, dec2):\n    # 将角度转换为弧度\n    def to_radians(degrees):\n        return degrees * math.pi / 180.0\n    ra1 = to_radians(ra1)\n    dec1 = to_radians(dec1)\n    ra2 = to_radians(ra2)\n    dec2 = to_radians(dec2)\n    # 计算角距离\n    cos_angle = math.sin(dec1) * math.sin(dec2) + math.cos(dec1) * math.cos(dec2) * math.cos(ra1 - ra2)",
        "detail": "RA和DEC的距离计算.demo01",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "RA和DEC的距离计算.demo01",
        "description": "RA和DEC的距离计算.demo01",
        "peekOfCode": "distance = angular_distance(10, 10, 100, 20)\nprint(distance)",
        "detail": "RA和DEC的距离计算.demo01",
        "documentation": {}
    },
    {
        "label": "point1",
        "kind": 5,
        "importPath": "RA和DEC的距离计算.demo02",
        "description": "RA和DEC的距离计算.demo02",
        "peekOfCode": "point1 = SkyCoord(ra=10*u.degree, dec=10*u.degree)\n# 定义第二个点\npoint2 = SkyCoord(ra=100.0*u.degree, dec=20.0*u.degree)\n# 计算两个点之间的角距离\nangular_distance = point1.separation(point2)\n# 将角距离转换为弧度并输出结果\nprint(angular_distance.deg)\nprint(angular_distance)",
        "detail": "RA和DEC的距离计算.demo02",
        "documentation": {}
    },
    {
        "label": "point2",
        "kind": 5,
        "importPath": "RA和DEC的距离计算.demo02",
        "description": "RA和DEC的距离计算.demo02",
        "peekOfCode": "point2 = SkyCoord(ra=100.0*u.degree, dec=20.0*u.degree)\n# 计算两个点之间的角距离\nangular_distance = point1.separation(point2)\n# 将角距离转换为弧度并输出结果\nprint(angular_distance.deg)\nprint(angular_distance)",
        "detail": "RA和DEC的距离计算.demo02",
        "documentation": {}
    },
    {
        "label": "angular_distance",
        "kind": 5,
        "importPath": "RA和DEC的距离计算.demo02",
        "description": "RA和DEC的距离计算.demo02",
        "peekOfCode": "angular_distance = point1.separation(point2)\n# 将角距离转换为弧度并输出结果\nprint(angular_distance.deg)\nprint(angular_distance)",
        "detail": "RA和DEC的距离计算.demo02",
        "documentation": {}
    },
    {
        "label": "SQLTool",
        "kind": 6,
        "importPath": "sqllite.tools",
        "description": "sqllite.tools",
        "peekOfCode": "class SQLTool:\n    def __init__(self, db_file):\n        self.conn = sqlite3.connect(db_file)\n        self.cursor = self.conn.cursor()\n    def __del__(self):\n        self.conn.close()\n    def create_table(self):\n        self.cursor.execute('''CREATE TABLE IF NOT EXISTS catalog (\n            oid INTEGER PRIMARY KEY AUTOINCREMENT,\n            eid TEXT UNIQUE,",
        "detail": "sqllite.tools",
        "documentation": {}
    },
    {
        "label": "current_time_utc",
        "kind": 5,
        "importPath": "儒略日计算.demo3",
        "description": "儒略日计算.demo3",
        "peekOfCode": "current_time_utc = Time.now()\n# 将UTC时间转换为儒略日\njulian_day = current_time_utc.jd\nprint(\"当前时刻的儒略日为:\", julian_day)",
        "detail": "儒略日计算.demo3",
        "documentation": {}
    },
    {
        "label": "julian_day",
        "kind": 5,
        "importPath": "儒略日计算.demo3",
        "description": "儒略日计算.demo3",
        "peekOfCode": "julian_day = current_time_utc.jd\nprint(\"当前时刻的儒略日为:\", julian_day)",
        "detail": "儒略日计算.demo3",
        "documentation": {}
    },
    {
        "label": "ut_time",
        "kind": 5,
        "importPath": "儒略日计算.jddemo01",
        "description": "儒略日计算.jddemo01",
        "peekOfCode": "ut_time = \"2023-03-25T17:39:42\"\n# 创建Astropy的Time对象\nt = Time(ut_time, format=\"isot\", scale=\"utc\")\n# 获取儒略日\njulian_day = t.jd\nprint(\"给定UT时间 %s 的儒略日为: %.5f\" % (ut_time, julian_day))",
        "detail": "儒略日计算.jddemo01",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "儒略日计算.jddemo01",
        "description": "儒略日计算.jddemo01",
        "peekOfCode": "t = Time(ut_time, format=\"isot\", scale=\"utc\")\n# 获取儒略日\njulian_day = t.jd\nprint(\"给定UT时间 %s 的儒略日为: %.5f\" % (ut_time, julian_day))",
        "detail": "儒略日计算.jddemo01",
        "documentation": {}
    },
    {
        "label": "julian_day",
        "kind": 5,
        "importPath": "儒略日计算.jddemo01",
        "description": "儒略日计算.jddemo01",
        "peekOfCode": "julian_day = t.jd\nprint(\"给定UT时间 %s 的儒略日为: %.5f\" % (ut_time, julian_day))",
        "detail": "儒略日计算.jddemo01",
        "documentation": {}
    },
    {
        "label": "calc_distance",
        "kind": 2,
        "importPath": "坐标计算.calc_distance",
        "description": "坐标计算.calc_distance",
        "peekOfCode": "def calc_distance(ra1, dec1, ra2, dec2, ra_unit='degree', dec_unit='degree', target_time=None):\n    \"\"\"\n    计算赤道坐标间的角距离\n    参数:\n    - ra1 (float): 第一个坐标的赤经\n    - dec1 (float): 第一个坐标的赤纬\n    - ra2 (str): 第二个坐标的赤经，格式为 \"HH:MM:SS.S\" （时分秒用冒号分隔）\n    - dec2 (str): 第二个坐标的赤纬，格式为 \"+DD:MM:SS.S\" 或 \"-DD:MM:SS.S\" （符号、度分秒用冒号分隔）\n    - ra_unit (str): 第一个坐标的赤经单位，默认为 \"degree\"\n    - dec_unit (str): 第一个坐标的赤纬单位，默认为 \"degree\"",
        "detail": "坐标计算.calc_distance",
        "documentation": {}
    },
    {
        "label": "ra1",
        "kind": 5,
        "importPath": "坐标计算.calc_distance",
        "description": "坐标计算.calc_distance",
        "peekOfCode": "ra1 = 178.0\ndec1 = 20.0\nra2 = '06:06:50.9'\ndec2 = '+71:17:46'\ndistance = calc_distance(ra1, dec1, ra2, dec2, ra_unit='degree', dec_unit='degree')\nprint('距离为', distance, '度')",
        "detail": "坐标计算.calc_distance",
        "documentation": {}
    },
    {
        "label": "dec1",
        "kind": 5,
        "importPath": "坐标计算.calc_distance",
        "description": "坐标计算.calc_distance",
        "peekOfCode": "dec1 = 20.0\nra2 = '06:06:50.9'\ndec2 = '+71:17:46'\ndistance = calc_distance(ra1, dec1, ra2, dec2, ra_unit='degree', dec_unit='degree')\nprint('距离为', distance, '度')",
        "detail": "坐标计算.calc_distance",
        "documentation": {}
    },
    {
        "label": "ra2",
        "kind": 5,
        "importPath": "坐标计算.calc_distance",
        "description": "坐标计算.calc_distance",
        "peekOfCode": "ra2 = '06:06:50.9'\ndec2 = '+71:17:46'\ndistance = calc_distance(ra1, dec1, ra2, dec2, ra_unit='degree', dec_unit='degree')\nprint('距离为', distance, '度')",
        "detail": "坐标计算.calc_distance",
        "documentation": {}
    },
    {
        "label": "dec2",
        "kind": 5,
        "importPath": "坐标计算.calc_distance",
        "description": "坐标计算.calc_distance",
        "peekOfCode": "dec2 = '+71:17:46'\ndistance = calc_distance(ra1, dec1, ra2, dec2, ra_unit='degree', dec_unit='degree')\nprint('距离为', distance, '度')",
        "detail": "坐标计算.calc_distance",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "坐标计算.calc_distance",
        "description": "坐标计算.calc_distance",
        "peekOfCode": "distance = calc_distance(ra1, dec1, ra2, dec2, ra_unit='degree', dec_unit='degree')\nprint('距离为', distance, '度')",
        "detail": "坐标计算.calc_distance",
        "documentation": {}
    },
    {
        "label": "ra",
        "kind": 5,
        "importPath": "坐标计算.skydemo",
        "description": "坐标计算.skydemo",
        "peekOfCode": "ra = '06:16:36.8'\ndec = '+71:19:26'\n# Parse the RA and DEC values\nc = SkyCoord(ra, dec, unit=('hourangle', 'deg'))\n# Print the RA and DEC values in decimal format\nprint(c.ra.degree)\nprint(c.dec.degree)",
        "detail": "坐标计算.skydemo",
        "documentation": {}
    },
    {
        "label": "dec",
        "kind": 5,
        "importPath": "坐标计算.skydemo",
        "description": "坐标计算.skydemo",
        "peekOfCode": "dec = '+71:19:26'\n# Parse the RA and DEC values\nc = SkyCoord(ra, dec, unit=('hourangle', 'deg'))\n# Print the RA and DEC values in decimal format\nprint(c.ra.degree)\nprint(c.dec.degree)",
        "detail": "坐标计算.skydemo",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "坐标计算.skydemo",
        "description": "坐标计算.skydemo",
        "peekOfCode": "c = SkyCoord(ra, dec, unit=('hourangle', 'deg'))\n# Print the RA and DEC values in decimal format\nprint(c.ra.degree)\nprint(c.dec.degree)",
        "detail": "坐标计算.skydemo",
        "documentation": {}
    },
    {
        "label": "ra",
        "kind": 5,
        "importPath": "坐标计算.坐标计算01",
        "description": "坐标计算.坐标计算01",
        "peekOfCode": "ra = 178.0\ndec = 20.0\nra_hms = '06:06:50.9'\ndec_dms = '+71:17:46'\ncoord1 = SkyCoord(ra=ra*u.degree, dec=dec*u.degree, frame='icrs')\n# 使用SkyCoord解析赤道坐标，参数中的u.degree表示单位为度，frame指定坐标系为ICRS\ncoord2 = SkyCoord(ra=ra_hms, dec=dec_dms,unit=('hourangle', 'deg'), frame='icrs')\n# 同样通过SkyCoord解析第二组坐标\nsep = coord1.separation(coord2)\n# 计算两个坐标之间的角距离",
        "detail": "坐标计算.坐标计算01",
        "documentation": {}
    },
    {
        "label": "dec",
        "kind": 5,
        "importPath": "坐标计算.坐标计算01",
        "description": "坐标计算.坐标计算01",
        "peekOfCode": "dec = 20.0\nra_hms = '06:06:50.9'\ndec_dms = '+71:17:46'\ncoord1 = SkyCoord(ra=ra*u.degree, dec=dec*u.degree, frame='icrs')\n# 使用SkyCoord解析赤道坐标，参数中的u.degree表示单位为度，frame指定坐标系为ICRS\ncoord2 = SkyCoord(ra=ra_hms, dec=dec_dms,unit=('hourangle', 'deg'), frame='icrs')\n# 同样通过SkyCoord解析第二组坐标\nsep = coord1.separation(coord2)\n# 计算两个坐标之间的角距离\nprint('距离为', sep.deg, '度')",
        "detail": "坐标计算.坐标计算01",
        "documentation": {}
    },
    {
        "label": "ra_hms",
        "kind": 5,
        "importPath": "坐标计算.坐标计算01",
        "description": "坐标计算.坐标计算01",
        "peekOfCode": "ra_hms = '06:06:50.9'\ndec_dms = '+71:17:46'\ncoord1 = SkyCoord(ra=ra*u.degree, dec=dec*u.degree, frame='icrs')\n# 使用SkyCoord解析赤道坐标，参数中的u.degree表示单位为度，frame指定坐标系为ICRS\ncoord2 = SkyCoord(ra=ra_hms, dec=dec_dms,unit=('hourangle', 'deg'), frame='icrs')\n# 同样通过SkyCoord解析第二组坐标\nsep = coord1.separation(coord2)\n# 计算两个坐标之间的角距离\nprint('距离为', sep.deg, '度')",
        "detail": "坐标计算.坐标计算01",
        "documentation": {}
    },
    {
        "label": "dec_dms",
        "kind": 5,
        "importPath": "坐标计算.坐标计算01",
        "description": "坐标计算.坐标计算01",
        "peekOfCode": "dec_dms = '+71:17:46'\ncoord1 = SkyCoord(ra=ra*u.degree, dec=dec*u.degree, frame='icrs')\n# 使用SkyCoord解析赤道坐标，参数中的u.degree表示单位为度，frame指定坐标系为ICRS\ncoord2 = SkyCoord(ra=ra_hms, dec=dec_dms,unit=('hourangle', 'deg'), frame='icrs')\n# 同样通过SkyCoord解析第二组坐标\nsep = coord1.separation(coord2)\n# 计算两个坐标之间的角距离\nprint('距离为', sep.deg, '度')",
        "detail": "坐标计算.坐标计算01",
        "documentation": {}
    },
    {
        "label": "coord1",
        "kind": 5,
        "importPath": "坐标计算.坐标计算01",
        "description": "坐标计算.坐标计算01",
        "peekOfCode": "coord1 = SkyCoord(ra=ra*u.degree, dec=dec*u.degree, frame='icrs')\n# 使用SkyCoord解析赤道坐标，参数中的u.degree表示单位为度，frame指定坐标系为ICRS\ncoord2 = SkyCoord(ra=ra_hms, dec=dec_dms,unit=('hourangle', 'deg'), frame='icrs')\n# 同样通过SkyCoord解析第二组坐标\nsep = coord1.separation(coord2)\n# 计算两个坐标之间的角距离\nprint('距离为', sep.deg, '度')",
        "detail": "坐标计算.坐标计算01",
        "documentation": {}
    },
    {
        "label": "coord2",
        "kind": 5,
        "importPath": "坐标计算.坐标计算01",
        "description": "坐标计算.坐标计算01",
        "peekOfCode": "coord2 = SkyCoord(ra=ra_hms, dec=dec_dms,unit=('hourangle', 'deg'), frame='icrs')\n# 同样通过SkyCoord解析第二组坐标\nsep = coord1.separation(coord2)\n# 计算两个坐标之间的角距离\nprint('距离为', sep.deg, '度')",
        "detail": "坐标计算.坐标计算01",
        "documentation": {}
    },
    {
        "label": "sep",
        "kind": 5,
        "importPath": "坐标计算.坐标计算01",
        "description": "坐标计算.坐标计算01",
        "peekOfCode": "sep = coord1.separation(coord2)\n# 计算两个坐标之间的角距离\nprint('距离为', sep.deg, '度')",
        "detail": "坐标计算.坐标计算01",
        "documentation": {}
    },
    {
        "label": "is_time_format",
        "kind": 2,
        "importPath": "日期计算.TimeForIsorValidDemo",
        "description": "日期计算.TimeForIsorValidDemo",
        "peekOfCode": "def is_time_format(input_string):\n    try:\n        datetime.strptime(input_string, '%Y-%m-%dT%H:%M:%S.%f')\n        return True\n    except ValueError:\n        return False\n# 测试代码\ninput_string = '2023-03-27'\nif is_time_format(input_string):\n    print('输入的字符串是时间格式')",
        "detail": "日期计算.TimeForIsorValidDemo",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "日期计算.TimeForIsorValidDemo",
        "description": "日期计算.TimeForIsorValidDemo",
        "peekOfCode": "input_string = '2023-03-27'\nif is_time_format(input_string):\n    print('输入的字符串是时间格式')\nelse:\n    print('输入的字符串不是时间格式')",
        "detail": "日期计算.TimeForIsorValidDemo",
        "documentation": {}
    },
    {
        "label": "is_time_format",
        "kind": 2,
        "importPath": "日期计算.TimeValiddemo02",
        "description": "日期计算.TimeValiddemo02",
        "peekOfCode": "def is_time_format(input_string):\n    formats = ['%Y-%m-%d', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M:%S.%f', '%Y/%m/%d']\n    for format in formats:\n        try:\n            datetime.strptime(input_string, format)\n            return True\n        except ValueError:\n            pass\n    return False\n# 测试代码",
        "detail": "日期计算.TimeValiddemo02",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "日期计算.TimeValiddemo02",
        "description": "日期计算.TimeValiddemo02",
        "peekOfCode": "input_string = '2023-03-27'\nif is_time_format(input_string):\n    print('输入的字符串是时间格式')\nelse:\n    print('输入的字符串不是时间格式')",
        "detail": "日期计算.TimeValiddemo02",
        "documentation": {}
    },
    {
        "label": "is_time_format",
        "kind": 2,
        "importPath": "日期计算.Time转换和判断",
        "description": "日期计算.Time转换和判断",
        "peekOfCode": "def is_time_format(input_string):\n    formats = ['%Y-%m-%d', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M:%S.%f', '%Y/%m/%d']\n    for format in formats:\n        try:\n            datetime.strptime(input_string, format)\n            return True\n        except ValueError:\n            pass\n    return False\ndef convert_to_datetime(input_string):",
        "detail": "日期计算.Time转换和判断",
        "documentation": {}
    },
    {
        "label": "convert_to_datetime",
        "kind": 2,
        "importPath": "日期计算.Time转换和判断",
        "description": "日期计算.Time转换和判断",
        "peekOfCode": "def convert_to_datetime(input_string):\n    if is_time_format(input_string):\n        formats = ['%Y-%m-%d', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M:%S.%f', '%Y/%m/%d']\n        for format in formats:\n            try:\n                return datetime.strptime(input_string, format)\n            except ValueError:\n                pass\n    return None\n# 测试代码",
        "detail": "日期计算.Time转换和判断",
        "documentation": {}
    },
    {
        "label": "input_string",
        "kind": 5,
        "importPath": "日期计算.Time转换和判断",
        "description": "日期计算.Time转换和判断",
        "peekOfCode": "input_string = '2023-03-27T12:38:59.999'\ndt = convert_to_datetime(input_string)\nif dt:\n    print(dt.strftime('%Y-%m-%d %H:%M:%S'))\nelse:\n    print('输入的字符串不是时间格式')",
        "detail": "日期计算.Time转换和判断",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "日期计算.Time转换和判断",
        "description": "日期计算.Time转换和判断",
        "peekOfCode": "dt = convert_to_datetime(input_string)\nif dt:\n    print(dt.strftime('%Y-%m-%d %H:%M:%S'))\nelse:\n    print('输入的字符串不是时间格式')",
        "detail": "日期计算.Time转换和判断",
        "documentation": {}
    },
    {
        "label": "get_utc_time_and_day_range",
        "kind": 2,
        "importPath": "日期计算.UCTTime01",
        "description": "日期计算.UCTTime01",
        "peekOfCode": "def get_utc_time_and_day_range():\n    # 获取当前时间\n    local_time = datetime.now()\n    # 将当前时间转换为UTC时间\n    utc_time = local_time.astimezone(pytz.utc)\n    # 计算当前一天的UTC0点到24点\n    start_of_day_utc = datetime(utc_time.year, utc_time.month, utc_time.day, tzinfo=pytz.utc)\n    end_of_day_utc = start_of_day_utc + timedelta(days=1)\n    return utc_time, start_of_day_utc, end_of_day_utc\nutc_time, start_of_day_utc, end_of_day_utc = get_utc_time_and_day_range()",
        "detail": "日期计算.UCTTime01",
        "documentation": {}
    },
    {
        "label": "get_utc_time_and_day_range",
        "kind": 2,
        "importPath": "日期计算.UTCTime02",
        "description": "日期计算.UTCTime02",
        "peekOfCode": "def get_utc_time_and_day_range():\n    # 获取当前时间\n    local_time = datetime.now()\n    # 将当前时间转换为UTC时间\n    utc_time = local_time.astimezone(pytz.utc)\n    # 计算当前一天的UTC0点到24点\n    start_of_day_utc = datetime(utc_time.year, utc_time.month, utc_time.day, tzinfo=pytz.utc)\n    end_of_day_utc = start_of_day_utc + timedelta(days=1)\n    return utc_time, start_of_day_utc, end_of_day_utc\nutc_time, start_of_day_utc, end_of_day_utc = get_utc_time_and_day_range()",
        "detail": "日期计算.UTCTime02",
        "documentation": {}
    },
    {
        "label": "nYear",
        "kind": 5,
        "importPath": "日期计算.UTCTime03",
        "description": "日期计算.UTCTime03",
        "peekOfCode": "nYear = int(time.strftime('%Y', time.localtime(time.time())))\nnMonth = int(time.strftime('%m', time.localtime(time.time())))\nnDay = int(time.strftime('%d', time.localtime(time.time())))\nlocal_time = datetime.datetime(nYear, nMonth, nDay)\n# 将本地时间转换为UTC时间\nutc_timezone = pytz.timezone('UTC')\nutc_time = local_time.astimezone(utc_timezone)\nprint(utc_time)",
        "detail": "日期计算.UTCTime03",
        "documentation": {}
    },
    {
        "label": "nMonth",
        "kind": 5,
        "importPath": "日期计算.UTCTime03",
        "description": "日期计算.UTCTime03",
        "peekOfCode": "nMonth = int(time.strftime('%m', time.localtime(time.time())))\nnDay = int(time.strftime('%d', time.localtime(time.time())))\nlocal_time = datetime.datetime(nYear, nMonth, nDay)\n# 将本地时间转换为UTC时间\nutc_timezone = pytz.timezone('UTC')\nutc_time = local_time.astimezone(utc_timezone)\nprint(utc_time)",
        "detail": "日期计算.UTCTime03",
        "documentation": {}
    },
    {
        "label": "nDay",
        "kind": 5,
        "importPath": "日期计算.UTCTime03",
        "description": "日期计算.UTCTime03",
        "peekOfCode": "nDay = int(time.strftime('%d', time.localtime(time.time())))\nlocal_time = datetime.datetime(nYear, nMonth, nDay)\n# 将本地时间转换为UTC时间\nutc_timezone = pytz.timezone('UTC')\nutc_time = local_time.astimezone(utc_timezone)\nprint(utc_time)",
        "detail": "日期计算.UTCTime03",
        "documentation": {}
    },
    {
        "label": "local_time",
        "kind": 5,
        "importPath": "日期计算.UTCTime03",
        "description": "日期计算.UTCTime03",
        "peekOfCode": "local_time = datetime.datetime(nYear, nMonth, nDay)\n# 将本地时间转换为UTC时间\nutc_timezone = pytz.timezone('UTC')\nutc_time = local_time.astimezone(utc_timezone)\nprint(utc_time)",
        "detail": "日期计算.UTCTime03",
        "documentation": {}
    },
    {
        "label": "utc_timezone",
        "kind": 5,
        "importPath": "日期计算.UTCTime03",
        "description": "日期计算.UTCTime03",
        "peekOfCode": "utc_timezone = pytz.timezone('UTC')\nutc_time = local_time.astimezone(utc_timezone)\nprint(utc_time)",
        "detail": "日期计算.UTCTime03",
        "documentation": {}
    },
    {
        "label": "utc_time",
        "kind": 5,
        "importPath": "日期计算.UTCTime03",
        "description": "日期计算.UTCTime03",
        "peekOfCode": "utc_time = local_time.astimezone(utc_timezone)\nprint(utc_time)",
        "detail": "日期计算.UTCTime03",
        "documentation": {}
    },
    {
        "label": "get_first_and_last_day_of_month",
        "kind": 2,
        "importPath": "日期计算.当月所有天数",
        "description": "日期计算.当月所有天数",
        "peekOfCode": "def get_first_and_last_day_of_month():\n    today = date.today()\n    first_day_of_month = today.replace(day=1)\n    last_day_of_month = today.replace(day=28) + timedelta(days=4) - timedelta(days=1)\n    # 如果需要输出时分秒可以用下面两行替换第二行：\n    # first_day_of_month = datetime(today.year, today.month, 1)\n    # last_day_of_month = datetime(today.year, today.month, 1) + timedelta(days=32 - today.day) - timedelta(seconds=1)\n    return (first_day_of_month, last_day_of_month)\n# 调用函数并打印结果\n(first_day, last_day) = get_first_and_last_day_of_month()",
        "detail": "日期计算.当月所有天数",
        "documentation": {}
    },
    {
        "label": "get_first_and_last_day_of_month",
        "kind": 2,
        "importPath": "日期计算.指定月份",
        "description": "日期计算.指定月份",
        "peekOfCode": "def get_first_and_last_day_of_month(date_str):\n    date_obj = datetime.strptime(date_str, '%Y%m%d')\n    first_day_of_month = date_obj.replace(day=1)\n    last_day_of_month = first_day_of_month.replace(\n        day=28) + timedelta(days=4) - timedelta(days=1)\n    if last_day_of_month.month != first_day_of_month.month:\n        last_day_of_month = first_day_of_month.replace(\n            day=1) + timedelta(days=32 - first_day_of_month.day) - timedelta(days=1)\n    return first_day_of_month.strftime('%Y-%m-%d'), last_day_of_month.strftime('%Y-%m-%d')\nprint(get_first_and_last_day_of_month('20230225'))",
        "detail": "日期计算.指定月份",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "日期计算.日期计算01",
        "description": "日期计算.日期计算01",
        "peekOfCode": "now = datetime.now()\n# 设置中午12点作为分界点\nnoon = datetime(now.year, now.month, now.day, 12)\n# 判断当前时间与中午12点的关系\nif now < noon:\n    # 如果现在时间在中午12点前，则返回今天中午到明天中午的时间段\n    start_time = datetime(now.year, now.month, now.day, 12)\n    end_time = start_time + timedelta(days=1)\nelse:\n    # 如果现在时间在中午12点后，则返回明天中午到后天中午的时间段",
        "detail": "日期计算.日期计算01",
        "documentation": {}
    },
    {
        "label": "noon",
        "kind": 5,
        "importPath": "日期计算.日期计算01",
        "description": "日期计算.日期计算01",
        "peekOfCode": "noon = datetime(now.year, now.month, now.day, 12)\n# 判断当前时间与中午12点的关系\nif now < noon:\n    # 如果现在时间在中午12点前，则返回今天中午到明天中午的时间段\n    start_time = datetime(now.year, now.month, now.day, 12)\n    end_time = start_time + timedelta(days=1)\nelse:\n    # 如果现在时间在中午12点后，则返回明天中午到后天中午的时间段\n    start_time = datetime(now.year, now.month, now.day, 12) + timedelta(days=1)\n    end_time = start_time + timedelta(days=1)",
        "detail": "日期计算.日期计算01",
        "documentation": {}
    },
    {
        "label": "getS_E_Time",
        "kind": 2,
        "importPath": "日期计算.日期计算02",
        "description": "日期计算.日期计算02",
        "peekOfCode": "def getS_E_Time():\n    # 获取当前日期和时间\n    now = datetime.now()\n    # 设置中午12点作为分界点\n    noon = datetime(now.year, now.month, now.day, 12)\n    # 判断当前时间与中午12点的关系\n    if now < noon:\n        start_time = datetime(now.year, now.month, now.day, 12)-timedelta(1)-timedelta(hours=8)\n        end_time = noon-timedelta(8)\n    else:",
        "detail": "日期计算.日期计算02",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "日期计算.时间计算03",
        "description": "日期计算.时间计算03",
        "peekOfCode": "dt = datetime.strptime(\"2022 11 26 172500\", \"%Y %m %d %H%M%S\")\n# 将datetime对象格式化为标准的日期时间字符串\nformatted_dt = dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n# 输出格式化后的结果\nprint(formatted_dt)",
        "detail": "日期计算.时间计算03",
        "documentation": {}
    },
    {
        "label": "formatted_dt",
        "kind": 5,
        "importPath": "日期计算.时间计算03",
        "description": "日期计算.时间计算03",
        "peekOfCode": "formatted_dt = dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n# 输出格式化后的结果\nprint(formatted_dt)",
        "detail": "日期计算.时间计算03",
        "documentation": {}
    },
    {
        "label": "Lijiang",
        "kind": 6,
        "importPath": "月相.astronomia",
        "description": "月相.astronomia",
        "peekOfCode": "class Lijiang:\n    '''\n    为了简化,旧版本采用ephem计算\n    '''\n    Site=ephem.Observer()\n    Site.lon,Site.lat= '100.03222222222','26.69777'\n    Site.elevation=3000\n    sun= ephem.Sun()\n    moon=ephem.Moon()\n    def __init__(self,ra,dec,time):",
        "detail": "月相.astronomia",
        "documentation": {}
    },
    {
        "label": "getsunalt",
        "kind": 2,
        "importPath": "月相.astronomia",
        "description": "月相.astronomia",
        "peekOfCode": "def getsunalt(date=None):\n        Site = ephem.Observer()\n        Site.lon,Site.lat=  '100.03222222222','26.69777'\n        Site.elevation=3000\n        sun =  ephem.Sun()\n        if date is None:\n            Site.date=datetime.datetime.utcnow()\n        else:\n            Site.date=date\n        sun.compute(Site)",
        "detail": "月相.astronomia",
        "documentation": {}
    },
    {
        "label": "airmass_rad",
        "kind": 2,
        "importPath": "月相.astronomia",
        "description": "月相.astronomia",
        "peekOfCode": "def airmass_rad(hour_angle,latitude,dec):\n    \"\"\"\n    airmass at hour angle t\n    \"\"\"\n    x = 1/(np.sin(latitude)*np.sin(dec)+np.cos(latitude)*np.cos(dec)*np.cos(hour_angle))  #t is hour angle\n    delta_x = 0.00186*(x-1)+0.002875*((x-1)**2)+0.0008083*((x-1)**3)\n    airmass = x - delta_x\n    return float(airmass)\ndef airmass_deg(hour_angle,latitude,dec):\n    return airmass_rad(hour_angle*np.pi/180,latitude*np.pi/180,dec*np.pi/180)",
        "detail": "月相.astronomia",
        "documentation": {}
    },
    {
        "label": "airmass_deg",
        "kind": 2,
        "importPath": "月相.astronomia",
        "description": "月相.astronomia",
        "peekOfCode": "def airmass_deg(hour_angle,latitude,dec):\n    return airmass_rad(hour_angle*np.pi/180,latitude*np.pi/180,dec*np.pi/180)\ndef convertHMSDMS(ra,dec):\n    coor=SkyCoord(ra*u.deg,dec*u.deg)\n    rahms='%02d:%02d:%05.2f'%(coor.ra.hms.h,coor.ra.hms.m,coor.ra.hms.s)\n    decdms='%02d:%02d:%02d'%(coor.dec.dms.d,abs(coor.dec.dms.m),abs(coor.dec.dms.s))\n    #print(rahms,decdms)\n    return rahms,decdms",
        "detail": "月相.astronomia",
        "documentation": {}
    },
    {
        "label": "convertHMSDMS",
        "kind": 2,
        "importPath": "月相.astronomia",
        "description": "月相.astronomia",
        "peekOfCode": "def convertHMSDMS(ra,dec):\n    coor=SkyCoord(ra*u.deg,dec*u.deg)\n    rahms='%02d:%02d:%05.2f'%(coor.ra.hms.h,coor.ra.hms.m,coor.ra.hms.s)\n    decdms='%02d:%02d:%02d'%(coor.dec.dms.d,abs(coor.dec.dms.m),abs(coor.dec.dms.s))\n    #print(rahms,decdms)\n    return rahms,decdms",
        "detail": "月相.astronomia",
        "documentation": {}
    },
    {
        "label": "lijiang",
        "kind": 5,
        "importPath": "月相.demo2",
        "description": "月相.demo2",
        "peekOfCode": "lijiang = ephem.Observer()\nlijiang.lon, lijiang.lat = '100.03222222222', '26.69777'\nlijiang.elevation = 3000\nlijiang.date = '2023/3/25 10:16:09'\n# 计算月亮在给定时间的位置\nmoon = ephem.Moon()\nmoon.compute(lijiang)\n# 获取月相信息\nphase_name = ephem.next_full_moon(lijiang.date)  # 下一个满月的日期和时间\nillumination = moon.moon_phase  # 月亮照明率（0-1之间的值）",
        "detail": "月相.demo2",
        "documentation": {}
    },
    {
        "label": "lijiang.elevation",
        "kind": 5,
        "importPath": "月相.demo2",
        "description": "月相.demo2",
        "peekOfCode": "lijiang.elevation = 3000\nlijiang.date = '2023/3/25 10:16:09'\n# 计算月亮在给定时间的位置\nmoon = ephem.Moon()\nmoon.compute(lijiang)\n# 获取月相信息\nphase_name = ephem.next_full_moon(lijiang.date)  # 下一个满月的日期和时间\nillumination = moon.moon_phase  # 月亮照明率（0-1之间的值）\nphase_angle = moon.phase\nprint(f\"下一个满月是在 {phase_name}\")",
        "detail": "月相.demo2",
        "documentation": {}
    },
    {
        "label": "lijiang.date",
        "kind": 5,
        "importPath": "月相.demo2",
        "description": "月相.demo2",
        "peekOfCode": "lijiang.date = '2023/3/25 10:16:09'\n# 计算月亮在给定时间的位置\nmoon = ephem.Moon()\nmoon.compute(lijiang)\n# 获取月相信息\nphase_name = ephem.next_full_moon(lijiang.date)  # 下一个满月的日期和时间\nillumination = moon.moon_phase  # 月亮照明率（0-1之间的值）\nphase_angle = moon.phase\nprint(f\"下一个满月是在 {phase_name}\")\nprint(f\"月亮照明率为 {illumination}\")",
        "detail": "月相.demo2",
        "documentation": {}
    },
    {
        "label": "moon",
        "kind": 5,
        "importPath": "月相.demo2",
        "description": "月相.demo2",
        "peekOfCode": "moon = ephem.Moon()\nmoon.compute(lijiang)\n# 获取月相信息\nphase_name = ephem.next_full_moon(lijiang.date)  # 下一个满月的日期和时间\nillumination = moon.moon_phase  # 月亮照明率（0-1之间的值）\nphase_angle = moon.phase\nprint(f\"下一个满月是在 {phase_name}\")\nprint(f\"月亮照明率为 {illumination}\")\nprint(f\"月相为 {phase_angle}\")",
        "detail": "月相.demo2",
        "documentation": {}
    },
    {
        "label": "phase_name",
        "kind": 5,
        "importPath": "月相.demo2",
        "description": "月相.demo2",
        "peekOfCode": "phase_name = ephem.next_full_moon(lijiang.date)  # 下一个满月的日期和时间\nillumination = moon.moon_phase  # 月亮照明率（0-1之间的值）\nphase_angle = moon.phase\nprint(f\"下一个满月是在 {phase_name}\")\nprint(f\"月亮照明率为 {illumination}\")\nprint(f\"月相为 {phase_angle}\")",
        "detail": "月相.demo2",
        "documentation": {}
    },
    {
        "label": "illumination",
        "kind": 5,
        "importPath": "月相.demo2",
        "description": "月相.demo2",
        "peekOfCode": "illumination = moon.moon_phase  # 月亮照明率（0-1之间的值）\nphase_angle = moon.phase\nprint(f\"下一个满月是在 {phase_name}\")\nprint(f\"月亮照明率为 {illumination}\")\nprint(f\"月相为 {phase_angle}\")",
        "detail": "月相.demo2",
        "documentation": {}
    },
    {
        "label": "phase_angle",
        "kind": 5,
        "importPath": "月相.demo2",
        "description": "月相.demo2",
        "peekOfCode": "phase_angle = moon.phase\nprint(f\"下一个满月是在 {phase_name}\")\nprint(f\"月亮照明率为 {illumination}\")\nprint(f\"月相为 {phase_angle}\")",
        "detail": "月相.demo2",
        "documentation": {}
    }
]